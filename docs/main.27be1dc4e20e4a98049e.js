(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{0:function(t,e,n){t.exports=n("zUnb")},zUnb:function(t,e,n){"use strict";function r(t){return"function"==typeof t}n.r(e);let o=!1;const i={Promise:void 0,set useDeprecatedSynchronousErrorHandling(t){if(t){const t=new Error;console.warn("DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \n"+t.stack)}else o&&console.log("RxJS: Back to a better error behavior. Thank you. <3");o=t},get useDeprecatedSynchronousErrorHandling(){return o}};function s(t){setTimeout(()=>{throw t},0)}const a={closed:!0,next(t){},error(t){if(i.useDeprecatedSynchronousErrorHandling)throw t;s(t)},complete(){}},A=(()=>Array.isArray||(t=>t&&"number"==typeof t.length))();function u(t){return null!==t&&"object"==typeof t}const l=(()=>{function t(t){return Error.call(this),this.message=t?`${t.length} errors occurred during unsubscription:\n${t.map((t,e)=>`${e+1}) ${t.toString()}`).join("\n  ")}`:"",this.name="UnsubscriptionError",this.errors=t,this}return t.prototype=Object.create(Error.prototype),t})();let c=(()=>{class t{constructor(t){this.closed=!1,this._parentOrParents=null,this._subscriptions=null,t&&(this._unsubscribe=t)}unsubscribe(){let e;if(this.closed)return;let{_parentOrParents:n,_unsubscribe:o,_subscriptions:i}=this;if(this.closed=!0,this._parentOrParents=null,this._subscriptions=null,n instanceof t)n.remove(this);else if(null!==n)for(let t=0;t<n.length;++t)n[t].remove(this);if(r(o))try{o.call(this)}catch(s){e=s instanceof l?h(s.errors):[s]}if(A(i)){let t=-1,n=i.length;for(;++t<n;){const n=i[t];if(u(n))try{n.unsubscribe()}catch(s){e=e||[],s instanceof l?e=e.concat(h(s.errors)):e.push(s)}}}if(e)throw new l(e)}add(e){let n=e;if(!e)return t.EMPTY;switch(typeof e){case"function":n=new t(e);case"object":if(n===this||n.closed||"function"!=typeof n.unsubscribe)return n;if(this.closed)return n.unsubscribe(),n;if(!(n instanceof t)){const e=n;n=new t,n._subscriptions=[e]}break;default:throw new Error("unrecognized teardown "+e+" added to Subscription.")}let{_parentOrParents:r}=n;if(null===r)n._parentOrParents=this;else if(r instanceof t){if(r===this)return n;n._parentOrParents=[r,this]}else{if(-1!==r.indexOf(this))return n;r.push(this)}const o=this._subscriptions;return null===o?this._subscriptions=[n]:o.push(n),n}remove(t){const e=this._subscriptions;if(e){const n=e.indexOf(t);-1!==n&&e.splice(n,1)}}}return t.EMPTY=function(t){return t.closed=!0,t}(new t),t})();function h(t){return t.reduce((t,e)=>t.concat(e instanceof l?e.errors:e),[])}const d=(()=>"function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random())();class p extends c{constructor(t,e,n){switch(super(),this.syncErrorValue=null,this.syncErrorThrown=!1,this.syncErrorThrowable=!1,this.isStopped=!1,arguments.length){case 0:this.destination=a;break;case 1:if(!t){this.destination=a;break}if("object"==typeof t){t instanceof p?(this.syncErrorThrowable=t.syncErrorThrowable,this.destination=t,t.add(this)):(this.syncErrorThrowable=!0,this.destination=new g(this,t));break}default:this.syncErrorThrowable=!0,this.destination=new g(this,t,e,n)}}[d](){return this}static create(t,e,n){const r=new p(t,e,n);return r.syncErrorThrowable=!1,r}next(t){this.isStopped||this._next(t)}error(t){this.isStopped||(this.isStopped=!0,this._error(t))}complete(){this.isStopped||(this.isStopped=!0,this._complete())}unsubscribe(){this.closed||(this.isStopped=!0,super.unsubscribe())}_next(t){this.destination.next(t)}_error(t){this.destination.error(t),this.unsubscribe()}_complete(){this.destination.complete(),this.unsubscribe()}_unsubscribeAndRecycle(){const{_parentOrParents:t}=this;return this._parentOrParents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parentOrParents=t,this}}class g extends p{constructor(t,e,n,o){let i;super(),this._parentSubscriber=t;let s=this;r(e)?i=e:e&&(i=e.next,n=e.error,o=e.complete,e!==a&&(s=Object.create(e),r(s.unsubscribe)&&this.add(s.unsubscribe.bind(s)),s.unsubscribe=this.unsubscribe.bind(this))),this._context=s,this._next=i,this._error=n,this._complete=o}next(t){if(!this.isStopped&&this._next){const{_parentSubscriber:e}=this;i.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?this.__tryOrSetError(e,this._next,t)&&this.unsubscribe():this.__tryOrUnsub(this._next,t)}}error(t){if(!this.isStopped){const{_parentSubscriber:e}=this,{useDeprecatedSynchronousErrorHandling:n}=i;if(this._error)n&&e.syncErrorThrowable?(this.__tryOrSetError(e,this._error,t),this.unsubscribe()):(this.__tryOrUnsub(this._error,t),this.unsubscribe());else if(e.syncErrorThrowable)n?(e.syncErrorValue=t,e.syncErrorThrown=!0):s(t),this.unsubscribe();else{if(this.unsubscribe(),n)throw t;s(t)}}}complete(){if(!this.isStopped){const{_parentSubscriber:t}=this;if(this._complete){const e=()=>this._complete.call(this._context);i.useDeprecatedSynchronousErrorHandling&&t.syncErrorThrowable?(this.__tryOrSetError(t,e),this.unsubscribe()):(this.__tryOrUnsub(e),this.unsubscribe())}else this.unsubscribe()}}__tryOrUnsub(t,e){try{t.call(this._context,e)}catch(n){if(this.unsubscribe(),i.useDeprecatedSynchronousErrorHandling)throw n;s(n)}}__tryOrSetError(t,e,n){if(!i.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{e.call(this._context,n)}catch(r){return i.useDeprecatedSynchronousErrorHandling?(t.syncErrorValue=r,t.syncErrorThrown=!0,!0):(s(r),!0)}return!1}_unsubscribe(){const{_parentSubscriber:t}=this;this._context=null,this._parentSubscriber=null,t.unsubscribe()}}const f=(()=>"function"==typeof Symbol&&Symbol.observable||"@@observable")();function F(t){return t}let U=(()=>{class t{constructor(t){this._isScalar=!1,t&&(this._subscribe=t)}lift(e){const n=new t;return n.source=this,n.operator=e,n}subscribe(t,e,n){const{operator:r}=this,o=function(t,e,n){if(t){if(t instanceof p)return t;if(t[d])return t[d]()}return t||e||n?new p(t,e,n):new p(a)}(t,e,n);if(o.add(r?r.call(o,this.source):this.source||i.useDeprecatedSynchronousErrorHandling&&!o.syncErrorThrowable?this._subscribe(o):this._trySubscribe(o)),i.useDeprecatedSynchronousErrorHandling&&o.syncErrorThrowable&&(o.syncErrorThrowable=!1,o.syncErrorThrown))throw o.syncErrorValue;return o}_trySubscribe(t){try{return this._subscribe(t)}catch(e){i.useDeprecatedSynchronousErrorHandling&&(t.syncErrorThrown=!0,t.syncErrorValue=e),function(t){for(;t;){const{closed:e,destination:n,isStopped:r}=t;if(e||r)return!1;t=n&&n instanceof p?n:null}return!0}(t)?t.error(e):console.warn(e)}}forEach(t,e){return new(e=R(e))((e,n)=>{let r;r=this.subscribe(e=>{try{t(e)}catch(o){n(o),r&&r.unsubscribe()}},n,e)})}_subscribe(t){const{source:e}=this;return e&&e.subscribe(t)}[f](){return this}pipe(...t){return 0===t.length?this:(0===(e=t).length?F:1===e.length?e[0]:function(t){return e.reduce((t,e)=>e(t),t)})(this);var e}toPromise(t){return new(t=R(t))((t,e)=>{let n;this.subscribe(t=>n=t,t=>e(t),()=>t(n))})}}return t.create=e=>new t(e),t})();function R(t){if(t||(t=i.Promise||Promise),!t)throw new Error("no Promise impl found");return t}const b=(()=>{function t(){return Error.call(this),this.message="object unsubscribed",this.name="ObjectUnsubscribedError",this}return t.prototype=Object.create(Error.prototype),t})();class K extends c{constructor(t,e){super(),this.subject=t,this.subscriber=e,this.closed=!1}unsubscribe(){if(this.closed)return;this.closed=!0;const t=this.subject,e=t.observers;if(this.subject=null,!e||0===e.length||t.isStopped||t.closed)return;const n=e.indexOf(this.subscriber);-1!==n&&e.splice(n,1)}}class y extends p{constructor(t){super(t),this.destination=t}}let w=(()=>{class t extends U{constructor(){super(),this.observers=[],this.closed=!1,this.isStopped=!1,this.hasError=!1,this.thrownError=null}[d](){return new y(this)}lift(t){const e=new m(this,this);return e.operator=t,e}next(t){if(this.closed)throw new b;if(!this.isStopped){const{observers:e}=this,n=e.length,r=e.slice();for(let o=0;o<n;o++)r[o].next(t)}}error(t){if(this.closed)throw new b;this.hasError=!0,this.thrownError=t,this.isStopped=!0;const{observers:e}=this,n=e.length,r=e.slice();for(let o=0;o<n;o++)r[o].error(t);this.observers.length=0}complete(){if(this.closed)throw new b;this.isStopped=!0;const{observers:t}=this,e=t.length,n=t.slice();for(let r=0;r<e;r++)n[r].complete();this.observers.length=0}unsubscribe(){this.isStopped=!0,this.closed=!0,this.observers=null}_trySubscribe(t){if(this.closed)throw new b;return super._trySubscribe(t)}_subscribe(t){if(this.closed)throw new b;return this.hasError?(t.error(this.thrownError),c.EMPTY):this.isStopped?(t.complete(),c.EMPTY):(this.observers.push(t),new K(this,t))}asObservable(){const t=new U;return t.source=this,t}}return t.create=(t,e)=>new m(t,e),t})();class m extends w{constructor(t,e){super(),this.destination=t,this.source=e}next(t){const{destination:e}=this;e&&e.next&&e.next(t)}error(t){const{destination:e}=this;e&&e.error&&this.destination.error(t)}complete(){const{destination:t}=this;t&&t.complete&&this.destination.complete()}_subscribe(t){const{source:e}=this;return e?this.source.subscribe(t):c.EMPTY}}function k(t){return t&&"function"==typeof t.schedule}class x extends p{constructor(t,e,n){super(),this.parent=t,this.outerValue=e,this.outerIndex=n,this.index=0}_next(t){this.parent.notifyNext(this.outerValue,t,this.outerIndex,this.index++,this)}_error(t){this.parent.notifyError(t,this),this.unsubscribe()}_complete(){this.parent.notifyComplete(this),this.unsubscribe()}}const S=t=>e=>{for(let n=0,r=t.length;n<r&&!e.closed;n++)e.next(t[n]);e.complete()};function C(){return"function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator"}const j=C(),B=t=>t&&"number"==typeof t.length&&"function"!=typeof t;function v(t){return!!t&&"function"!=typeof t.subscribe&&"function"==typeof t.then}const W=t=>{if(t&&"function"==typeof t[f])return r=t,t=>{const e=r[f]();if("function"!=typeof e.subscribe)throw new TypeError("Provided object does not correctly implement Symbol.observable");return e.subscribe(t)};if(B(t))return S(t);if(v(t))return n=t,t=>(n.then(e=>{t.closed||(t.next(e),t.complete())},e=>t.error(e)).then(null,s),t);if(t&&"function"==typeof t[j])return e=t,t=>{const n=e[j]();for(;;){const e=n.next();if(e.done){t.complete();break}if(t.next(e.value),t.closed)break}return"function"==typeof n.return&&t.add(()=>{n.return&&n.return()}),t};{const e=u(t)?"an invalid object":`'${t}'`;throw new TypeError(`You provided ${e} where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.`)}var e,n,r};function I(t,e,n,r,o=new x(t,n,r)){if(!o.closed)return e instanceof U?e.subscribe(o):W(e)(o)}class D extends p{notifyNext(t,e,n,r,o){this.destination.next(e)}notifyError(t,e){this.destination.error(t)}notifyComplete(t){this.destination.complete()}}function O(t,e){return function(n){if("function"!=typeof t)throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");return n.lift(new G(t,e))}}class G{constructor(t,e){this.project=t,this.thisArg=e}call(t,e){return e.subscribe(new P(t,this.project,this.thisArg))}}class P extends p{constructor(t,e,n){super(t),this.project=e,this.count=0,this.thisArg=n||this}_next(t){let e;try{e=this.project.call(this.thisArg,t,this.count++)}catch(n){return void this.destination.error(n)}this.destination.next(e)}}function H(t,e){return new U(n=>{const r=new c;let o=0;return r.add(e.schedule((function(){o!==t.length?(n.next(t[o++]),n.closed||r.add(this.schedule())):n.complete()}))),r})}function N(t,e){return e?function(t,e){if(null!=t){if(function(t){return t&&"function"==typeof t[f]}(t))return function(t,e){return new U(n=>{const r=new c;return r.add(e.schedule(()=>{const o=t[f]();r.add(o.subscribe({next(t){r.add(e.schedule(()=>n.next(t)))},error(t){r.add(e.schedule(()=>n.error(t)))},complete(){r.add(e.schedule(()=>n.complete()))}}))})),r})}(t,e);if(v(t))return function(t,e){return new U(n=>{const r=new c;return r.add(e.schedule(()=>t.then(t=>{r.add(e.schedule(()=>{n.next(t),r.add(e.schedule(()=>n.complete()))}))},t=>{r.add(e.schedule(()=>n.error(t)))}))),r})}(t,e);if(B(t))return H(t,e);if(function(t){return t&&"function"==typeof t[j]}(t)||"string"==typeof t)return function(t,e){if(!t)throw new Error("Iterable cannot be null");return new U(n=>{const r=new c;let o;return r.add(()=>{o&&"function"==typeof o.return&&o.return()}),r.add(e.schedule(()=>{o=t[j](),r.add(e.schedule((function(){if(n.closed)return;let t,e;try{const n=o.next();t=n.value,e=n.done}catch(r){return void n.error(r)}e?n.complete():(n.next(t),this.schedule())})))})),r})}(t,e)}throw new TypeError((null!==t&&typeof t||t)+" is not observable")}(t,e):t instanceof U?t:new U(W(t))}function M(t,e,n=Number.POSITIVE_INFINITY){return"function"==typeof e?r=>r.pipe(M((n,r)=>N(t(n,r)).pipe(O((t,o)=>e(n,t,r,o))),n)):("number"==typeof e&&(n=e),e=>e.lift(new L(t,n)))}class L{constructor(t,e=Number.POSITIVE_INFINITY){this.project=t,this.concurrent=e}call(t,e){return e.subscribe(new J(t,this.project,this.concurrent))}}class J extends D{constructor(t,e,n=Number.POSITIVE_INFINITY){super(t),this.project=e,this.concurrent=n,this.hasCompleted=!1,this.buffer=[],this.active=0,this.index=0}_next(t){this.active<this.concurrent?this._tryNext(t):this.buffer.push(t)}_tryNext(t){let e;const n=this.index++;try{e=this.project(t,n)}catch(r){return void this.destination.error(r)}this.active++,this._innerSub(e,t,n)}_innerSub(t,e,n){const r=new x(this,e,n),o=this.destination;o.add(r);const i=I(this,t,void 0,void 0,r);i!==r&&o.add(i)}_complete(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&this.destination.complete(),this.unsubscribe()}notifyNext(t,e,n,r,o){this.destination.next(e)}notifyComplete(t){const e=this.buffer;this.remove(t),this.active--,e.length>0?this._next(e.shift()):0===this.active&&this.hasCompleted&&this.destination.complete()}}function Q(t=Number.POSITIVE_INFINITY){return M(F,t)}function T(t,e){return e?H(t,e):new U(S(t))}function E(){return function(t){return t.lift(new Z(t))}}class Z{constructor(t){this.connectable=t}call(t,e){const{connectable:n}=this;n._refCount++;const r=new z(t,n),o=e.subscribe(r);return r.closed||(r.connection=n.connect()),o}}class z extends p{constructor(t,e){super(t),this.connectable=e}_unsubscribe(){const{connectable:t}=this;if(!t)return void(this.connection=null);this.connectable=null;const e=t._refCount;if(e<=0)return void(this.connection=null);if(t._refCount=e-1,e>1)return void(this.connection=null);const{connection:n}=this,r=t._connection;this.connection=null,!r||n&&r!==n||r.unsubscribe()}}class V extends U{constructor(t,e){super(),this.source=t,this.subjectFactory=e,this._refCount=0,this._isComplete=!1}_subscribe(t){return this.getSubject().subscribe(t)}getSubject(){const t=this._subject;return t&&!t.isStopped||(this._subject=this.subjectFactory()),this._subject}connect(){let t=this._connection;return t||(this._isComplete=!1,t=this._connection=new c,t.add(this.source.subscribe(new X(this.getSubject(),this))),t.closed&&(this._connection=null,t=c.EMPTY)),t}refCount(){return E()(this)}}const Y=(()=>{const t=V.prototype;return{operator:{value:null},_refCount:{value:0,writable:!0},_subject:{value:null,writable:!0},_connection:{value:null,writable:!0},_subscribe:{value:t._subscribe},_isComplete:{value:t._isComplete,writable:!0},getSubject:{value:t.getSubject},connect:{value:t.connect},refCount:{value:t.refCount}}})();class X extends y{constructor(t,e){super(t),this.connectable=e}_error(t){this._unsubscribe(),super._error(t)}_complete(){this.connectable._isComplete=!0,this._unsubscribe(),super._complete()}_unsubscribe(){const t=this.connectable;if(t){this.connectable=null;const e=t._connection;t._refCount=0,t._subject=null,t._connection=null,e&&e.unsubscribe()}}}function q(){return new w}function _(t){return{toString:t}.toString()}function $(t,e,n){return _(()=>{const r=function(t){return function(...e){if(t){const n=t(...e);for(const t in n)this[t]=n[t]}}}(e);function o(...t){if(this instanceof o)return r.apply(this,t),this;const e=new o(...t);return n.annotation=e,n;function n(t,n,r){const o=t.hasOwnProperty("__parameters__")?t.__parameters__:Object.defineProperty(t,"__parameters__",{value:[]}).__parameters__;for(;o.length<=r;)o.push(null);return(o[r]=o[r]||[]).push(e),t}}return n&&(o.prototype=Object.create(n.prototype)),o.prototype.ngMetadataName=t,o.annotationCls=o,o})}const tt=$("Inject",t=>({token:t})),et=$("Optional"),nt=$("Self"),rt=$("SkipSelf");var ot=function(t){return t[t.Default=0]="Default",t[t.Host=1]="Host",t[t.Self=2]="Self",t[t.SkipSelf=4]="SkipSelf",t[t.Optional=8]="Optional",t}({});function it(t){for(let e in t)if(t[e]===it)return e;throw Error("Could not find renamed property on target object.")}function st(t){return{token:t.token,providedIn:t.providedIn||null,factory:t.factory,value:void 0}}function at(t){return{factory:t.factory,providers:t.providers||[],imports:t.imports||[]}}function At(t){return ut(t,t[ct])||ut(t,t[pt])}function ut(t,e){return e&&e.token===t?e:null}function lt(t){return t&&(t.hasOwnProperty(ht)||t.hasOwnProperty(gt))?t[ht]:null}const ct=it({"\u0275prov":it}),ht=it({"\u0275inj":it}),dt=it({"\u0275provFallback":it}),pt=it({ngInjectableDef:it}),gt=it({ngInjectorDef:it});function ft(t){if("string"==typeof t)return t;if(Array.isArray(t))return"["+t.map(ft).join(", ")+"]";if(null==t)return""+t;if(t.overriddenName)return""+t.overriddenName;if(t.name)return""+t.name;const e=t.toString();if(null==e)return""+e;const n=e.indexOf("\n");return-1===n?e:e.substring(0,n)}function Ft(t,e){return null==t||""===t?null===e?"":e:null==e||""===e?t:t+" "+e}const Ut=it({__forward_ref__:it});function Rt(t){return t.__forward_ref__=Rt,t.toString=function(){return ft(this())},t}function bt(t){return"function"==typeof(e=t)&&e.hasOwnProperty(Ut)&&e.__forward_ref__===Rt?t():t;var e}const Kt="undefined"!=typeof globalThis&&globalThis,yt="undefined"!=typeof window&&window,wt="undefined"!=typeof self&&"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&self,mt="undefined"!=typeof global&&global,kt=Kt||mt||yt||wt,xt=it({"\u0275cmp":it}),St=it({"\u0275dir":it}),Ct=it({"\u0275pipe":it}),jt=it({"\u0275mod":it}),Bt=it({"\u0275loc":it}),vt=it({"\u0275fac":it}),Wt=it({__NG_ELEMENT_ID__:it});class It{constructor(t,e){this._desc=t,this.ngMetadataName="InjectionToken",this.\u0275prov=void 0,"number"==typeof e?this.__NG_ELEMENT_ID__=e:void 0!==e&&(this.\u0275prov=st({token:this,providedIn:e.providedIn||"root",factory:e.factory}))}toString(){return"InjectionToken "+this._desc}}const Dt=new It("INJECTOR",-1),Ot={},Gt=/\n/gm,Pt=it({provide:String,useValue:it});let Ht,Nt=void 0;function Mt(t){const e=Nt;return Nt=t,e}function Lt(t){const e=Ht;return Ht=t,e}function Jt(t,e=ot.Default){if(void 0===Nt)throw new Error("inject() must be called from an injection context");return null===Nt?Tt(t,void 0,e):Nt.get(t,e&ot.Optional?null:void 0,e)}function Qt(t,e=ot.Default){return(Ht||Jt)(bt(t),e)}function Tt(t,e,n){const r=At(t);if(r&&"root"==r.providedIn)return void 0===r.value?r.value=r.factory():r.value;if(n&ot.Optional)return null;if(void 0!==e)return e;throw new Error(`Injector: NOT_FOUND [${ft(t)}]`)}function Et(t){const e=[];for(let n=0;n<t.length;n++){const r=bt(t[n]);if(Array.isArray(r)){if(0===r.length)throw new Error("Arguments array must have arguments.");let t=void 0,n=ot.Default;for(let e=0;e<r.length;e++){const o=r[e];o instanceof et||"Optional"===o.ngMetadataName||o===et?n|=ot.Optional:o instanceof rt||"SkipSelf"===o.ngMetadataName||o===rt?n|=ot.SkipSelf:o instanceof nt||"Self"===o.ngMetadataName||o===nt?n|=ot.Self:t=o instanceof tt||o===tt?o.token:o}e.push(Qt(t,n))}else e.push(Qt(r))}return e}class Zt{get(t,e=Ot){if(e===Ot){const e=new Error(`NullInjectorError: No provider for ${ft(t)}!`);throw e.name="NullInjectorError",e}return e}}class zt{}class Vt{}function Yt(t,e){t.forEach(t=>Array.isArray(t)?Yt(t,e):e(t))}function Xt(t,e,n){e>=t.length?t.push(n):t.splice(e,0,n)}function qt(t,e){return e>=t.length-1?t.pop():t.splice(e,1)[0]}var _t=function(t){return t[t.OnPush=0]="OnPush",t[t.Default=1]="Default",t}({}),$t=function(t){return t[t.Emulated=0]="Emulated",t[t.Native=1]="Native",t[t.None=2]="None",t[t.ShadowDom=3]="ShadowDom",t}({});const te={},ee=[];let ne=0;function re(t){return _(()=>{const e=t.type,n=e.prototype,r={},o={type:e,providersResolver:null,decls:t.decls,vars:t.vars,factory:null,template:t.template||null,consts:t.consts||null,ngContentSelectors:t.ngContentSelectors,hostBindings:t.hostBindings||null,hostVars:t.hostVars||0,hostAttrs:t.hostAttrs||null,contentQueries:t.contentQueries||null,declaredInputs:r,inputs:null,outputs:null,exportAs:t.exportAs||null,onChanges:null,onInit:n.ngOnInit||null,doCheck:n.ngDoCheck||null,afterContentInit:n.ngAfterContentInit||null,afterContentChecked:n.ngAfterContentChecked||null,afterViewInit:n.ngAfterViewInit||null,afterViewChecked:n.ngAfterViewChecked||null,onDestroy:n.ngOnDestroy||null,onPush:t.changeDetection===_t.OnPush,directiveDefs:null,pipeDefs:null,selectors:t.selectors||ee,viewQuery:t.viewQuery||null,features:t.features||null,data:t.data||{},encapsulation:t.encapsulation||$t.Emulated,id:"c",styles:t.styles||ee,_:null,setInput:null,schemas:t.schemas||null,tView:null},i=t.directives,s=t.features,a=t.pipes;return o.id+=ne++,o.inputs=Ae(t.inputs,r),o.outputs=Ae(t.outputs),s&&s.forEach(t=>t(o)),o.directiveDefs=i?()=>("function"==typeof i?i():i).map(oe):null,o.pipeDefs=a?()=>("function"==typeof a?a():a).map(ie):null,o})}function oe(t){return le(t)||function(t){return t[St]||null}(t)}function ie(t){return function(t){return t[Ct]||null}(t)}const se={};function ae(t){const e={type:t.type,bootstrap:t.bootstrap||ee,declarations:t.declarations||ee,imports:t.imports||ee,exports:t.exports||ee,transitiveCompileScopes:null,schemas:t.schemas||null,id:t.id||null};return null!=t.id&&_(()=>{se[t.id]=t.type}),e}function Ae(t,e){if(null==t)return te;const n={};for(const r in t)if(t.hasOwnProperty(r)){let o=t[r],i=o;Array.isArray(o)&&(i=o[1],o=o[0]),n[o]=r,e&&(e[o]=i)}return n}const ue=re;function le(t){return t[xt]||null}function ce(t,e){return t.hasOwnProperty(vt)?t[vt]:null}function he(t,e){const n=t[jt]||null;if(!n&&!0===e)throw new Error(`Type ${ft(t)} does not have '\u0275mod' property.`);return n}function de(t){return Array.isArray(t)&&"object"==typeof t[1]}function pe(t){return Array.isArray(t)&&!0===t[1]}function ge(t){return 0!=(8&t.flags)}function fe(t){return 2==(2&t.flags)}function Fe(t){return 1==(1&t.flags)}function Ue(t){return null!==t.template}function Re(t){return 0!=(512&t[2])}let be=void 0;function Ke(){return void 0!==be?be:"undefined"!=typeof document?document:void 0}function ye(t){return!!t.listen}const we={createRenderer:(t,e)=>Ke()};function me(t){for(;Array.isArray(t);)t=t[0];return t}function ke(t,e){return me(e[t.index])}function xe(t,e){return t.data[e+20]}function Se(t,e){const n=e[t];return de(n)?n:n[0]}function Ce(t){const e=function(t){return t.__ngContext__||null}(t);return e?Array.isArray(e)?e:e.lView:null}function je(t){return 128==(128&t[2])}function Be(t,e){return null===t||null==e?null:t[e]}function ve(t){t[18]=0}function We(t,e){t[5]+=e;let n=t,r=t[3];for(;null!==r&&(1===e&&1===n[5]||-1===e&&0===n[5]);)r[5]+=e,n=r,r=r[3]}const Ie={lFrame:Xe(null),bindingsEnabled:!0,checkNoChangesMode:!1};function De(){return Ie.bindingsEnabled}function Oe(){return Ie.lFrame.lView}function Ge(){return Ie.lFrame.tView}function Pe(){return Ie.lFrame.previousOrParentTNode}function He(t,e){Ie.lFrame.previousOrParentTNode=t,Ie.lFrame.isParent=e}function Ne(){return Ie.lFrame.isParent}function Me(){Ie.lFrame.isParent=!1}function Le(){return Ie.checkNoChangesMode}function Je(t){Ie.checkNoChangesMode=t}function Qe(){return Ie.lFrame.bindingIndex++}function Te(t,e){const n=Ie.lFrame;n.bindingIndex=n.bindingRootIndex=t,Ee(e)}function Ee(t){Ie.lFrame.currentDirectiveIndex=t}function Ze(t){Ie.lFrame.currentQueryIndex=t}function ze(t,e){const n=Ye();Ie.lFrame=n,n.previousOrParentTNode=e,n.lView=t}function Ve(t,e){const n=Ye(),r=t[1];Ie.lFrame=n,n.previousOrParentTNode=e,n.lView=t,n.tView=r,n.contextLView=t,n.bindingIndex=r.bindingStartIndex}function Ye(){const t=Ie.lFrame,e=null===t?null:t.child;return null===e?Xe(t):e}function Xe(t){const e={previousOrParentTNode:null,isParent:!0,lView:null,tView:null,selectedIndex:0,contextLView:null,elementDepthCount:0,currentNamespace:null,currentDirectiveIndex:-1,bindingRootIndex:-1,bindingIndex:-1,currentQueryIndex:0,parent:t,child:null};return null!==t&&(t.child=e),e}function qe(){const t=Ie.lFrame;return Ie.lFrame=t.parent,t.previousOrParentTNode=null,t.lView=null,t}const _e=qe;function $e(){const t=qe();t.isParent=!0,t.tView=null,t.selectedIndex=0,t.contextLView=null,t.elementDepthCount=0,t.currentDirectiveIndex=-1,t.currentNamespace=null,t.bindingRootIndex=-1,t.bindingIndex=-1,t.currentQueryIndex=0}function tn(){return Ie.lFrame.selectedIndex}function en(t){Ie.lFrame.selectedIndex=t}function nn(){const t=Ie.lFrame;return xe(t.tView,t.selectedIndex)}function rn(t,e){for(let n=e.directiveStart,r=e.directiveEnd;n<r;n++){const e=t.data[n];e.afterContentInit&&(t.contentHooks||(t.contentHooks=[])).push(-n,e.afterContentInit),e.afterContentChecked&&((t.contentHooks||(t.contentHooks=[])).push(n,e.afterContentChecked),(t.contentCheckHooks||(t.contentCheckHooks=[])).push(n,e.afterContentChecked)),e.afterViewInit&&(t.viewHooks||(t.viewHooks=[])).push(-n,e.afterViewInit),e.afterViewChecked&&((t.viewHooks||(t.viewHooks=[])).push(n,e.afterViewChecked),(t.viewCheckHooks||(t.viewCheckHooks=[])).push(n,e.afterViewChecked)),null!=e.onDestroy&&(t.destroyHooks||(t.destroyHooks=[])).push(n,e.onDestroy)}}function on(t,e,n){An(t,e,3,n)}function sn(t,e,n,r){(3&t[2])===n&&An(t,e,n,r)}function an(t,e){let n=t[2];(3&n)===e&&(n&=2047,n+=1,t[2]=n)}function An(t,e,n,r){const o=null!=r?r:-1;let i=0;for(let s=void 0!==r?65535&t[18]:0;s<e.length;s++)if("number"==typeof e[s+1]){if(i=e[s],null!=r&&i>=r)break}else e[s]<0&&(t[18]+=65536),(i<o||-1==o)&&(un(t,n,e,s),t[18]=(4294901760&t[18])+s+2),s++}function un(t,e,n,r){const o=n[r]<0,i=n[r+1],s=t[o?-n[r]:n[r]];o?t[2]>>11<t[18]>>16&&(3&t[2])===e&&(t[2]+=2048,i.call(s)):i.call(s)}class ln{constructor(t,e,n){this.factory=t,this.resolving=!1,this.canSeeViewProviders=e,this.injectImpl=n}}function cn(t,e,n){const r=ye(t);let o=0;for(;o<n.length;){const i=n[o];if("number"==typeof i){if(0!==i)break;o++;const s=n[o++],a=n[o++],A=n[o++];r?t.setAttribute(e,a,A,s):e.setAttributeNS(s,a,A)}else{const s=i,a=n[++o];dn(s)?r&&t.setProperty(e,s,a):r?t.setAttribute(e,s,a):e.setAttribute(s,a),o++}}return o}function hn(t){return 3===t||4===t||6===t}function dn(t){return 64===t.charCodeAt(0)}function pn(t,e){if(null===e||0===e.length);else if(null===t||0===t.length)t=e.slice();else{let n=-1;for(let r=0;r<e.length;r++){const o=e[r];"number"==typeof o?n=o:0===n||gn(t,n,o,null,-1===n||2===n?e[++r]:null)}}return t}function gn(t,e,n,r,o){let i=0,s=t.length;if(-1===e)s=-1;else for(;i<t.length;){const n=t[i++];if("number"==typeof n){if(n===e){s=-1;break}if(n>e){s=i-1;break}}}for(;i<t.length;){const e=t[i];if("number"==typeof e)break;if(e===n){if(null===r)return void(null!==o&&(t[i+1]=o));if(r===t[i+1])return void(t[i+2]=o)}i++,null!==r&&i++,null!==o&&i++}-1!==s&&(t.splice(s,0,e),i=s+1),t.splice(i++,0,n),null!==r&&t.splice(i++,0,r),null!==o&&t.splice(i++,0,o)}function fn(t){return-1!==t}function Fn(t){return 32767&t}function Un(t){return t>>16}function Rn(t,e){let n=Un(t),r=e;for(;n>0;)r=r[15],n--;return r}function bn(t){return"string"==typeof t?t:null==t?"":""+t}function Kn(t){return"function"==typeof t?t.name||t.toString():"object"==typeof t&&null!=t&&"function"==typeof t.type?t.type.name||t.type.toString():bn(t)}const yn=(()=>("undefined"!=typeof requestAnimationFrame&&requestAnimationFrame||setTimeout).bind(kt))();function wn(t){return{name:"window",target:t.ownerDocument.defaultView}}function mn(t){return t instanceof Function?t():t}let kn=!0;function xn(t){const e=kn;return kn=t,e}let Sn=0;function Cn(t,e){const n=Bn(t,e);if(-1!==n)return n;const r=e[1];r.firstCreatePass&&(t.injectorIndex=e.length,jn(r.data,t),jn(e,null),jn(r.blueprint,null));const o=vn(t,e),i=t.injectorIndex;if(fn(o)){const t=Fn(o),n=Rn(o,e),r=n[1].data;for(let o=0;o<8;o++)e[i+o]=n[t+o]|r[t+o]}return e[i+8]=o,i}function jn(t,e){t.push(0,0,0,0,0,0,0,0,e)}function Bn(t,e){return-1===t.injectorIndex||t.parent&&t.parent.injectorIndex===t.injectorIndex||null==e[t.injectorIndex+8]?-1:t.injectorIndex}function vn(t,e){if(t.parent&&-1!==t.parent.injectorIndex)return t.parent.injectorIndex;let n=e[6],r=1;for(;n&&-1===n.injectorIndex;)n=(e=e[15])?e[6]:null,r++;return n?n.injectorIndex|r<<16:-1}function Wn(t,e,n){!function(t,e,n){let r;"string"==typeof n?r=n.charCodeAt(0)||0:n.hasOwnProperty(Wt)&&(r=n[Wt]),null==r&&(r=n[Wt]=Sn++);const o=255&r,i=1<<o,s=64&o,a=32&o,A=e.data;128&o?s?a?A[t+7]|=i:A[t+6]|=i:a?A[t+5]|=i:A[t+4]|=i:s?a?A[t+3]|=i:A[t+2]|=i:a?A[t+1]|=i:A[t]|=i}(t,e,n)}function In(t,e,n,r=ot.Default,o){if(null!==t){const o=function(t){if("string"==typeof t)return t.charCodeAt(0)||0;const e=t.hasOwnProperty(Wt)?t[Wt]:void 0;return"number"==typeof e&&e>0?255&e:e}(n);if("function"==typeof o){ze(e,t);try{const t=o();if(null!=t||r&ot.Optional)return t;throw new Error(`No provider for ${Kn(n)}!`)}finally{_e()}}else if("number"==typeof o){if(-1===o)return new Nn(t,e);let i=null,s=Bn(t,e),a=-1,A=r&ot.Host?e[16][6]:null;for((-1===s||r&ot.SkipSelf)&&(a=-1===s?vn(t,e):e[s+8],Hn(r,!1)?(i=e[1],s=Fn(a),e=Rn(a,e)):s=-1);-1!==s;){a=e[s+8];const t=e[1];if(Pn(o,s,t.data)){const t=On(s,e,n,i,r,A);if(t!==Dn)return t}Hn(r,e[1].data[s+8]===A)&&Pn(o,s,e)?(i=t,s=Fn(a),e=Rn(a,e)):s=-1}}}if(r&ot.Optional&&void 0===o&&(o=null),0==(r&(ot.Self|ot.Host))){const t=e[9],i=Lt(void 0);try{return t?t.get(n,o,r&ot.Optional):Tt(n,o,r&ot.Optional)}finally{Lt(i)}}if(r&ot.Optional)return o;throw new Error(`NodeInjector: NOT_FOUND [${Kn(n)}]`)}const Dn={};function On(t,e,n,r,o,i){const s=e[1],a=s.data[t+8],A=function(t,e,n,r,o){const i=t.providerIndexes,s=e.data,a=65535&i,A=t.directiveStart,u=i>>16,l=o?a+u:t.directiveEnd;for(let c=r?a:a+u;c<l;c++){const t=s[c];if(c<A&&n===t||c>=A&&t.type===n)return c}if(o){const t=s[A];if(t&&Ue(t)&&t.type===n)return A}return null}(a,s,n,null==r?fe(a)&&kn:r!=s&&3===a.type,o&ot.Host&&i===a);return null!==A?Gn(e,s,A,a):Dn}function Gn(t,e,n,r){let o=t[n];const i=e.data;if(o instanceof ln){const s=o;if(s.resolving)throw new Error("Circular dep for "+Kn(i[n]));const a=xn(s.canSeeViewProviders);let A;s.resolving=!0,s.injectImpl&&(A=Lt(s.injectImpl)),ze(t,r);try{o=t[n]=s.factory(void 0,i,t,r),e.firstCreatePass&&n>=r.directiveStart&&function(t,e,n){const{onChanges:r,onInit:o,doCheck:i}=e;r&&((n.preOrderHooks||(n.preOrderHooks=[])).push(t,r),(n.preOrderCheckHooks||(n.preOrderCheckHooks=[])).push(t,r)),o&&(n.preOrderHooks||(n.preOrderHooks=[])).push(-t,o),i&&((n.preOrderHooks||(n.preOrderHooks=[])).push(t,i),(n.preOrderCheckHooks||(n.preOrderCheckHooks=[])).push(t,i))}(n,i[n],e)}finally{s.injectImpl&&Lt(A),xn(a),s.resolving=!1,_e()}}return o}function Pn(t,e,n){const r=64&t,o=32&t;let i;return i=128&t?r?o?n[e+7]:n[e+6]:o?n[e+5]:n[e+4]:r?o?n[e+3]:n[e+2]:o?n[e+1]:n[e],!!(i&1<<t)}function Hn(t,e){return!(t&ot.Self||t&ot.Host&&e)}class Nn{constructor(t,e){this._tNode=t,this._lView=e}get(t,e){return In(this._tNode,this._lView,t,void 0,e)}}function Mn(t){return t.ngDebugContext}function Ln(t){return t.ngOriginalError}function Jn(t,...e){t.error(...e)}class Qn{constructor(){this._console=console}handleError(t){const e=this._findOriginalError(t),n=this._findContext(t),r=function(t){return t.ngErrorLogger||Jn}(t);r(this._console,"ERROR",t),e&&r(this._console,"ORIGINAL ERROR",e),n&&r(this._console,"ERROR CONTEXT",n)}_findContext(t){return t?Mn(t)?Mn(t):this._findContext(Ln(t)):null}_findOriginalError(t){let e=Ln(t);for(;e&&Ln(e);)e=Ln(e);return e}}class Tn{constructor(t){this.changingThisBreaksApplicationSecurity=t}toString(){return"SafeValue must use [property]=binding: "+this.changingThisBreaksApplicationSecurity+" (see http://g.co/ng/security#xss)"}}function En(t){return t instanceof Tn?t.changingThisBreaksApplicationSecurity:t}function Zn(t,e){const n=function(t){return t instanceof Tn&&t.getTypeName()||null}(t);if(null!=n&&n!==e){if("ResourceURL"===n&&"URL"===e)return!0;throw new Error(`Required a safe ${e}, got a ${n} (see http://g.co/ng/security#xss)`)}return n===e}let zn=!0,Vn=!1;function Yn(){return Vn=!0,zn}class Xn{getInertBodyElement(t){t="<body><remove></remove>"+t+"</body>";try{const e=(new window.DOMParser).parseFromString(t,"text/html").body;return e.removeChild(e.firstChild),e}catch(e){return null}}}class qn{constructor(t){if(this.defaultDoc=t,this.inertDocument=this.defaultDoc.implementation.createHTMLDocument("sanitization-inert"),null==this.inertDocument.body){const t=this.inertDocument.createElement("html");this.inertDocument.appendChild(t);const e=this.inertDocument.createElement("body");t.appendChild(e)}}getInertBodyElement(t){const e=this.inertDocument.createElement("template");if("content"in e)return e.innerHTML=t,e;const n=this.inertDocument.createElement("body");return n.innerHTML=t,this.defaultDoc.documentMode&&this.stripCustomNsAttrs(n),n}stripCustomNsAttrs(t){const e=t.attributes;for(let r=e.length-1;0<r;r--){const n=e.item(r).name;"xmlns:ns1"!==n&&0!==n.indexOf("ns1:")||t.removeAttribute(n)}let n=t.firstChild;for(;n;)n.nodeType===Node.ELEMENT_NODE&&this.stripCustomNsAttrs(n),n=n.nextSibling}}const _n=/^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi,$n=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\/]+=*$/i;function tr(t){return(t=String(t)).match(_n)||t.match($n)?t:(Yn()&&console.warn(`WARNING: sanitizing unsafe URL value ${t} (see http://g.co/ng/security#xss)`),"unsafe:"+t)}function er(t){const e={};for(const n of t.split(","))e[n]=!0;return e}function nr(...t){const e={};for(const n of t)for(const t in n)n.hasOwnProperty(t)&&(e[t]=!0);return e}const rr=er("area,br,col,hr,img,wbr"),or=er("colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr"),ir=er("rp,rt"),sr=nr(ir,or),ar=nr(rr,nr(or,er("address,article,aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul")),nr(ir,er("a,abbr,acronym,audio,b,bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video")),sr),Ar=er("background,cite,href,itemtype,longdesc,poster,src,xlink:href"),ur=er("srcset"),lr=nr(Ar,ur,er("abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,valign,value,vspace,width"),er("aria-activedescendant,aria-atomic,aria-autocomplete,aria-busy,aria-checked,aria-colcount,aria-colindex,aria-colspan,aria-controls,aria-current,aria-describedby,aria-details,aria-disabled,aria-dropeffect,aria-errormessage,aria-expanded,aria-flowto,aria-grabbed,aria-haspopup,aria-hidden,aria-invalid,aria-keyshortcuts,aria-label,aria-labelledby,aria-level,aria-live,aria-modal,aria-multiline,aria-multiselectable,aria-orientation,aria-owns,aria-placeholder,aria-posinset,aria-pressed,aria-readonly,aria-relevant,aria-required,aria-roledescription,aria-rowcount,aria-rowindex,aria-rowspan,aria-selected,aria-setsize,aria-sort,aria-valuemax,aria-valuemin,aria-valuenow,aria-valuetext")),cr=er("script,style,template");class hr{constructor(){this.sanitizedSomething=!1,this.buf=[]}sanitizeChildren(t){let e=t.firstChild,n=!0;for(;e;)if(e.nodeType===Node.ELEMENT_NODE?n=this.startElement(e):e.nodeType===Node.TEXT_NODE?this.chars(e.nodeValue):this.sanitizedSomething=!0,n&&e.firstChild)e=e.firstChild;else for(;e;){e.nodeType===Node.ELEMENT_NODE&&this.endElement(e);let t=this.checkClobberedElement(e,e.nextSibling);if(t){e=t;break}e=this.checkClobberedElement(e,e.parentNode)}return this.buf.join("")}startElement(t){const e=t.nodeName.toLowerCase();if(!ar.hasOwnProperty(e))return this.sanitizedSomething=!0,!cr.hasOwnProperty(e);this.buf.push("<"),this.buf.push(e);const n=t.attributes;for(let o=0;o<n.length;o++){const t=n.item(o),e=t.name,i=e.toLowerCase();if(!lr.hasOwnProperty(i)){this.sanitizedSomething=!0;continue}let s=t.value;Ar[i]&&(s=tr(s)),ur[i]&&(r=s,s=(r=String(r)).split(",").map(t=>tr(t.trim())).join(", ")),this.buf.push(" ",e,'="',gr(s),'"')}var r;return this.buf.push(">"),!0}endElement(t){const e=t.nodeName.toLowerCase();ar.hasOwnProperty(e)&&!rr.hasOwnProperty(e)&&(this.buf.push("</"),this.buf.push(e),this.buf.push(">"))}chars(t){this.buf.push(gr(t))}checkClobberedElement(t,e){if(e&&(t.compareDocumentPosition(e)&Node.DOCUMENT_POSITION_CONTAINED_BY)===Node.DOCUMENT_POSITION_CONTAINED_BY)throw new Error("Failed to sanitize html because the element is clobbered: "+t.outerHTML);return e}}const dr=/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,pr=/([^\#-~ |!])/g;function gr(t){return t.replace(/&/g,"&amp;").replace(dr,(function(t){return"&#"+(1024*(t.charCodeAt(0)-55296)+(t.charCodeAt(1)-56320)+65536)+";"})).replace(pr,(function(t){return"&#"+t.charCodeAt(0)+";"})).replace(/</g,"&lt;").replace(/>/g,"&gt;")}let fr;function Fr(t){return"content"in t&&function(t){return t.nodeType===Node.ELEMENT_NODE&&"TEMPLATE"===t.nodeName}(t)?t.content:null}var Ur=function(t){return t[t.NONE=0]="NONE",t[t.HTML=1]="HTML",t[t.STYLE=2]="STYLE",t[t.SCRIPT=3]="SCRIPT",t[t.URL=4]="URL",t[t.RESOURCE_URL=5]="RESOURCE_URL",t}({});function Rr(t){const e=Kr();return e?e.sanitize(Ur.HTML,t)||"":Zn(t,"HTML")?En(t):function(t,e){let n=null;try{fr=fr||function(t){return function(){try{return!!(new window.DOMParser).parseFromString("","text/html")}catch(t){return!1}}()?new Xn:new qn(t)}(t);let r=e?String(e):"";n=fr.getInertBodyElement(r);let o=5,i=r;do{if(0===o)throw new Error("Failed to sanitize html because the input is unstable");o--,r=i,i=n.innerHTML,n=fr.getInertBodyElement(r)}while(r!==i);const s=new hr,a=s.sanitizeChildren(Fr(n)||n);return Yn()&&s.sanitizedSomething&&console.warn("WARNING: sanitizing HTML stripped some content, see http://g.co/ng/security#xss"),a}finally{if(n){const t=Fr(n)||n;for(;t.firstChild;)t.removeChild(t.firstChild)}}}(Ke(),bn(t))}function br(t){const e=Kr();return e?e.sanitize(Ur.URL,t)||"":Zn(t,"URL")?En(t):tr(bn(t))}function Kr(){const t=Oe();return t&&t[12]}function yr(t,e){t.__ngContext__=e}function wr(t){throw new Error("Multiple components match node with tagname "+t.tagName)}function mr(){throw new Error("Cannot mix multi providers and regular providers")}function kr(t,e,n){let r=t.length;for(;;){const o=t.indexOf(e,n);if(-1===o)return o;if(0===o||t.charCodeAt(o-1)<=32){const n=e.length;if(o+n===r||t.charCodeAt(o+n)<=32)return o}n=o+1}}function xr(t,e,n){let r=0;for(;r<t.length;){let o=t[r++];if(n&&"class"===o){if(o=t[r],-1!==kr(o.toLowerCase(),e,0))return!0}else if(1===o){for(;r<t.length&&"string"==typeof(o=t[r++]);)if(o.toLowerCase()===e)return!0;return!1}}return!1}function Sr(t){return 0===t.type&&"ng-template"!==t.tagName}function Cr(t,e,n){return e===(0!==t.type||n?t.tagName:"ng-template")}function jr(t,e,n){let r=4;const o=t.attrs||[],i=function(t){for(let e=0;e<t.length;e++)if(hn(t[e]))return e;return t.length}(o);let s=!1;for(let a=0;a<e.length;a++){const A=e[a];if("number"!=typeof A){if(!s)if(4&r){if(r=2|1&r,""!==A&&!Cr(t,A,n)||""===A&&1===e.length){if(Br(r))return!1;s=!0}}else{const u=8&r?A:e[++a];if(8&r&&null!==t.attrs){if(!xr(t.attrs,u,n)){if(Br(r))return!1;s=!0}continue}const l=vr(8&r?"class":A,o,Sr(t),n);if(-1===l){if(Br(r))return!1;s=!0;continue}if(""!==u){let t;t=l>i?"":o[l+1].toLowerCase();const e=8&r?t:null;if(e&&-1!==kr(e,u,0)||2&r&&u!==t){if(Br(r))return!1;s=!0}}}}else{if(!s&&!Br(r)&&!Br(A))return!1;if(s&&Br(A))continue;s=!1,r=A|1&r}}return Br(r)||s}function Br(t){return 0==(1&t)}function vr(t,e,n,r){if(null===e)return-1;let o=0;if(r||!n){let n=!1;for(;o<e.length;){const r=e[o];if(r===t)return o;if(3===r||6===r)n=!0;else{if(1===r||2===r){let t=e[++o];for(;"string"==typeof t;)t=e[++o];continue}if(4===r)break;if(0===r){o+=4;continue}}o+=n?1:2}return-1}return function(t,e){let n=t.indexOf(4);if(n>-1)for(n++;n<t.length;){const r=t[n];if("number"==typeof r)return-1;if(r===e)return n;n++}return-1}(e,t)}function Wr(t,e,n=!1){for(let r=0;r<e.length;r++)if(jr(t,e[r],n))return!0;return!1}function Ir(t,e){return t?":not("+e.trim()+")":e}function Dr(t){let e=t[0],n=1,r=2,o="",i=!1;for(;n<t.length;){let s=t[n];if("string"==typeof s)if(2&r){const e=t[++n];o+="["+s+(e.length>0?'="'+e+'"':"")+"]"}else 8&r?o+="."+s:4&r&&(o+=" "+s);else""===o||Br(s)||(e+=Ir(i,o),o=""),r=s,i=i||!Br(r);n++}return""!==o&&(e+=Ir(i,o)),e}const Or={};function Gr(t){const e=t[3];return pe(e)?e[3]:e}function Pr(t){return Nr(t[13])}function Hr(t){return Nr(t[4])}function Nr(t){for(;null!==t&&!pe(t);)t=t[4];return t}function Mr(t){Lr(Ge(),Oe(),tn()+t,Le())}function Lr(t,e,n,r){if(!r)if(3==(3&e[2])){const r=t.preOrderCheckHooks;null!==r&&on(e,r,n)}else{const r=t.preOrderHooks;null!==r&&sn(e,r,0,n)}en(n)}function Jr(t,e){const n=t.contentQueries;if(null!==n)for(let r=0;r<n.length;r+=2){const o=n[r],i=n[r+1];if(-1!==i){const n=t.data[i];Ze(o),n.contentQueries(2,e[i],i)}}}function Qr(t,e,n){return ye(e)?e.createElement(t,n):null===n?e.createElement(t):e.createElementNS(n,t)}function Tr(t,e,n,r,o,i,s,a,A,u){const l=e.blueprint.slice();return l[0]=o,l[2]=140|r,ve(l),l[3]=l[15]=t,l[8]=n,l[10]=s||t&&t[10],l[11]=a||t&&t[11],l[12]=A||t&&t[12]||null,l[9]=u||t&&t[9]||null,l[6]=i,l[16]=2==e.type?t[16]:l,l}function Er(t,e,n,r,o,i){const s=n+20,a=t.data[s]||function(t,e,n,r,o,i){const s=Pe(),a=Ne(),A=a?s:s&&s.parent,u=t.data[n]=eo(0,A&&A!==e?A:null,r,n,o,i);return null===t.firstChild&&(t.firstChild=u),s&&(!a||null!=s.child||null===u.parent&&2!==s.type?a||(s.next=u):s.child=u),u}(t,e,s,r,o,i);return He(a,!0),a}function Zr(t,e,n){Ve(e,e[6]);try{const r=t.viewQuery;null!==r&&mo(1,r,n);const o=t.template;null!==o&&Yr(t,e,o,1,n),t.firstCreatePass&&(t.firstCreatePass=!1),t.staticContentQueries&&Jr(t,e),t.staticViewQueries&&mo(2,t.viewQuery,n);const i=t.components;null!==i&&function(t,e){for(let n=0;n<e.length;n++)Ro(t,e[n])}(e,i)}catch(r){throw t.firstCreatePass&&(t.incompleteFirstPass=!0),r}finally{e[2]&=-5,$e()}}function zr(t,e,n,r){const o=e[2];if(256==(256&o))return;Ve(e,e[6]);const i=Le();try{ve(e),Ie.lFrame.bindingIndex=t.bindingStartIndex,null!==n&&Yr(t,e,n,2,r);const s=3==(3&o);if(!i)if(s){const n=t.preOrderCheckHooks;null!==n&&on(e,n,null)}else{const n=t.preOrderHooks;null!==n&&sn(e,n,0,null),an(e,0)}if(function(t){for(let e=Pr(t);null!==e;e=Hr(e)){if(!e[2])continue;const t=e[9];for(let e=0;e<t.length;e++){const n=t[e],r=n[3];0==(1024&n[2])&&We(r,1),n[2]|=1024}}}(e),function(t){for(let e=Pr(t);null!==e;e=Hr(e))for(let t=10;t<e.length;t++){const n=e[t],r=n[1];je(n)&&zr(r,n,r.template,n[8])}}(e),null!==t.contentQueries&&Jr(t,e),!i)if(s){const n=t.contentCheckHooks;null!==n&&on(e,n)}else{const n=t.contentHooks;null!==n&&sn(e,n,1),an(e,1)}!function(t,e){try{const n=t.expandoInstructions;if(null!==n){let r=t.expandoStartIndex,o=-1,i=-1;for(let t=0;t<n.length;t++){const s=n[t];"number"==typeof s?s<=0?(i=0-s,en(i),r+=9+n[++t],o=r):r+=s:(null!==s&&(Te(r,o),s(2,e[o])),o++)}}}finally{en(-1)}}(t,e);const a=t.components;null!==a&&function(t,e){for(let n=0;n<e.length;n++)Uo(t,e[n])}(e,a);const A=t.viewQuery;if(null!==A&&mo(2,A,r),!i)if(s){const n=t.viewCheckHooks;null!==n&&on(e,n)}else{const n=t.viewHooks;null!==n&&sn(e,n,2),an(e,2)}!0===t.firstUpdatePass&&(t.firstUpdatePass=!1),i||(e[2]&=-73),1024&e[2]&&(e[2]&=-1025,We(e[3],-1))}finally{$e()}}function Vr(t,e,n,r){const o=e[10],i=!Le(),s=4==(4&e[2]);try{i&&!s&&o.begin&&o.begin(),s&&Zr(t,e,r),zr(t,e,n,r)}finally{i&&!s&&o.end&&o.end()}}function Yr(t,e,n,r,o){const i=tn();try{en(-1),2&r&&e.length>20&&Lr(t,e,0,Le()),n(r,o)}finally{en(i)}}function Xr(t,e,n){if(ge(e)){const r=e.directiveEnd;for(let o=e.directiveStart;o<r;o++){const e=t.data[o];e.contentQueries&&e.contentQueries(1,n[o],o)}}}function qr(t,e,n){De()&&(function(t,e,n,r){const o=n.directiveStart,i=n.directiveEnd;t.firstCreatePass||Cn(n,e),yr(r,e);const s=n.initialInputs;for(let a=o;a<i;a++){const r=t.data[a],i=Ue(r);i&&po(e,n,r);const A=Gn(e,t,a,n);yr(A,e),null!==s&&go(0,a-o,A,r,0,s),i&&(Se(n.index,e)[8]=A)}}(t,e,n,ke(n,e)),128==(128&n.flags)&&function(t,e,n){const r=n.directiveStart,o=n.directiveEnd,i=t.expandoInstructions,s=t.firstCreatePass,a=n.index-20,A=Ie.lFrame.currentDirectiveIndex;try{en(a);for(let n=r;n<o;n++){const r=t.data[n],o=e[n];Ee(n),null!==r.hostBindings||0!==r.hostVars||null!==r.hostAttrs?ao(r,o):s&&i.push(null)}}finally{en(-1),Ee(A)}}(t,e,n))}function _r(t,e,n=ke){const r=e.localNames;if(null!==r){let o=e.index+1;for(let i=0;i<r.length;i+=2){const s=r[i+1],a=-1===s?n(e,t):t[s];t[o++]=a}}}function $r(t){const e=t.tView;return null===e||e.incompleteFirstPass?t.tView=to(1,-1,t.template,t.decls,t.vars,t.directiveDefs,t.pipeDefs,t.viewQuery,t.schemas,t.consts):e}function to(t,e,n,r,o,i,s,a,A,u){const l=20+r,c=l+o,h=function(t,e){const n=[];for(let r=0;r<e;r++)n.push(r<t?null:Or);return n}(l,c);return h[1]={type:t,id:e,blueprint:h,template:n,queries:null,viewQuery:a,node:null,data:h.slice().fill(null,l),bindingStartIndex:l,expandoStartIndex:c,expandoInstructions:null,firstCreatePass:!0,firstUpdatePass:!0,staticViewQueries:!1,staticContentQueries:!1,preOrderHooks:null,preOrderCheckHooks:null,contentHooks:null,contentCheckHooks:null,viewHooks:null,viewCheckHooks:null,destroyHooks:null,cleanup:null,contentQueries:null,components:null,directiveRegistry:"function"==typeof i?i():i,pipeRegistry:"function"==typeof s?s():s,firstChild:null,schemas:A,consts:u,incompleteFirstPass:!1}}function eo(t,e,n,r,o,i){return{type:n,index:r,injectorIndex:e?e.injectorIndex:-1,directiveStart:-1,directiveEnd:-1,directiveStylingLast:-1,propertyBindings:null,flags:0,providerIndexes:0,tagName:o,attrs:i,mergedAttrs:null,localNames:null,initialInputs:void 0,inputs:null,outputs:null,tViews:null,next:null,projectionNext:null,child:null,parent:e,projection:null,styles:null,stylesWithoutHost:null,residualStyles:void 0,classes:null,classesWithoutHost:null,residualClasses:void 0,classBindings:0,styleBindings:0}}function no(t,e,n){for(let r in t)if(t.hasOwnProperty(r)){const o=t[r];(n=null===n?{}:n).hasOwnProperty(r)?n[r].push(e,o):n[r]=[e,o]}return n}function ro(t,e,n,r,o,i,s,a){const A=ke(e,n);let u,l=e.inputs;var c;!a&&null!=l&&(u=l[r])?(Co(t,n,u,r,o),fe(e)&&function(t,e){const n=Se(e,t);16&n[2]||(n[2]|=64)}(n,e.index)):3===e.type&&(r="class"===(c=r)?"className":"for"===c?"htmlFor":"formaction"===c?"formAction":"innerHtml"===c?"innerHTML":"readonly"===c?"readOnly":"tabindex"===c?"tabIndex":c,o=null!=s?s(o,e.tagName||"",r):o,ye(i)?i.setProperty(A,r,o):dn(r)||(A.setProperty?A.setProperty(r,o):A[r]=o))}function oo(t,e,n,r){let o=!1;if(De()){const i=function(t,e,n){const r=t.directiveRegistry;let o=null;if(r)for(let i=0;i<r.length;i++){const s=r[i];Wr(n,s.selectors,!1)&&(o||(o=[]),Wn(Cn(n,e),t,s.type),Ue(s)?(2&n.flags&&wr(n),uo(t,n),o.unshift(s)):o.push(s))}return o}(t,e,n),s=null===r?null:{"":-1};if(null!==i){let r=0;o=!0,co(n,t.data.length,i.length);for(let t=0;t<i.length;t++){const e=i[t];e.providersResolver&&e.providersResolver(e)}Ao(t,n,i.length);let a=!1,A=!1;for(let o=0;o<i.length;o++){const u=i[o];n.mergedAttrs=pn(n.mergedAttrs,u.hostAttrs),ho(t,e,u),lo(t.data.length-1,u,s),null!==u.contentQueries&&(n.flags|=8),null===u.hostBindings&&null===u.hostAttrs&&0===u.hostVars||(n.flags|=128),!a&&(u.onChanges||u.onInit||u.doCheck)&&((t.preOrderHooks||(t.preOrderHooks=[])).push(n.index-20),a=!0),A||!u.onChanges&&!u.doCheck||((t.preOrderCheckHooks||(t.preOrderCheckHooks=[])).push(n.index-20),A=!0),io(t,u),r+=u.hostVars}!function(t,e){const n=e.directiveEnd,r=t.data,o=e.attrs,i=[];let s=null,a=null;for(let A=e.directiveStart;A<n;A++){const t=r[A],n=t.inputs,u=null===o||Sr(e)?null:fo(n,o);i.push(u),s=no(n,A,s),a=no(t.outputs,A,a)}null!==s&&(s.hasOwnProperty("class")&&(e.flags|=16),s.hasOwnProperty("style")&&(e.flags|=32)),e.initialInputs=i,e.inputs=s,e.outputs=a}(t,n),so(t,e,r)}s&&function(t,e,n){if(e){const r=t.localNames=[];for(let t=0;t<e.length;t+=2){const o=n[e[t+1]];if(null==o)throw new Error(`Export of name '${e[t+1]}' not found!`);r.push(e[t],o)}}}(n,r,s)}return n.mergedAttrs=pn(n.mergedAttrs,n.attrs),o}function io(t,e){const n=t.expandoInstructions;n.push(e.hostBindings),0!==e.hostVars&&n.push(e.hostVars)}function so(t,e,n){for(let r=0;r<n;r++)e.push(Or),t.blueprint.push(Or),t.data.push(null)}function ao(t,e){null!==t.hostBindings&&t.hostBindings(1,e)}function Ao(t,e,n){const r=20-e.index,o=t.data.length-(65535&e.providerIndexes);(t.expandoInstructions||(t.expandoInstructions=[])).push(r,o,n)}function uo(t,e){e.flags|=2,(t.components||(t.components=[])).push(e.index)}function lo(t,e,n){if(n){if(e.exportAs)for(let r=0;r<e.exportAs.length;r++)n[e.exportAs[r]]=t;Ue(e)&&(n[""]=t)}}function co(t,e,n){t.flags|=1,t.directiveStart=e,t.directiveEnd=e+n,t.providerIndexes=e}function ho(t,e,n){t.data.push(n);const r=n.factory||(n.factory=ce(n.type)),o=new ln(r,Ue(n),null);t.blueprint.push(o),e.push(o)}function po(t,e,n){const r=ke(e,t),o=$r(n),i=t[10],s=bo(t,Tr(t,o,null,n.onPush?64:16,r,e,i,i.createRenderer(r,n)));t[e.index]=s}function go(t,e,n,r,o,i){const s=i[e];if(null!==s){const t=r.setInput;for(let e=0;e<s.length;){const o=s[e++],i=s[e++],a=s[e++];null!==t?r.setInput(n,a,o,i):n[i]=a}}}function fo(t,e){let n=null,r=0;for(;r<e.length;){const o=e[r];if(0!==o)if(5!==o){if("number"==typeof o)break;t.hasOwnProperty(o)&&(null===n&&(n=[]),n.push(o,t[o],e[r+1])),r+=2}else r+=2;else r+=4}return n}function Fo(t,e,n,r){return new Array(t,!0,!1,e,null,0,r,n,null,null)}function Uo(t,e){const n=Se(e,t);if(je(n)){const t=n[1];80&n[2]?zr(t,n,t.template,n[8]):n[5]>0&&function t(e){for(let r=Pr(e);null!==r;r=Hr(r))for(let e=10;e<r.length;e++){const n=r[e];if(1024&n[2]){const t=n[1];zr(t,n,t.template,n[8])}else n[5]>0&&t(n)}const n=e[1].components;if(null!==n)for(let r=0;r<n.length;r++){const o=Se(n[r],e);je(o)&&o[5]>0&&t(o)}}(n)}}function Ro(t,e){const n=Se(e,t),r=n[1];!function(t,e){for(let n=e.length;n<t.blueprint.length;n++)e.push(t.blueprint[n])}(r,n),Zr(r,n,n[8])}function bo(t,e){return t[13]?t[14][4]=e:t[13]=e,t[14]=e,e}function Ko(t){for(;t;){t[2]|=64;const e=Gr(t);if(Re(t)&&!e)return t;t=e}return null}function yo(t,e,n){const r=e[10];r.begin&&r.begin();try{zr(t,e,t.template,n)}catch(o){throw So(e,o),o}finally{r.end&&r.end()}}function wo(t){!function(t){for(let e=0;e<t.components.length;e++){const n=t.components[e],r=Ce(n),o=r[1];Vr(o,r,o.template,n)}}(t[8])}function mo(t,e,n){Ze(0),e(t,n)}const ko=(()=>Promise.resolve(null))();function xo(t){return t[7]||(t[7]=[])}function So(t,e){const n=t[9],r=n?n.get(Qn,null):null;r&&r.handleError(e)}function Co(t,e,n,r,o){for(let i=0;i<n.length;){const s=n[i++],a=n[i++],A=e[s],u=t.data[s];null!==u.setInput?u.setInput(A,o,r,a):A[a]=o}}function jo(t,e){const n=e[3];return-1===t.index?pe(n)?n:null:n}function Bo(t,e){const n=jo(t,e);return n?Lo(e[11],n[7]):null}function vo(t,e,n,r,o){if(null!=r){let i,s=!1;pe(r)?i=r:de(r)&&(s=!0,r=r[0]);const a=me(r);0===t&&null!==n?null==o?No(e,n,a):Ho(e,n,a,o||null):1===t&&null!==n?Ho(e,n,a,o||null):2===t?function(t,e,n){const r=Lo(t,e);r&&function(t,e,n,r){ye(t)?t.removeChild(e,n,r):e.removeChild(n)}(t,r,e,n)}(e,a,s):3===t&&e.destroyNode(a),null!=i&&function(t,e,n,r,o){const i=n[7];i!==me(n)&&vo(e,t,r,i,o);for(let s=10;s<n.length;s++){const o=n[s];Eo(o[1],o,t,e,r,i)}}(e,t,i,n,o)}}function Wo(t,e,n,r){const o=Bo(t.node,e);o&&Eo(t,e,e[11],n?1:2,o,r)}function Io(t,e){const n=t[9],r=n.indexOf(e);1024&e[2]&&We(e[3],-1),n.splice(r,1)}function Do(t,e){if(t.length<=10)return;const n=10+e,r=t[n];if(r){const o=r[17];null!==o&&o!==t&&Io(o,r),e>0&&(t[n-1][4]=r[4]);const i=qt(t,10+e);Wo(r[1],r,!1,null);const s=i[19];null!==s&&s.detachView(i[1]),r[3]=null,r[4]=null,r[2]&=-129}return r}function Oo(t,e){if(!(256&e[2])){const n=e[11];ye(n)&&n.destroyNode&&Eo(t,e,n,3,null,null),function(t){let e=t[13];if(!e)return Po(t[1],t);for(;e;){let n=null;if(de(e))n=e[13];else{const t=e[10];t&&(n=t)}if(!n){for(;e&&!e[4]&&e!==t;)de(e)&&Po(e[1],e),e=Go(e,t);null===e&&(e=t),de(e)&&Po(e[1],e),n=e&&e[4]}e=n}}(e)}}function Go(t,e){let n;return de(t)&&(n=t[6])&&2===n.type?jo(n,t):t[3]===e?null:t[3]}function Po(t,e){if(!(256&e[2])){e[2]&=-129,e[2]|=256,function(t,e){let n;if(null!=t&&null!=(n=t.destroyHooks))for(let r=0;r<n.length;r+=2){const t=e[n[r]];if(!(t instanceof ln)){const e=n[r+1];if(Array.isArray(e))for(let n=0;n<e.length;n+=2)e[n+1].call(t[e[n]]);else e.call(t)}}}(t,e),function(t,e){const n=t.cleanup;if(null!==n){const t=e[7];for(let r=0;r<n.length-1;r+=2)if("string"==typeof n[r]){const o=n[r+1],i="function"==typeof o?o(e):me(e[o]),s=t[n[r+2]],a=n[r+3];"boolean"==typeof a?i.removeEventListener(n[r],s,a):a>=0?t[a]():t[-a].unsubscribe(),r+=2}else n[r].call(t[n[r+1]]);e[7]=null}}(t,e);const n=e[6];n&&3===n.type&&ye(e[11])&&e[11].destroy();const r=e[17];if(null!==r&&pe(e[3])){r!==e[3]&&Io(r,e);const n=e[19];null!==n&&n.detachView(t)}}}function Ho(t,e,n,r){ye(t)?t.insertBefore(e,n,r):e.insertBefore(n,r,!0)}function No(t,e,n){ye(t)?t.appendChild(e,n):e.appendChild(n)}function Mo(t,e,n,r){null!==r?Ho(t,e,n,r):No(t,e,n)}function Lo(t,e){return ye(t)?t.parentNode(e):e.parentNode}function Jo(t,e,n,r){const o=function(t,e,n){let r=e.parent;for(;null!=r&&(4===r.type||5===r.type);)r=(e=r).parent;if(null==r){const t=n[6];return 2===t.type?Bo(t,n):n[0]}if(e&&5===e.type&&4&e.flags)return ke(e,n).parentNode;if(2&r.flags){const e=t.data,n=e[e[r.index].directiveStart].encapsulation;if(n!==$t.ShadowDom&&n!==$t.Native)return null}return ke(r,n)}(t,r,e);if(null!=o){const t=e[11],i=function(t,e){if(2===t.type){const n=jo(t,e);return null===n?null:Qo(n.indexOf(e,10)-10,n)}return 4===t.type||5===t.type?ke(t,e):null}(r.parent||e[6],e);if(Array.isArray(n))for(let e=0;e<n.length;e++)Mo(t,o,n[e],i);else Mo(t,o,n,i)}}function Qo(t,e){const n=10+t+1;if(n<e.length){const t=e[n],r=t[1].firstChild;if(null!==r)return function t(e,n){if(null!==n){const r=n.type;if(3===r)return ke(n,e);if(0===r)return Qo(-1,e[n.index]);if(4===r||5===r){const r=n.child;if(null!==r)return t(e,r);{const t=e[n.index];return pe(t)?Qo(-1,t):me(t)}}{const r=e[16],o=r[6],i=Gr(r),s=o.projection[n.projection];return null!=s?t(i,s):t(e,n.next)}}return null}(t,r)}return e[7]}function To(t,e,n,r,o,i,s){for(;null!=n;){const a=r[n.index],A=n.type;s&&0===e&&(a&&yr(me(a),r),n.flags|=4),64!=(64&n.flags)&&(4===A||5===A?(To(t,e,n.child,r,o,i,!1),vo(e,t,o,a,i)):1===A?Zo(t,e,r,n,o,i):vo(e,t,o,a,i)),n=s?n.projectionNext:n.next}}function Eo(t,e,n,r,o,i){To(n,r,t.node.child,e,o,i,!1)}function Zo(t,e,n,r,o,i){const s=n[16],a=s[6].projection[r.projection];if(Array.isArray(a))for(let A=0;A<a.length;A++)vo(e,t,o,a[A],i);else To(t,e,a,s[3],o,i,!0)}function zo(t,e,n){ye(t)?t.setAttribute(e,"style",n):e.style.cssText=n}function Vo(t,e,n){ye(t)?""===n?t.removeAttribute(e,"class"):t.setAttribute(e,"class",n):e.className=n}class Yo{constructor(t,e){this._lView=t,this._cdRefInjectingView=e,this._appRef=null,this._viewContainerRef=null}get rootNodes(){const t=this._lView;return null==t[0]?function t(e,n,r,o,i=!1){for(;null!==r;){const s=n[r.index];if(null!==s&&o.push(me(s)),pe(s))for(let e=10;e<s.length;e++){const n=s[e],r=n[1].firstChild;null!==r&&t(n[1],n,r,o)}const a=r.type;if(4===a||5===a)t(e,n,r.child,o);else if(1===a){const e=n[16],i=e[6].projection[r.projection];if(Array.isArray(i))o.push(...i);else{const n=Gr(e);t(n[1],n,i,o,!0)}}r=i?r.projectionNext:r.next}return o}(t[1],t,t[6].child,[]):[]}get context(){return this._lView[8]}get destroyed(){return 256==(256&this._lView[2])}destroy(){if(this._appRef)this._appRef.detachView(this);else if(this._viewContainerRef){const t=this._viewContainerRef.indexOf(this);t>-1&&this._viewContainerRef.detach(t),this._viewContainerRef=null}Oo(this._lView[1],this._lView)}onDestroy(t){!function(t,e,n,r){const o=xo(e);o.push(null),t.firstCreatePass&&function(t){return t.cleanup||(t.cleanup=[])}(t).push(r,o.length-1)}(this._lView[1],this._lView,0,t)}markForCheck(){Ko(this._cdRefInjectingView||this._lView)}detach(){this._lView[2]&=-129}reattach(){this._lView[2]|=128}detectChanges(){yo(this._lView[1],this._lView,this.context)}checkNoChanges(){!function(t,e,n){Je(!0);try{yo(t,e,n)}finally{Je(!1)}}(this._lView[1],this._lView,this.context)}attachToViewContainerRef(t){if(this._appRef)throw new Error("This view is already attached directly to the ApplicationRef!");this._viewContainerRef=t}detachFromAppRef(){var t;this._appRef=null,Eo(this._lView[1],t=this._lView,t[11],2,null,null)}attachToAppRef(t){if(this._viewContainerRef)throw new Error("This view is already attached to a ViewContainer!");this._appRef=t}}class Xo extends Yo{constructor(t){super(t),this._view=t}detectChanges(){wo(this._view)}checkNoChanges(){!function(t){Je(!0);try{wo(t)}finally{Je(!1)}}(this._view)}get context(){return null}}let qo,_o,$o;function ti(t,e,n){return qo||(qo=class extends t{}),new qo(ke(e,n))}let ei=(()=>{class t{}return t.__NG_ELEMENT_ID__=()=>ni(),t})();const ni=function(t=!1){return function(t,e,n){if(!n&&fe(t)){const n=Se(t.index,e);return new Yo(n,n)}return 3===t.type||0===t.type||4===t.type||5===t.type?new Yo(e[16],e):null}(Pe(),Oe(),t)},ri=Function,oi=new It("Set Injector scope."),ii={},si={},ai=[];let Ai=void 0;function ui(){return void 0===Ai&&(Ai=new Zt),Ai}function li(t,e=null,n=null,r){return new ci(t,n,e||ui(),r)}class ci{constructor(t,e,n,r=null){this.parent=n,this.records=new Map,this.injectorDefTypes=new Set,this.onDestroy=new Set,this._destroyed=!1;const o=[];e&&Yt(e,n=>this.processProvider(n,t,e)),Yt([t],t=>this.processInjectorType(t,[],o)),this.records.set(Dt,di(void 0,this));const i=this.records.get(oi);this.scope=null!=i?i.value:null,this.source=r||("object"==typeof t?null:ft(t))}get destroyed(){return this._destroyed}destroy(){this.assertNotDestroyed(),this._destroyed=!0;try{this.onDestroy.forEach(t=>t.ngOnDestroy())}finally{this.records.clear(),this.onDestroy.clear(),this.injectorDefTypes.clear()}}get(t,e=Ot,n=ot.Default){this.assertNotDestroyed();const r=Mt(this);try{if(!(n&ot.SkipSelf)){let e=this.records.get(t);if(void 0===e){const n=("function"==typeof(o=t)||"object"==typeof o&&o instanceof It)&&At(t);e=n&&this.injectableDefInScope(n)?di(hi(t),ii):null,this.records.set(t,e)}if(null!=e)return this.hydrate(t,e)}return(n&ot.Self?ui():this.parent).get(t,e=n&ot.Optional&&e===Ot?null:e)}catch(i){if("NullInjectorError"===i.name){if((i.ngTempTokenPath=i.ngTempTokenPath||[]).unshift(ft(t)),r)throw i;return function(t,e,n,r){const o=t.ngTempTokenPath;throw e.__source&&o.unshift(e.__source),t.message=function(t,e,n,r=null){t=t&&"\n"===t.charAt(0)&&"\u0275"==t.charAt(1)?t.substr(2):t;let o=ft(e);if(Array.isArray(e))o=e.map(ft).join(" -> ");else if("object"==typeof e){let t=[];for(let n in e)if(e.hasOwnProperty(n)){let r=e[n];t.push(n+":"+("string"==typeof r?JSON.stringify(r):ft(r)))}o=`{${t.join(", ")}}`}return`${n}${r?"("+r+")":""}[${o}]: ${t.replace(Gt,"\n  ")}`}("\n"+t.message,o,n,r),t.ngTokenPath=o,t.ngTempTokenPath=null,t}(i,t,"R3InjectorError",this.source)}throw i}finally{Mt(r)}var o}_resolveInjectorDefTypes(){this.injectorDefTypes.forEach(t=>this.get(t))}toString(){const t=[];return this.records.forEach((e,n)=>t.push(ft(n))),`R3Injector[${t.join(", ")}]`}assertNotDestroyed(){if(this._destroyed)throw new Error("Injector has already been destroyed.")}processInjectorType(t,e,n){if(!(t=bt(t)))return!1;let r=lt(t);const o=null==r&&t.ngModule||void 0,i=void 0===o?t:o,s=-1!==n.indexOf(i);if(void 0!==o&&(r=lt(o)),null==r)return!1;if(null!=r.imports&&!s){let t;n.push(i);try{Yt(r.imports,r=>{this.processInjectorType(r,e,n)&&(void 0===t&&(t=[]),t.push(r))})}finally{}if(void 0!==t)for(let e=0;e<t.length;e++){const{ngModule:n,providers:r}=t[e];Yt(r,t=>this.processProvider(t,n,r||ai))}}this.injectorDefTypes.add(i),this.records.set(i,di(r.factory,ii));const a=r.providers;if(null!=a&&!s){const e=t;Yt(a,t=>this.processProvider(t,e,a))}return void 0!==o&&void 0!==t.providers}processProvider(t,e,n){let r=gi(t=bt(t))?t:bt(t&&t.provide);const o=function(t,e,n){return pi(t)?di(void 0,t.useValue):di(function(t,e,n){let r=void 0;if(gi(t)){const e=bt(t);return ce(e)||hi(e)}if(pi(t))r=()=>bt(t.useValue);else if((o=t)&&o.useFactory)r=()=>t.useFactory(...Et(t.deps||[]));else if(function(t){return!(!t||!t.useExisting)}(t))r=()=>Qt(bt(t.useExisting));else{const o=bt(t&&(t.useClass||t.provide));if(o||function(t,e,n){let r="";throw t&&e&&(r=` - only instances of Provider and Type are allowed, got: [${e.map(t=>t==n?"?"+n+"?":"...").join(", ")}]`),new Error(`Invalid provider for the NgModule '${ft(t)}'`+r)}(e,n,t),!function(t){return!!t.deps}(t))return ce(o)||hi(o);r=()=>new o(...Et(t.deps))}var o;return r}(t,e,n),ii)}(t,e,n);if(gi(t)||!0!==t.multi){const t=this.records.get(r);t&&void 0!==t.multi&&mr()}else{let e=this.records.get(r);e?void 0===e.multi&&mr():(e=di(void 0,ii,!0),e.factory=()=>Et(e.multi),this.records.set(r,e)),r=t,e.multi.push(t)}this.records.set(r,o)}hydrate(t,e){var n;return e.value===si?function(t){throw new Error("Cannot instantiate cyclic dependency! "+t)}(ft(t)):e.value===ii&&(e.value=si,e.value=e.factory()),"object"==typeof e.value&&e.value&&null!==(n=e.value)&&"object"==typeof n&&"function"==typeof n.ngOnDestroy&&this.onDestroy.add(e.value),e.value}injectableDefInScope(t){return!!t.providedIn&&("string"==typeof t.providedIn?"any"===t.providedIn||t.providedIn===this.scope:this.injectorDefTypes.has(t.providedIn))}}function hi(t){const e=At(t),n=null!==e?e.factory:ce(t);if(null!==n)return n;const r=lt(t);if(null!==r)return r.factory;if(t instanceof It)throw new Error(`Token ${ft(t)} is missing a \u0275prov definition.`);if(t instanceof Function)return function(t){const e=t.length;if(e>0){const n=function(t,e){const n=[];for(let r=0;r<t;r++)n.push("?");return n}(e);throw new Error(`Can't resolve all parameters for ${ft(t)}: (${n.join(", ")}).`)}const n=function(t){const e=t&&(t[ct]||t[pt]||t[dt]&&t[dt]());if(e){const n=function(t){if(t.hasOwnProperty("name"))return t.name;const e=(""+t).match(/^function\s*([^\s(]+)/);return null===e?"":e[1]}(t);return console.warn(`DEPRECATED: DI is instantiating a token "${n}" that inherits its @Injectable decorator but does not provide one itself.\nThis will become an error in a future version of Angular. Please add @Injectable() to the "${n}" class.`),e}return null}(t);return null!==n?()=>n.factory(t):()=>new t}(t);throw new Error("unreachable")}function di(t,e,n=!1){return{factory:t,value:e,multi:n?[]:void 0}}function pi(t){return null!==t&&"object"==typeof t&&Pt in t}function gi(t){return"function"==typeof t}const fi=function(t,e,n){return function(t,e=null,n=null,r){const o=li(t,e,n,r);return o._resolveInjectorDefTypes(),o}({name:n},e,t,n)};let Fi=(()=>{class t{static create(t,e){return Array.isArray(t)?fi(t,e,""):fi(t.providers,t.parent,t.name||"")}}return t.THROW_IF_NOT_FOUND=Ot,t.NULL=new Zt,t.\u0275prov=st({token:t,providedIn:"any",factory:()=>Qt(Dt)}),t.__NG_ELEMENT_ID__=-1,t})();const Ui=new It("AnalyzeForEntryComponents");function Ri(t,e,n){let r=n?t.styles:null,o=n?t.classes:null,i=0;if(null!==e)for(let s=0;s<e.length;s++){const t=e[s];"number"==typeof t?i=t:1==i?o=Ft(o,t):2==i&&(r=Ft(r,t+": "+e[++s]+";"))}n?t.styles=r:t.stylesWithoutHost=r,n?t.classes=o:t.classesWithoutHost=o}let bi=null;function Ki(){if(!bi){const t=kt.Symbol;if(t&&t.iterator)bi=t.iterator;else{const t=Object.getOwnPropertyNames(Map.prototype);for(let e=0;e<t.length;++e){const n=t[e];"entries"!==n&&"size"!==n&&Map.prototype[n]===Map.prototype.entries&&(bi=n)}}}return bi}function yi(t){return!!wi(t)&&(Array.isArray(t)||!(t instanceof Map)&&Ki()in t)}function wi(t){return null!==t&&("function"==typeof t||"object"==typeof t)}function mi(t,e,n){return!Object.is(t[e],n)&&(t[e]=n,!0)}function ki(t,e,n,r){const o=Oe();return mi(o,Qe(),e)&&(Ge(),function(t,e,n,r,o,i){const s=ke(t,e),a=e[11];if(null==r)ye(a)?a.removeAttribute(s,n,i):s.removeAttribute(n);else{const e=null==o?bn(r):o(r,t.tagName||"",n);ye(a)?a.setAttribute(s,n,e,i):i?s.setAttributeNS(i,n,e):s.setAttribute(n,e)}}(nn(),o,t,e,n,r)),ki}function xi(t,e,n,r,o,i,s,a){const A=Oe(),u=Ge(),l=t+20,c=u.firstCreatePass?function(t,e,n,r,o,i,s,a,A){const u=e.consts,l=Er(e,n[6],t,0,s||null,Be(u,a));oo(e,n,l,Be(u,A)),rn(e,l);const c=l.tViews=to(2,-1,r,o,i,e.directiveRegistry,e.pipeRegistry,null,e.schemas,u),h=eo(0,null,2,-1,null,null);return h.injectorIndex=l.injectorIndex,c.node=h,null!==e.queries&&(e.queries.template(e,l),c.queries=e.queries.embeddedTView(l)),l}(t,u,A,e,n,r,o,i,s):u.data[l];He(c,!1);const h=A[11].createComment("");Jo(u,A,h,c),yr(h,A),bo(A,A[l]=Fo(h,A,h,c)),Fe(c)&&qr(u,A,c),null!=s&&_r(A,c,a)}function Si(t,e=ot.Default){const n=Oe();return null==n?Qt(t,e):In(Pe(),n,bt(t),e)}function Ci(t,e,n){const r=Oe();return mi(r,Qe(),e)&&ro(Ge(),nn(),r,t,e,r[11],n,!1),Ci}function ji(t,e,n,r,o){const i=o?"class":"style";Co(t,n,e.inputs[i],i,r)}function Bi(t,e,n,r){const o=Oe(),i=Ge(),s=20+t,a=o[11],A=o[s]=Qr(e,a,Ie.lFrame.currentNamespace),u=i.firstCreatePass?function(t,e,n,r,o,i,s){const a=e.consts,A=Be(a,i),u=Er(e,n[6],t,3,o,A);return oo(e,n,u,Be(a,s)),null!==u.attrs&&Ri(u,u.attrs,!1),null!==u.mergedAttrs&&Ri(u,u.mergedAttrs,!0),null!==e.queries&&e.queries.elementStart(e,u),u}(t,i,o,0,e,n,r):i.data[s];He(u,!0);const l=u.mergedAttrs;null!==l&&cn(a,A,l);const c=u.classes;null!==c&&Vo(a,A,c);const h=u.styles;null!==h&&zo(a,A,h),Jo(i,o,A,u),0===Ie.lFrame.elementDepthCount&&yr(A,o),Ie.lFrame.elementDepthCount++,Fe(u)&&(qr(i,o,u),Xr(i,u,o)),null!==r&&_r(o,u)}function vi(){let t=Pe();Ne()?Me():(t=t.parent,He(t,!1));const e=t;Ie.lFrame.elementDepthCount--;const n=Ge();n.firstCreatePass&&(rn(n,t),ge(t)&&n.queries.elementEnd(t)),null!=e.classesWithoutHost&&function(t){return 0!=(16&t.flags)}(e)&&ji(n,e,Oe(),e.classesWithoutHost,!0),null!=e.stylesWithoutHost&&function(t){return 0!=(32&t.flags)}(e)&&ji(n,e,Oe(),e.stylesWithoutHost,!1)}function Wi(t,e,n,r){Bi(t,e,n,r),vi()}function Ii(t,e,n){const r=Oe(),o=Ge(),i=t+20,s=o.firstCreatePass?function(t,e,n,r,o){const i=e.consts,s=Be(i,r),a=Er(e,n[6],t,4,"ng-container",s);return null!==s&&Ri(a,s,!0),oo(e,n,a,Be(i,o)),null!==e.queries&&e.queries.elementStart(e,a),a}(t,o,r,e,n):o.data[i];He(s,!0);const a=r[i]=r[11].createComment("");Jo(o,r,a,s),yr(a,r),Fe(s)&&(qr(o,r,s),Xr(o,s,r)),null!=n&&_r(r,s)}function Di(){let t=Pe();const e=Ge();Ne()?Me():(t=t.parent,He(t,!1)),e.firstCreatePass&&(rn(e,t),ge(t)&&e.queries.elementEnd(t))}function Oi(t){return!!t&&"function"==typeof t.then}function Gi(t,e,n=!1,r){const o=Oe(),i=Ge(),s=Pe();return function(t,e,n,r,o,i,s=!1,a){const A=Fe(r),u=t.firstCreatePass&&(t.cleanup||(t.cleanup=[])),l=xo(e);let c=!0;if(3===r.type){const h=ke(r,e),d=a?a(h):te,p=d.target||h,g=l.length,f=a?t=>a(me(t[r.index])).target:r.index;if(ye(n)){let s=null;if(!a&&A&&(s=function(t,e,n,r){const o=t.cleanup;if(null!=o)for(let i=0;i<o.length-1;i+=2){const t=o[i];if(t===n&&o[i+1]===r){const t=e[7],n=o[i+2];return t.length>n?t[n]:null}"string"==typeof t&&(i+=2)}return null}(t,e,o,r.index)),null!==s)(s.__ngLastListenerFn__||s).__ngNextListenerFn__=i,s.__ngLastListenerFn__=i,c=!1;else{i=Hi(r,e,i,!1);const t=n.listen(d.name||p,o,i);l.push(i,t),u&&u.push(o,f,g,g+1)}}else i=Hi(r,e,i,!0),p.addEventListener(o,i,s),l.push(i),u&&u.push(o,f,g,s)}const h=r.outputs;let d;if(c&&null!==h&&(d=h[o])){const t=d.length;if(t)for(let n=0;n<t;n+=2){const t=e[d[n]][d[n+1]].subscribe(i),s=l.length;l.push(i,t),u&&u.push(o,r.index,s,-(s+1))}}}(i,o,o[11],s,t,e,n,r),Gi}function Pi(t,e,n){try{return!1!==e(n)}catch(r){return So(t,r),!1}}function Hi(t,e,n,r){return function o(i){if(i===Function)return n;const s=2&t.flags?Se(t.index,e):e;0==(32&e[2])&&Ko(s);let a=Pi(e,n,i),A=o.__ngNextListenerFn__;for(;A;)a=Pi(e,A,i)&&a,A=A.__ngNextListenerFn__;return r&&!1===a&&(i.preventDefault(),i.returnValue=!1),a}}function Ni(t,e=""){const n=Oe(),r=Ge(),o=t+20,i=r.firstCreatePass?Er(r,n[6],t,3,null,null):r.data[o],s=n[o]=function(t,e){return ye(e)?e.createText(t):e.createTextNode(t)}(e,n[11]);Jo(r,n,s,i),He(i,!1)}function Mi(t){return Li("",t,""),Mi}function Li(t,e,n){const r=Oe(),o=function(t,e,n,r){return mi(t,Qe(),n)?e+bn(n)+r:Or}(r,t,e,n);return o!==Or&&function(t,e,n){const r=function(t,e){return me(e[t+20])}(e,t),o=t[11];ye(o)?o.setValue(r,n):r.textContent=n}(r,tn(),o),Li}function Ji(t,e,n){const r=Oe();return mi(r,Qe(),e)&&ro(Ge(),nn(),r,t,e,r[11],n,!0),Ji}function Qi(t,e){const n=Ce(t)[1],r=n.data.length-1;rn(n,{directiveStart:r,directiveEnd:r+1})}class Ti{constructor(t,e,n){this.previousValue=t,this.currentValue=e,this.firstChange=n}isFirstChange(){return this.firstChange}}function Ei(t){t.type.prototype.ngOnChanges&&(t.setInput=Zi,t.onChanges=function(){const t=zi(this),e=t&&t.current;if(e){const n=t.previous;if(n===te)t.previous=e;else for(let t in e)n[t]=e[t];t.current=null,this.ngOnChanges(e)}})}function Zi(t,e,n,r){const o=zi(t)||function(t,e){return t.__ngSimpleChanges__=e}(t,{previous:te,current:null}),i=o.current||(o.current={}),s=o.previous,a=this.declaredInputs[n],A=s[a];i[a]=new Ti(A&&A.currentValue,e,s===te),t[r]=e}function zi(t){return t.__ngSimpleChanges__||null}Ei.ngInherit=!0;class Vi{}class Yi{resolveComponentFactory(t){throw function(t){const e=Error(`No component factory found for ${ft(t)}. Did you add it to @NgModule.entryComponents?`);return e.ngComponent=t,e}(t)}}let Xi=(()=>{class t{}return t.NULL=new Yi,t})(),qi=(()=>{class t{constructor(t){this.nativeElement=t}}return t.__NG_ELEMENT_ID__=()=>_i(t),t})();const _i=function(t){return ti(t,Pe(),Oe())};class $i{}var ts=function(t){return t[t.Important=1]="Important",t[t.DashCase=2]="DashCase",t}({});let es=(()=>{class t{}return t.__NG_ELEMENT_ID__=()=>ns(),t})();const ns=function(){const t=Oe(),e=Se(Pe().index,t);return function(t){const e=t[11];if(ye(e))return e;throw new Error("Cannot inject Renderer2 when the application uses Renderer3!")}(de(e)?e:t)};let rs=(()=>{class t{}return t.\u0275prov=st({token:t,providedIn:"root",factory:()=>null}),t})();class os{constructor(t){this.full=t,this.major=t.split(".")[0],this.minor=t.split(".")[1],this.patch=t.split(".").slice(2).join(".")}}const is=new os("10.0.4");class ss{constructor(){}supports(t){return yi(t)}create(t){return new As(t)}}const as=(t,e)=>e;class As{constructor(t){this.length=0,this._linkedRecords=null,this._unlinkedRecords=null,this._previousItHead=null,this._itHead=null,this._itTail=null,this._additionsHead=null,this._additionsTail=null,this._movesHead=null,this._movesTail=null,this._removalsHead=null,this._removalsTail=null,this._identityChangesHead=null,this._identityChangesTail=null,this._trackByFn=t||as}forEachItem(t){let e;for(e=this._itHead;null!==e;e=e._next)t(e)}forEachOperation(t){let e=this._itHead,n=this._removalsHead,r=0,o=null;for(;e||n;){const i=!n||e&&e.currentIndex<hs(n,r,o)?e:n,s=hs(i,r,o),a=i.currentIndex;if(i===n)r--,n=n._nextRemoved;else if(e=e._next,null==i.previousIndex)r++;else{o||(o=[]);const t=s-r,e=a-r;if(t!=e){for(let n=0;n<t;n++){const r=n<o.length?o[n]:o[n]=0,i=r+n;e<=i&&i<t&&(o[n]=r+1)}o[i.previousIndex]=e-t}}s!==a&&t(i,s,a)}}forEachPreviousItem(t){let e;for(e=this._previousItHead;null!==e;e=e._nextPrevious)t(e)}forEachAddedItem(t){let e;for(e=this._additionsHead;null!==e;e=e._nextAdded)t(e)}forEachMovedItem(t){let e;for(e=this._movesHead;null!==e;e=e._nextMoved)t(e)}forEachRemovedItem(t){let e;for(e=this._removalsHead;null!==e;e=e._nextRemoved)t(e)}forEachIdentityChange(t){let e;for(e=this._identityChangesHead;null!==e;e=e._nextIdentityChange)t(e)}diff(t){if(null==t&&(t=[]),!yi(t))throw new Error(`Error trying to diff '${ft(t)}'. Only arrays and iterables are allowed`);return this.check(t)?this:null}onDestroy(){}check(t){this._reset();let e,n,r,o=this._itHead,i=!1;if(Array.isArray(t)){this.length=t.length;for(let e=0;e<this.length;e++)n=t[e],r=this._trackByFn(e,n),null!==o&&Object.is(o.trackById,r)?(i&&(o=this._verifyReinsertion(o,n,r,e)),Object.is(o.item,n)||this._addIdentityChange(o,n)):(o=this._mismatch(o,n,r,e),i=!0),o=o._next}else e=0,function(t,e){if(Array.isArray(t))for(let n=0;n<t.length;n++)e(t[n]);else{const n=t[Ki()]();let r;for(;!(r=n.next()).done;)e(r.value)}}(t,t=>{r=this._trackByFn(e,t),null!==o&&Object.is(o.trackById,r)?(i&&(o=this._verifyReinsertion(o,t,r,e)),Object.is(o.item,t)||this._addIdentityChange(o,t)):(o=this._mismatch(o,t,r,e),i=!0),o=o._next,e++}),this.length=e;return this._truncate(o),this.collection=t,this.isDirty}get isDirty(){return null!==this._additionsHead||null!==this._movesHead||null!==this._removalsHead||null!==this._identityChangesHead}_reset(){if(this.isDirty){let t,e;for(t=this._previousItHead=this._itHead;null!==t;t=t._next)t._nextPrevious=t._next;for(t=this._additionsHead;null!==t;t=t._nextAdded)t.previousIndex=t.currentIndex;for(this._additionsHead=this._additionsTail=null,t=this._movesHead;null!==t;t=e)t.previousIndex=t.currentIndex,e=t._nextMoved;this._movesHead=this._movesTail=null,this._removalsHead=this._removalsTail=null,this._identityChangesHead=this._identityChangesTail=null}}_mismatch(t,e,n,r){let o;return null===t?o=this._itTail:(o=t._prev,this._remove(t)),null!==(t=null===this._linkedRecords?null:this._linkedRecords.get(n,r))?(Object.is(t.item,e)||this._addIdentityChange(t,e),this._moveAfter(t,o,r)):null!==(t=null===this._unlinkedRecords?null:this._unlinkedRecords.get(n,null))?(Object.is(t.item,e)||this._addIdentityChange(t,e),this._reinsertAfter(t,o,r)):t=this._addAfter(new us(e,n),o,r),t}_verifyReinsertion(t,e,n,r){let o=null===this._unlinkedRecords?null:this._unlinkedRecords.get(n,null);return null!==o?t=this._reinsertAfter(o,t._prev,r):t.currentIndex!=r&&(t.currentIndex=r,this._addToMoves(t,r)),t}_truncate(t){for(;null!==t;){const e=t._next;this._addToRemovals(this._unlink(t)),t=e}null!==this._unlinkedRecords&&this._unlinkedRecords.clear(),null!==this._additionsTail&&(this._additionsTail._nextAdded=null),null!==this._movesTail&&(this._movesTail._nextMoved=null),null!==this._itTail&&(this._itTail._next=null),null!==this._removalsTail&&(this._removalsTail._nextRemoved=null),null!==this._identityChangesTail&&(this._identityChangesTail._nextIdentityChange=null)}_reinsertAfter(t,e,n){null!==this._unlinkedRecords&&this._unlinkedRecords.remove(t);const r=t._prevRemoved,o=t._nextRemoved;return null===r?this._removalsHead=o:r._nextRemoved=o,null===o?this._removalsTail=r:o._prevRemoved=r,this._insertAfter(t,e,n),this._addToMoves(t,n),t}_moveAfter(t,e,n){return this._unlink(t),this._insertAfter(t,e,n),this._addToMoves(t,n),t}_addAfter(t,e,n){return this._insertAfter(t,e,n),this._additionsTail=null===this._additionsTail?this._additionsHead=t:this._additionsTail._nextAdded=t,t}_insertAfter(t,e,n){const r=null===e?this._itHead:e._next;return t._next=r,t._prev=e,null===r?this._itTail=t:r._prev=t,null===e?this._itHead=t:e._next=t,null===this._linkedRecords&&(this._linkedRecords=new cs),this._linkedRecords.put(t),t.currentIndex=n,t}_remove(t){return this._addToRemovals(this._unlink(t))}_unlink(t){null!==this._linkedRecords&&this._linkedRecords.remove(t);const e=t._prev,n=t._next;return null===e?this._itHead=n:e._next=n,null===n?this._itTail=e:n._prev=e,t}_addToMoves(t,e){return t.previousIndex===e||(this._movesTail=null===this._movesTail?this._movesHead=t:this._movesTail._nextMoved=t),t}_addToRemovals(t){return null===this._unlinkedRecords&&(this._unlinkedRecords=new cs),this._unlinkedRecords.put(t),t.currentIndex=null,t._nextRemoved=null,null===this._removalsTail?(this._removalsTail=this._removalsHead=t,t._prevRemoved=null):(t._prevRemoved=this._removalsTail,this._removalsTail=this._removalsTail._nextRemoved=t),t}_addIdentityChange(t,e){return t.item=e,this._identityChangesTail=null===this._identityChangesTail?this._identityChangesHead=t:this._identityChangesTail._nextIdentityChange=t,t}}class us{constructor(t,e){this.item=t,this.trackById=e,this.currentIndex=null,this.previousIndex=null,this._nextPrevious=null,this._prev=null,this._next=null,this._prevDup=null,this._nextDup=null,this._prevRemoved=null,this._nextRemoved=null,this._nextAdded=null,this._nextMoved=null,this._nextIdentityChange=null}}class ls{constructor(){this._head=null,this._tail=null}add(t){null===this._head?(this._head=this._tail=t,t._nextDup=null,t._prevDup=null):(this._tail._nextDup=t,t._prevDup=this._tail,t._nextDup=null,this._tail=t)}get(t,e){let n;for(n=this._head;null!==n;n=n._nextDup)if((null===e||e<=n.currentIndex)&&Object.is(n.trackById,t))return n;return null}remove(t){const e=t._prevDup,n=t._nextDup;return null===e?this._head=n:e._nextDup=n,null===n?this._tail=e:n._prevDup=e,null===this._head}}class cs{constructor(){this.map=new Map}put(t){const e=t.trackById;let n=this.map.get(e);n||(n=new ls,this.map.set(e,n)),n.add(t)}get(t,e){const n=this.map.get(t);return n?n.get(t,e):null}remove(t){const e=t.trackById;return this.map.get(e).remove(t)&&this.map.delete(e),t}get isEmpty(){return 0===this.map.size}clear(){this.map.clear()}}function hs(t,e,n){const r=t.previousIndex;if(null===r)return r;let o=0;return n&&r<n.length&&(o=n[r]),r+e+o}class ds{constructor(){}supports(t){return t instanceof Map||wi(t)}create(){return new ps}}class ps{constructor(){this._records=new Map,this._mapHead=null,this._appendAfter=null,this._previousMapHead=null,this._changesHead=null,this._changesTail=null,this._additionsHead=null,this._additionsTail=null,this._removalsHead=null,this._removalsTail=null}get isDirty(){return null!==this._additionsHead||null!==this._changesHead||null!==this._removalsHead}forEachItem(t){let e;for(e=this._mapHead;null!==e;e=e._next)t(e)}forEachPreviousItem(t){let e;for(e=this._previousMapHead;null!==e;e=e._nextPrevious)t(e)}forEachChangedItem(t){let e;for(e=this._changesHead;null!==e;e=e._nextChanged)t(e)}forEachAddedItem(t){let e;for(e=this._additionsHead;null!==e;e=e._nextAdded)t(e)}forEachRemovedItem(t){let e;for(e=this._removalsHead;null!==e;e=e._nextRemoved)t(e)}diff(t){if(t){if(!(t instanceof Map||wi(t)))throw new Error(`Error trying to diff '${ft(t)}'. Only maps and objects are allowed`)}else t=new Map;return this.check(t)?this:null}onDestroy(){}check(t){this._reset();let e=this._mapHead;if(this._appendAfter=null,this._forEach(t,(t,n)=>{if(e&&e.key===n)this._maybeAddToChanges(e,t),this._appendAfter=e,e=e._next;else{const r=this._getOrCreateRecordForKey(n,t);e=this._insertBeforeOrAppend(e,r)}}),e){e._prev&&(e._prev._next=null),this._removalsHead=e;for(let t=e;null!==t;t=t._nextRemoved)t===this._mapHead&&(this._mapHead=null),this._records.delete(t.key),t._nextRemoved=t._next,t.previousValue=t.currentValue,t.currentValue=null,t._prev=null,t._next=null}return this._changesTail&&(this._changesTail._nextChanged=null),this._additionsTail&&(this._additionsTail._nextAdded=null),this.isDirty}_insertBeforeOrAppend(t,e){if(t){const n=t._prev;return e._next=t,e._prev=n,t._prev=e,n&&(n._next=e),t===this._mapHead&&(this._mapHead=e),this._appendAfter=t,t}return this._appendAfter?(this._appendAfter._next=e,e._prev=this._appendAfter):this._mapHead=e,this._appendAfter=e,null}_getOrCreateRecordForKey(t,e){if(this._records.has(t)){const n=this._records.get(t);this._maybeAddToChanges(n,e);const r=n._prev,o=n._next;return r&&(r._next=o),o&&(o._prev=r),n._next=null,n._prev=null,n}const n=new gs(t);return this._records.set(t,n),n.currentValue=e,this._addToAdditions(n),n}_reset(){if(this.isDirty){let t;for(this._previousMapHead=this._mapHead,t=this._previousMapHead;null!==t;t=t._next)t._nextPrevious=t._next;for(t=this._changesHead;null!==t;t=t._nextChanged)t.previousValue=t.currentValue;for(t=this._additionsHead;null!=t;t=t._nextAdded)t.previousValue=t.currentValue;this._changesHead=this._changesTail=null,this._additionsHead=this._additionsTail=null,this._removalsHead=null}}_maybeAddToChanges(t,e){Object.is(e,t.currentValue)||(t.previousValue=t.currentValue,t.currentValue=e,this._addToChanges(t))}_addToAdditions(t){null===this._additionsHead?this._additionsHead=this._additionsTail=t:(this._additionsTail._nextAdded=t,this._additionsTail=t)}_addToChanges(t){null===this._changesHead?this._changesHead=this._changesTail=t:(this._changesTail._nextChanged=t,this._changesTail=t)}_forEach(t,e){t instanceof Map?t.forEach(e):Object.keys(t).forEach(n=>e(t[n],n))}}class gs{constructor(t){this.key=t,this.previousValue=null,this.currentValue=null,this._nextPrevious=null,this._next=null,this._prev=null,this._nextAdded=null,this._nextRemoved=null,this._nextChanged=null}}let fs=(()=>{class t{constructor(t){this.factories=t}static create(e,n){if(null!=n){const t=n.factories.slice();e=e.concat(t)}return new t(e)}static extend(e){return{provide:t,useFactory:n=>{if(!n)throw new Error("Cannot extend IterableDiffers without a parent injector");return t.create(e,n)},deps:[[t,new rt,new et]]}}find(t){const e=this.factories.find(e=>e.supports(t));if(null!=e)return e;throw new Error(`Cannot find a differ supporting object '${t}' of type '${n=t,n.name||typeof n}'`);var n}}return t.\u0275prov=st({token:t,providedIn:"root",factory:()=>new t([new ss])}),t})(),Fs=(()=>{class t{constructor(t){this.factories=t}static create(e,n){if(n){const t=n.factories.slice();e=e.concat(t)}return new t(e)}static extend(e){return{provide:t,useFactory:n=>{if(!n)throw new Error("Cannot extend KeyValueDiffers without a parent injector");return t.create(e,n)},deps:[[t,new rt,new et]]}}find(t){const e=this.factories.find(e=>e.supports(t));if(e)return e;throw new Error(`Cannot find a differ supporting object '${t}'`)}}return t.\u0275prov=st({token:t,providedIn:"root",factory:()=>new t([new ds])}),t})();const Us=[new ds],Rs=new fs([new ss]),bs=new Fs(Us);let Ks=(()=>{class t{}return t.__NG_ELEMENT_ID__=()=>ys(t,qi),t})();const ys=function(t,e){return function(t,e,n,r){return _o||(_o=class extends t{constructor(t,e,n){super(),this._declarationView=t,this._declarationTContainer=e,this.elementRef=n}createEmbeddedView(t){const e=this._declarationTContainer.tViews,n=Tr(this._declarationView,e,t,16,null,e.node);n[17]=this._declarationView[this._declarationTContainer.index];const r=this._declarationView[19];return null!==r&&(n[19]=r.createEmbeddedView(e)),Zr(e,n,t),new Yo(n)}}),0===n.type?new _o(r,n,ti(e,n,r)):null}(t,e,Pe(),Oe())};let ws=(()=>{class t{}return t.__NG_ELEMENT_ID__=()=>ms(t,qi),t})();const ms=function(t,e){return function(t,e,n,r){let o;$o||($o=class extends t{constructor(t,e,n){super(),this._lContainer=t,this._hostTNode=e,this._hostView=n}get element(){return ti(e,this._hostTNode,this._hostView)}get injector(){return new Nn(this._hostTNode,this._hostView)}get parentInjector(){const t=vn(this._hostTNode,this._hostView),e=Rn(t,this._hostView),n=function(t,e,n){if(n.parent&&-1!==n.parent.injectorIndex){const t=n.parent.injectorIndex;let e=n.parent;for(;null!=e.parent&&t==e.parent.injectorIndex;)e=e.parent;return e}let r=Un(t),o=e,i=e[6];for(;r>1;)o=o[15],i=o[6],r--;return i}(t,this._hostView,this._hostTNode);return fn(t)&&null!=n?new Nn(n,e):new Nn(null,this._hostView)}clear(){for(;this.length>0;)this.remove(this.length-1)}get(t){return null!==this._lContainer[8]&&this._lContainer[8][t]||null}get length(){return this._lContainer.length-10}createEmbeddedView(t,e,n){const r=t.createEmbeddedView(e||{});return this.insert(r,n),r}createComponent(t,e,n,r,o){const i=n||this.parentInjector;if(!o&&null==t.ngModule&&i){const t=i.get(zt,null);t&&(o=t)}const s=t.create(i,r,void 0,o);return this.insert(s.hostView,e),s}insert(t,e){const n=t._lView,r=n[1];if(t.destroyed)throw new Error("Cannot insert a destroyed View in a ViewContainer!");if(this.allocateContainerIfNeeded(),pe(n[3])){const e=this.indexOf(t);if(-1!==e)this.detach(e);else{const e=n[3],r=new $o(e,e[6],e[3]);r.detach(r.indexOf(t))}}const o=this._adjustIndex(e);return function(t,e,n,r){const o=10+r,i=n.length;r>0&&(n[o-1][4]=e),r<i-10?(e[4]=n[o],Xt(n,10+r,e)):(n.push(e),e[4]=null),e[3]=n;const s=e[17];null!==s&&n!==s&&function(t,e){const n=t[9];e[16]!==e[3][3][16]&&(t[2]=!0),null===n?t[9]=[e]:n.push(e)}(s,e);const a=e[19];null!==a&&a.insertView(t),e[2]|=128}(r,n,this._lContainer,o),Wo(r,n,!0,Qo(o,this._lContainer)),t.attachToViewContainerRef(this),Xt(this._lContainer[8],o,t),t}move(t,e){if(t.destroyed)throw new Error("Cannot move a destroyed View in a ViewContainer!");return this.insert(t,e)}indexOf(t){const e=this._lContainer[8];return null!==e?e.indexOf(t):-1}remove(t){this.allocateContainerIfNeeded();const e=this._adjustIndex(t,-1);!function(t,e){const n=Do(t,e);n&&Oo(n[1],n)}(this._lContainer,e),qt(this._lContainer[8],e)}detach(t){this.allocateContainerIfNeeded();const e=this._adjustIndex(t,-1),n=Do(this._lContainer,e);return n&&null!=qt(this._lContainer[8],e)?new Yo(n):null}_adjustIndex(t,e=0){return null==t?this.length+e:t}allocateContainerIfNeeded(){null===this._lContainer[8]&&(this._lContainer[8]=[])}});const i=r[n.index];if(pe(i))o=i;else{let t;if(4===n.type)t=me(i);else if(t=r[11].createComment(""),Re(r)){const e=r[11],o=ke(n,r);Ho(e,Lo(e,o),t,function(t,e){return ye(t)?t.nextSibling(e):e.nextSibling}(e,o))}else Jo(r[1],r,t,n);r[n.index]=o=Fo(i,r,t,n),bo(r,o)}return new $o(o,n,r)}(t,e,Pe(),Oe())},ks={};class xs extends Xi{constructor(t){super(),this.ngModule=t}resolveComponentFactory(t){const e=le(t);return new js(e,this.ngModule)}}function Ss(t){const e=[];for(let n in t)t.hasOwnProperty(n)&&e.push({propName:t[n],templateName:n});return e}const Cs=new It("SCHEDULER_TOKEN",{providedIn:"root",factory:()=>yn});class js extends Vi{constructor(t,e){super(),this.componentDef=t,this.ngModule=e,this.componentType=t.type,this.selector=t.selectors.map(Dr).join(","),this.ngContentSelectors=t.ngContentSelectors?t.ngContentSelectors:[],this.isBoundToModule=!!e}get inputs(){return Ss(this.componentDef.inputs)}get outputs(){return Ss(this.componentDef.outputs)}create(t,e,n,r){const o=(r=r||this.ngModule)?function(t,e){return{get:(n,r,o)=>{const i=t.get(n,ks,o);return i!==ks||r===ks?i:e.get(n,r,o)}}}(t,r.injector):t,i=o.get($i,we),s=o.get(rs,null),a=i.createRenderer(null,this.componentDef),A=this.componentDef.selectors[0][0]||"div",u=n?function(t,e,n){if(ye(t))return t.selectRootElement(e,n===$t.ShadowDom);let r="string"==typeof e?t.querySelector(e):e;return r.textContent="",r}(a,n,this.componentDef.encapsulation):Qr(A,i.createRenderer(null,this.componentDef),function(t){const e=t.toLowerCase();return"svg"===e?"http://www.w3.org/2000/svg":"math"===e?"http://www.w3.org/1998/MathML/":null}(A)),l=this.componentDef.onPush?576:528,c={components:[],scheduler:yn,clean:ko,playerHandler:null,flags:0},h=to(0,-1,null,1,0,null,null,null,null,null),d=Tr(null,h,c,l,null,null,i,a,s,o);let p,g;Ve(d,null);try{const t=function(t,e,n,r,o,i){const s=n[1];n[20]=t;const a=Er(s,null,0,3,null,null),A=a.mergedAttrs=e.hostAttrs;null!==A&&(Ri(a,A,!0),null!==t&&(cn(o,t,A),null!==a.classes&&Vo(o,t,a.classes),null!==a.styles&&zo(o,t,a.styles)));const u=r.createRenderer(t,e),l=Tr(n,$r(e),null,e.onPush?64:16,n[20],a,r,u,void 0);return s.firstCreatePass&&(Wn(Cn(a,n),s,e.type),uo(s,a),co(a,n.length,1)),bo(n,l),n[20]=l}(u,this.componentDef,d,i,a);if(u)if(n)cn(a,u,["ng-version",is.full]);else{const{attrs:t,classes:e}=function(t){const e=[],n=[];let r=1,o=2;for(;r<t.length;){let i=t[r];if("string"==typeof i)2===o?""!==i&&e.push(i,t[++r]):8===o&&n.push(i);else{if(!Br(o))break;o=i}r++}return{attrs:e,classes:n}}(this.componentDef.selectors[0]);t&&cn(a,u,t),e&&e.length>0&&Vo(a,u,e.join(" "))}if(g=xe(h,0),void 0!==e){const t=g.projection=[];for(let n=0;n<this.ngContentSelectors.length;n++){const r=e[n];t.push(null!=r?Array.from(r):null)}}p=function(t,e,n,r,o){const i=n[1],s=function(t,e,n){const r=Pe();t.firstCreatePass&&(n.providersResolver&&n.providersResolver(n),Ao(t,r,1),ho(t,e,n));const o=Gn(e,t,e.length-1,r);yr(o,e);const i=ke(r,e);return i&&yr(i,e),o}(i,n,e);r.components.push(s),t[8]=s,o&&o.forEach(t=>t(s,e)),e.contentQueries&&e.contentQueries(1,s,n.length-1);const a=Pe();if(i.firstCreatePass&&(null!==e.hostBindings||null!==e.hostAttrs)){en(a.index-20);const t=n[1];io(t,e),so(t,n,e.hostVars),ao(e,s)}return s}(t,this.componentDef,d,c,[Qi]),Zr(h,d,null)}finally{$e()}const f=new Bs(this.componentType,p,ti(qi,g,d),d,g);return h.node.child=g,f}}class Bs extends class{}{constructor(t,e,n,r,o){super(),this.location=n,this._rootLView=r,this._tNode=o,this.destroyCbs=[],this.instance=e,this.hostView=this.changeDetectorRef=new Xo(r),function(t,e,n,r){let o=t.node;null==o&&(t.node=o=eo(0,null,2,-1,null,null)),r[6]=o}(r[1],0,0,r),this.componentType=t}get injector(){return new Nn(this._tNode,this._rootLView)}destroy(){this.destroyCbs&&(this.destroyCbs.forEach(t=>t()),this.destroyCbs=null,!this.hostView.destroyed&&this.hostView.destroy())}onDestroy(t){this.destroyCbs&&this.destroyCbs.push(t)}}const vs=void 0;var Ws=["en",[["a","p"],["AM","PM"],vs],[["AM","PM"],vs,vs],[["S","M","T","W","T","F","S"],["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],["Su","Mo","Tu","We","Th","Fr","Sa"]],vs,[["J","F","M","A","M","J","J","A","S","O","N","D"],["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],["January","February","March","April","May","June","July","August","September","October","November","December"]],vs,[["B","A"],["BC","AD"],["Before Christ","Anno Domini"]],0,[6,0],["M/d/yy","MMM d, y","MMMM d, y","EEEE, MMMM d, y"],["h:mm a","h:mm:ss a","h:mm:ss a z","h:mm:ss a zzzz"],["{1}, {0}",vs,"{1} 'at' {0}",vs],[".",",",";","%","+","-","E","\xd7","\u2030","\u221e","NaN",":"],["#,##0.###","#,##0%","\xa4#,##0.00","#E0"],"USD","$","US Dollar",{},"ltr",function(t){let e=Math.floor(Math.abs(t)),n=t.toString().replace(/^[^.]*\.?/,"").length;return 1===e&&0===n?1:5}];let Is={};function Ds(t){return t in Is||(Is[t]=kt.ng&&kt.ng.common&&kt.ng.common.locales&&kt.ng.common.locales[t]),Is[t]}var Os=function(t){return t[t.LocaleId=0]="LocaleId",t[t.DayPeriodsFormat=1]="DayPeriodsFormat",t[t.DayPeriodsStandalone=2]="DayPeriodsStandalone",t[t.DaysFormat=3]="DaysFormat",t[t.DaysStandalone=4]="DaysStandalone",t[t.MonthsFormat=5]="MonthsFormat",t[t.MonthsStandalone=6]="MonthsStandalone",t[t.Eras=7]="Eras",t[t.FirstDayOfWeek=8]="FirstDayOfWeek",t[t.WeekendRange=9]="WeekendRange",t[t.DateFormat=10]="DateFormat",t[t.TimeFormat=11]="TimeFormat",t[t.DateTimeFormat=12]="DateTimeFormat",t[t.NumberSymbols=13]="NumberSymbols",t[t.NumberFormats=14]="NumberFormats",t[t.CurrencyCode=15]="CurrencyCode",t[t.CurrencySymbol=16]="CurrencySymbol",t[t.CurrencyName=17]="CurrencyName",t[t.Currencies=18]="Currencies",t[t.Directionality=19]="Directionality",t[t.PluralCase=20]="PluralCase",t[t.ExtraData=21]="ExtraData",t}({});let Gs="en-US";function Ps(t){var e,n;n="Expected localeId to be defined",null==(e=t)&&function(t,e,n,r){throw new Error("ASSERTION ERROR: "+t+` [Expected=> null != ${e} <=Actual]`)}(n,e),"string"==typeof t&&(Gs=t.toLowerCase().replace(/_/g,"-"))}const Hs=new Map;class Ns extends zt{constructor(t,e){super(),this._parent=e,this._bootstrapComponents=[],this.injector=this,this.destroyCbs=[],this.componentFactoryResolver=new xs(this);const n=he(t),r=t[Bt]||null;r&&Ps(r),this._bootstrapComponents=mn(n.bootstrap),this._r3Injector=li(t,e,[{provide:zt,useValue:this},{provide:Xi,useValue:this.componentFactoryResolver}],ft(t)),this._r3Injector._resolveInjectorDefTypes(),this.instance=this.get(t)}get(t,e=Fi.THROW_IF_NOT_FOUND,n=ot.Default){return t===Fi||t===zt||t===Dt?this:this._r3Injector.get(t,e,n)}destroy(){const t=this._r3Injector;!t.destroyed&&t.destroy(),this.destroyCbs.forEach(t=>t()),this.destroyCbs=null}onDestroy(t){this.destroyCbs.push(t)}}class Ms extends Vt{constructor(t){super(),this.moduleType=t,null!==he(t)&&function t(e){if(null!==e.\u0275mod.id){const t=e.\u0275mod.id;(function(t,e,n){if(e&&e!==n)throw new Error(`Duplicate module registered for ${t} - ${ft(e)} vs ${ft(e.name)}`)})(t,Hs.get(t),e),Hs.set(t,e)}let n=e.\u0275mod.imports;n instanceof Function&&(n=n()),n&&n.forEach(e=>t(e))}(t)}create(t){return new Ns(this.moduleType,t)}}const Ls=class extends w{constructor(t=!1){super(),this.__isAsync=t}emit(t){super.next(t)}subscribe(t,e,n){let r,o=t=>null,i=()=>null;t&&"object"==typeof t?(r=this.__isAsync?e=>{setTimeout(()=>t.next(e))}:e=>{t.next(e)},t.error&&(o=this.__isAsync?e=>{setTimeout(()=>t.error(e))}:e=>{t.error(e)}),t.complete&&(i=this.__isAsync?()=>{setTimeout(()=>t.complete())}:()=>{t.complete()})):(r=this.__isAsync?e=>{setTimeout(()=>t(e))}:e=>{t(e)},e&&(o=this.__isAsync?t=>{setTimeout(()=>e(t))}:t=>{e(t)}),n&&(i=this.__isAsync?()=>{setTimeout(()=>n())}:()=>{n()}));const s=super.subscribe(r,o,i);return t instanceof c&&t.add(s),s}},Js=new It("Application Initializer");let Qs=(()=>{class t{constructor(t){this.appInits=t,this.initialized=!1,this.done=!1,this.donePromise=new Promise((t,e)=>{this.resolve=t,this.reject=e})}runInitializers(){if(this.initialized)return;const t=[],e=()=>{this.done=!0,this.resolve()};if(this.appInits)for(let n=0;n<this.appInits.length;n++){const e=this.appInits[n]();Oi(e)&&t.push(e)}Promise.all(t).then(()=>{e()}).catch(t=>{this.reject(t)}),0===t.length&&e(),this.initialized=!0}}return t.\u0275fac=function(e){return new(e||t)(Qt(Js,8))},t.\u0275prov=st({token:t,factory:t.\u0275fac}),t})();const Ts=new It("AppId"),Es={provide:Ts,useFactory:function(){return`${Zs()}${Zs()}${Zs()}`},deps:[]};function Zs(){return String.fromCharCode(97+Math.floor(25*Math.random()))}const zs=new It("Platform Initializer"),Vs=new It("Platform ID"),Ys=new It("appBootstrapListener");let Xs=(()=>{class t{log(t){console.log(t)}warn(t){console.warn(t)}}return t.\u0275fac=function(e){return new(e||t)},t.\u0275prov=st({token:t,factory:t.\u0275fac}),t})();const qs=new It("LocaleId"),_s=new It("DefaultCurrencyCode");class $s{constructor(t,e){this.ngModuleFactory=t,this.componentFactories=e}}const ta=function(t){return new Ms(t)},ea=ta,na=function(t){return Promise.resolve(ta(t))},ra=function(t){const e=ta(t),n=mn(he(t).declarations).reduce((t,e)=>{const n=le(e);return n&&t.push(new js(n)),t},[]);return new $s(e,n)},oa=ra,ia=function(t){return Promise.resolve(ra(t))};let sa=(()=>{class t{constructor(){this.compileModuleSync=ea,this.compileModuleAsync=na,this.compileModuleAndAllComponentsSync=oa,this.compileModuleAndAllComponentsAsync=ia}clearCache(){}clearCacheFor(t){}getModuleId(t){}}return t.\u0275fac=function(e){return new(e||t)},t.\u0275prov=st({token:t,factory:t.\u0275fac}),t})();const aa=(()=>Promise.resolve(0))();function Aa(t){"undefined"==typeof Zone?aa.then(()=>{t&&t.apply(null,null)}):Zone.current.scheduleMicroTask("scheduleMicrotask",t)}class ua{constructor({enableLongStackTrace:t=!1,shouldCoalesceEventChangeDetection:e=!1}){if(this.hasPendingMacrotasks=!1,this.hasPendingMicrotasks=!1,this.isStable=!0,this.onUnstable=new Ls(!1),this.onMicrotaskEmpty=new Ls(!1),this.onStable=new Ls(!1),this.onError=new Ls(!1),"undefined"==typeof Zone)throw new Error("In this configuration Angular requires Zone.js");Zone.assertZonePatched(),this._nesting=0,this._outer=this._inner=Zone.current,Zone.wtfZoneSpec&&(this._inner=this._inner.fork(Zone.wtfZoneSpec)),Zone.TaskTrackingZoneSpec&&(this._inner=this._inner.fork(new Zone.TaskTrackingZoneSpec)),t&&Zone.longStackTraceZoneSpec&&(this._inner=this._inner.fork(Zone.longStackTraceZoneSpec)),this.shouldCoalesceEventChangeDetection=e,this.lastRequestAnimationFrameId=-1,this.nativeRequestAnimationFrame=function(){let t=kt.requestAnimationFrame,e=kt.cancelAnimationFrame;if("undefined"!=typeof Zone&&t&&e){const n=t[Zone.__symbol__("OriginalDelegate")];n&&(t=n);const r=e[Zone.__symbol__("OriginalDelegate")];r&&(e=r)}return{nativeRequestAnimationFrame:t,nativeCancelAnimationFrame:e}}().nativeRequestAnimationFrame,function(t){const e=!!t.shouldCoalesceEventChangeDetection&&t.nativeRequestAnimationFrame&&(()=>{!function(t){-1===t.lastRequestAnimationFrameId&&(t.lastRequestAnimationFrameId=t.nativeRequestAnimationFrame.call(kt,()=>{t.fakeTopEventTask||(t.fakeTopEventTask=Zone.root.scheduleEventTask("fakeTopEventTask",()=>{t.lastRequestAnimationFrameId=-1,da(t),ha(t)},void 0,()=>{},()=>{})),t.fakeTopEventTask.invoke()}),da(t))}(t)});t._inner=t._inner.fork({name:"angular",properties:{isAngularZone:!0,maybeDelayChangeDetection:e},onInvokeTask:(n,r,o,i,s,a)=>{try{return pa(t),n.invokeTask(o,i,s,a)}finally{e&&"eventTask"===i.type&&e(),ga(t)}},onInvoke:(e,n,r,o,i,s,a)=>{try{return pa(t),e.invoke(r,o,i,s,a)}finally{ga(t)}},onHasTask:(e,n,r,o)=>{e.hasTask(r,o),n===r&&("microTask"==o.change?(t._hasPendingMicrotasks=o.microTask,da(t),ha(t)):"macroTask"==o.change&&(t.hasPendingMacrotasks=o.macroTask))},onHandleError:(e,n,r,o)=>(e.handleError(r,o),t.runOutsideAngular(()=>t.onError.emit(o)),!1)})}(this)}static isInAngularZone(){return!0===Zone.current.get("isAngularZone")}static assertInAngularZone(){if(!ua.isInAngularZone())throw new Error("Expected to be in Angular Zone, but it is not!")}static assertNotInAngularZone(){if(ua.isInAngularZone())throw new Error("Expected to not be in Angular Zone, but it is!")}run(t,e,n){return this._inner.run(t,e,n)}runTask(t,e,n,r){const o=this._inner,i=o.scheduleEventTask("NgZoneEvent: "+r,t,ca,la,la);try{return o.runTask(i,e,n)}finally{o.cancelTask(i)}}runGuarded(t,e,n){return this._inner.runGuarded(t,e,n)}runOutsideAngular(t){return this._outer.run(t)}}function la(){}const ca={};function ha(t){if(0==t._nesting&&!t.hasPendingMicrotasks&&!t.isStable)try{t._nesting++,t.onMicrotaskEmpty.emit(null)}finally{if(t._nesting--,!t.hasPendingMicrotasks)try{t.runOutsideAngular(()=>t.onStable.emit(null))}finally{t.isStable=!0}}}function da(t){t.hasPendingMicrotasks=!!(t._hasPendingMicrotasks||t.shouldCoalesceEventChangeDetection&&-1!==t.lastRequestAnimationFrameId)}function pa(t){t._nesting++,t.isStable&&(t.isStable=!1,t.onUnstable.emit(null))}function ga(t){t._nesting--,ha(t)}class fa{constructor(){this.hasPendingMicrotasks=!1,this.hasPendingMacrotasks=!1,this.isStable=!0,this.onUnstable=new Ls,this.onMicrotaskEmpty=new Ls,this.onStable=new Ls,this.onError=new Ls}run(t,e,n){return t.apply(e,n)}runGuarded(t,e,n){return t.apply(e,n)}runOutsideAngular(t){return t()}runTask(t,e,n,r){return t.apply(e,n)}}let Fa=(()=>{class t{constructor(t){this._ngZone=t,this._pendingCount=0,this._isZoneStable=!0,this._didWork=!1,this._callbacks=[],this.taskTrackingZone=null,this._watchAngularEvents(),t.run(()=>{this.taskTrackingZone="undefined"==typeof Zone?null:Zone.current.get("TaskTrackingZone")})}_watchAngularEvents(){this._ngZone.onUnstable.subscribe({next:()=>{this._didWork=!0,this._isZoneStable=!1}}),this._ngZone.runOutsideAngular(()=>{this._ngZone.onStable.subscribe({next:()=>{ua.assertNotInAngularZone(),Aa(()=>{this._isZoneStable=!0,this._runCallbacksIfReady()})}})})}increasePendingRequestCount(){return this._pendingCount+=1,this._didWork=!0,this._pendingCount}decreasePendingRequestCount(){if(this._pendingCount-=1,this._pendingCount<0)throw new Error("pending async requests below zero");return this._runCallbacksIfReady(),this._pendingCount}isStable(){return this._isZoneStable&&0===this._pendingCount&&!this._ngZone.hasPendingMacrotasks}_runCallbacksIfReady(){if(this.isStable())Aa(()=>{for(;0!==this._callbacks.length;){let t=this._callbacks.pop();clearTimeout(t.timeoutId),t.doneCb(this._didWork)}this._didWork=!1});else{let t=this.getPendingTasks();this._callbacks=this._callbacks.filter(e=>!e.updateCb||!e.updateCb(t)||(clearTimeout(e.timeoutId),!1)),this._didWork=!0}}getPendingTasks(){return this.taskTrackingZone?this.taskTrackingZone.macroTasks.map(t=>({source:t.source,creationLocation:t.creationLocation,data:t.data})):[]}addCallback(t,e,n){let r=-1;e&&e>0&&(r=setTimeout(()=>{this._callbacks=this._callbacks.filter(t=>t.timeoutId!==r),t(this._didWork,this.getPendingTasks())},e)),this._callbacks.push({doneCb:t,timeoutId:r,updateCb:n})}whenStable(t,e,n){if(n&&!this.taskTrackingZone)throw new Error('Task tracking zone is required when passing an update callback to whenStable(). Is "zone.js/dist/task-tracking.js" loaded?');this.addCallback(t,e,n),this._runCallbacksIfReady()}getPendingRequestCount(){return this._pendingCount}findProviders(t,e,n){return[]}}return t.\u0275fac=function(e){return new(e||t)(Qt(ua))},t.\u0275prov=st({token:t,factory:t.\u0275fac}),t})(),Ua=(()=>{class t{constructor(){this._applications=new Map,Ka.addToWindow(this)}registerApplication(t,e){this._applications.set(t,e)}unregisterApplication(t){this._applications.delete(t)}unregisterAllApplications(){this._applications.clear()}getTestability(t){return this._applications.get(t)||null}getAllTestabilities(){return Array.from(this._applications.values())}getAllRootElements(){return Array.from(this._applications.keys())}findTestabilityInTree(t,e=!0){return Ka.findTestabilityInTree(this,t,e)}}return t.\u0275fac=function(e){return new(e||t)},t.\u0275prov=st({token:t,factory:t.\u0275fac}),t})();class Ra{addToWindow(t){}findTestabilityInTree(t,e,n){return null}}let ba,Ka=new Ra;const ya=new It("AllowMultipleToken");class wa{constructor(t,e){this.name=t,this.token=e}}function ma(t,e,n=[]){const r="Platform: "+e,o=new It(r);return(e=[])=>{let i=ka();if(!i||i.injector.get(ya,!1))if(t)t(n.concat(e).concat({provide:o,useValue:!0}));else{const t=n.concat(e).concat({provide:o,useValue:!0},{provide:oi,useValue:"platform"});!function(t){if(ba&&!ba.destroyed&&!ba.injector.get(ya,!1))throw new Error("There can be only one platform. Destroy the previous one to create a new one.");ba=t.get(xa);const e=t.get(zs,null);e&&e.forEach(t=>t())}(Fi.create({providers:t,name:r}))}return function(t){const e=ka();if(!e)throw new Error("No platform exists!");if(!e.injector.get(t,null))throw new Error("A platform with a different configuration has been created. Please destroy it first.");return e}(o)}}function ka(){return ba&&!ba.destroyed?ba:null}let xa=(()=>{class t{constructor(t){this._injector=t,this._modules=[],this._destroyListeners=[],this._destroyed=!1}bootstrapModuleFactory(t,e){const n=function(t,e){let n;return n="noop"===t?new fa:("zone.js"===t?void 0:t)||new ua({enableLongStackTrace:Yn(),shouldCoalesceEventChangeDetection:e}),n}(e?e.ngZone:void 0,e&&e.ngZoneEventCoalescing||!1),r=[{provide:ua,useValue:n}];return n.run(()=>{const e=Fi.create({providers:r,parent:this.injector,name:t.moduleType.name}),o=t.create(e),i=o.injector.get(Qn,null);if(!i)throw new Error("No ErrorHandler. Is platform module (BrowserModule) included?");return o.onDestroy(()=>ja(this._modules,o)),n.runOutsideAngular(()=>n.onError.subscribe({next:t=>{i.handleError(t)}})),function(t,e,n){try{const r=n();return Oi(r)?r.catch(n=>{throw e.runOutsideAngular(()=>t.handleError(n)),n}):r}catch(r){throw e.runOutsideAngular(()=>t.handleError(r)),r}}(i,n,()=>{const t=o.injector.get(Qs);return t.runInitializers(),t.donePromise.then(()=>(Ps(o.injector.get(qs,"en-US")||"en-US"),this._moduleDoBootstrap(o),o))})})}bootstrapModule(t,e=[]){const n=Sa({},e);return function(t,e,n){const r=new Ms(n);return Promise.resolve(r)}(0,0,t).then(t=>this.bootstrapModuleFactory(t,n))}_moduleDoBootstrap(t){const e=t.injector.get(Ca);if(t._bootstrapComponents.length>0)t._bootstrapComponents.forEach(t=>e.bootstrap(t));else{if(!t.instance.ngDoBootstrap)throw new Error(`The module ${ft(t.instance.constructor)} was bootstrapped, but it does not declare "@NgModule.bootstrap" components nor a "ngDoBootstrap" method. Please define one of these.`);t.instance.ngDoBootstrap(e)}this._modules.push(t)}onDestroy(t){this._destroyListeners.push(t)}get injector(){return this._injector}destroy(){if(this._destroyed)throw new Error("The platform has already been destroyed!");this._modules.slice().forEach(t=>t.destroy()),this._destroyListeners.forEach(t=>t()),this._destroyed=!0}get destroyed(){return this._destroyed}}return t.\u0275fac=function(e){return new(e||t)(Qt(Fi))},t.\u0275prov=st({token:t,factory:t.\u0275fac}),t})();function Sa(t,e){return Array.isArray(e)?e.reduce(Sa,t):Object.assign(Object.assign({},t),e)}let Ca=(()=>{class t{constructor(t,e,n,r,o,i){this._zone=t,this._console=e,this._injector=n,this._exceptionHandler=r,this._componentFactoryResolver=o,this._initStatus=i,this._bootstrapListeners=[],this._views=[],this._runningTick=!1,this._enforceNoNewChanges=!1,this._stable=!0,this.componentTypes=[],this.components=[],this._enforceNoNewChanges=Yn(),this._zone.onMicrotaskEmpty.subscribe({next:()=>{this._zone.run(()=>{this.tick()})}});const s=new U(t=>{this._stable=this._zone.isStable&&!this._zone.hasPendingMacrotasks&&!this._zone.hasPendingMicrotasks,this._zone.runOutsideAngular(()=>{t.next(this._stable),t.complete()})}),a=new U(t=>{let e;this._zone.runOutsideAngular(()=>{e=this._zone.onStable.subscribe(()=>{ua.assertNotInAngularZone(),Aa(()=>{this._stable||this._zone.hasPendingMacrotasks||this._zone.hasPendingMicrotasks||(this._stable=!0,t.next(!0))})})});const n=this._zone.onUnstable.subscribe(()=>{ua.assertInAngularZone(),this._stable&&(this._stable=!1,this._zone.runOutsideAngular(()=>{t.next(!1)}))});return()=>{e.unsubscribe(),n.unsubscribe()}});this.isStable=function(...t){let e=Number.POSITIVE_INFINITY,n=null,r=t[t.length-1];return k(r)?(n=t.pop(),t.length>1&&"number"==typeof t[t.length-1]&&(e=t.pop())):"number"==typeof r&&(e=t.pop()),null===n&&1===t.length&&t[0]instanceof U?t[0]:Q(e)(T(t,n))}(s,a.pipe(t=>{return E()((e=q,function(t){let n;n="function"==typeof e?e:function(){return e};const r=Object.create(t,Y);return r.source=t,r.subjectFactory=n,r})(t));var e}))}bootstrap(t,e){if(!this._initStatus.done)throw new Error("Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.");let n;n=t instanceof Vi?t:this._componentFactoryResolver.resolveComponentFactory(t),this.componentTypes.push(n.componentType);const r=n.isBoundToModule?void 0:this._injector.get(zt),o=n.create(Fi.NULL,[],e||n.selector,r);o.onDestroy(()=>{this._unloadComponent(o)});const i=o.injector.get(Fa,null);return i&&o.injector.get(Ua).registerApplication(o.location.nativeElement,i),this._loadComponent(o),Yn()&&this._console.log("Angular is running in development mode. Call enableProdMode() to enable production mode."),o}tick(){if(this._runningTick)throw new Error("ApplicationRef.tick is called recursively");try{this._runningTick=!0;for(let t of this._views)t.detectChanges();if(this._enforceNoNewChanges)for(let t of this._views)t.checkNoChanges()}catch(t){this._zone.runOutsideAngular(()=>this._exceptionHandler.handleError(t))}finally{this._runningTick=!1}}attachView(t){const e=t;this._views.push(e),e.attachToAppRef(this)}detachView(t){const e=t;ja(this._views,e),e.detachFromAppRef()}_loadComponent(t){this.attachView(t.hostView),this.tick(),this.components.push(t),this._injector.get(Ys,[]).concat(this._bootstrapListeners).forEach(e=>e(t))}_unloadComponent(t){this.detachView(t.hostView),ja(this.components,t)}ngOnDestroy(){this._views.slice().forEach(t=>t.destroy())}get viewCount(){return this._views.length}}return t.\u0275fac=function(e){return new(e||t)(Qt(ua),Qt(Xs),Qt(Fi),Qt(Qn),Qt(Xi),Qt(Qs))},t.\u0275prov=st({token:t,factory:t.\u0275fac}),t})();function ja(t,e){const n=t.indexOf(e);n>-1&&t.splice(n,1)}class Ba{}class va{}const Wa={factoryPathPrefix:"",factoryPathSuffix:".ngfactory"};let Ia=(()=>{class t{constructor(t,e){this._compiler=t,this._config=e||Wa}load(t){return this.loadAndCompile(t)}loadAndCompile(t){let[e,r]=t.split("#");return void 0===r&&(r="default"),n("zn8P")(e).then(t=>t[r]).then(t=>Da(t,e,r)).then(t=>this._compiler.compileModuleAsync(t))}loadFactory(t){let[e,r]=t.split("#"),o="NgFactory";return void 0===r&&(r="default",o=""),n("zn8P")(this._config.factoryPathPrefix+e+this._config.factoryPathSuffix).then(t=>t[r+o]).then(t=>Da(t,e,r))}}return t.\u0275fac=function(e){return new(e||t)(Qt(sa),Qt(va,8))},t.\u0275prov=st({token:t,factory:t.\u0275fac}),t})();function Da(t,e,n){if(!t)throw new Error(`Cannot find '${n}' in '${e}'`);return t}const Oa=ma(null,"core",[{provide:Vs,useValue:"unknown"},{provide:xa,deps:[Fi]},{provide:Ua,deps:[]},{provide:Xs,deps:[]}]),Ga=[{provide:Ca,useClass:Ca,deps:[ua,Xs,Fi,Qn,Xi,Qs]},{provide:Cs,deps:[ua],useFactory:function(t){let e=[];return t.onStable.subscribe(()=>{for(;e.length;)e.pop()()}),function(t){e.push(t)}}},{provide:Qs,useClass:Qs,deps:[[new et,Js]]},{provide:sa,useClass:sa,deps:[]},Es,{provide:fs,useFactory:function(){return Rs},deps:[]},{provide:Fs,useFactory:function(){return bs},deps:[]},{provide:qs,useFactory:function(t){return Ps(t=t||"undefined"!=typeof $localize&&$localize.locale||"en-US"),t},deps:[[new tt(qs),new et,new rt]]},{provide:_s,useValue:"USD"}];let Pa=(()=>{class t{constructor(t){}}return t.\u0275mod=ae({type:t}),t.\u0275inj=at({factory:function(e){return new(e||t)(Qt(Ca))},providers:Ga}),t})();function Ha(...t){let e=t[t.length-1];return k(e)?(t.pop(),H(t,e)):T(t)}function Na(t,e){return M(t,e,1)}function Ma(t,e){return function(n){return n.lift(new La(t,e))}}class La{constructor(t,e){this.predicate=t,this.thisArg=e}call(t,e){return e.subscribe(new Ja(t,this.predicate,this.thisArg))}}class Ja extends p{constructor(t,e,n){super(t),this.predicate=e,this.thisArg=n,this.count=0}_next(t){let e;try{e=this.predicate.call(this.thisArg,t,this.count++)}catch(n){return void this.destination.error(n)}e&&this.destination.next(t)}}let Qa=null;function Ta(){return Qa}const Ea=new It("DocumentToken");let Za=(()=>{class t{}return t.\u0275fac=function(e){return new(e||t)},t.\u0275prov=st({factory:za,token:t,providedIn:"platform"}),t})();function za(){return Qt(Ya)}const Va=new It("Location Initialized");let Ya=(()=>{class t extends Za{constructor(t){super(),this._doc=t,this._init()}_init(){this.location=Ta().getLocation(),this._history=Ta().getHistory()}getBaseHrefFromDOM(){return Ta().getBaseHref(this._doc)}onPopState(t){Ta().getGlobalEventTarget(this._doc,"window").addEventListener("popstate",t,!1)}onHashChange(t){Ta().getGlobalEventTarget(this._doc,"window").addEventListener("hashchange",t,!1)}get href(){return this.location.href}get protocol(){return this.location.protocol}get hostname(){return this.location.hostname}get port(){return this.location.port}get pathname(){return this.location.pathname}get search(){return this.location.search}get hash(){return this.location.hash}set pathname(t){this.location.pathname=t}pushState(t,e,n){Xa()?this._history.pushState(t,e,n):this.location.hash=n}replaceState(t,e,n){Xa()?this._history.replaceState(t,e,n):this.location.hash=n}forward(){this._history.forward()}back(){this._history.back()}getState(){return this._history.state}}return t.\u0275fac=function(e){return new(e||t)(Qt(Ea))},t.\u0275prov=st({factory:qa,token:t,providedIn:"platform"}),t})();function Xa(){return!!window.history.pushState}function qa(){return new Ya(Qt(Ea))}function _a(t,e){if(0==t.length)return e;if(0==e.length)return t;let n=0;return t.endsWith("/")&&n++,e.startsWith("/")&&n++,2==n?t+e.substring(1):1==n?t+e:t+"/"+e}function $a(t){const e=t.match(/#|\?|$/),n=e&&e.index||t.length;return t.slice(0,n-("/"===t[n-1]?1:0))+t.slice(n)}function tA(t){return t&&"?"!==t[0]?"?"+t:t}let eA=(()=>{class t{}return t.\u0275fac=function(e){return new(e||t)},t.\u0275prov=st({factory:nA,token:t,providedIn:"root"}),t})();function nA(t){const e=Qt(Ea).location;return new oA(Qt(Za),e&&e.origin||"")}const rA=new It("appBaseHref");let oA=(()=>{class t extends eA{constructor(t,e){if(super(),this._platformLocation=t,null==e&&(e=this._platformLocation.getBaseHrefFromDOM()),null==e)throw new Error("No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document.");this._baseHref=e}onPopState(t){this._platformLocation.onPopState(t),this._platformLocation.onHashChange(t)}getBaseHref(){return this._baseHref}prepareExternalUrl(t){return _a(this._baseHref,t)}path(t=!1){const e=this._platformLocation.pathname+tA(this._platformLocation.search),n=this._platformLocation.hash;return n&&t?`${e}${n}`:e}pushState(t,e,n,r){const o=this.prepareExternalUrl(n+tA(r));this._platformLocation.pushState(t,e,o)}replaceState(t,e,n,r){const o=this.prepareExternalUrl(n+tA(r));this._platformLocation.replaceState(t,e,o)}forward(){this._platformLocation.forward()}back(){this._platformLocation.back()}}return t.\u0275fac=function(e){return new(e||t)(Qt(Za),Qt(rA,8))},t.\u0275prov=st({token:t,factory:t.\u0275fac}),t})(),iA=(()=>{class t extends eA{constructor(t,e){super(),this._platformLocation=t,this._baseHref="",null!=e&&(this._baseHref=e)}onPopState(t){this._platformLocation.onPopState(t),this._platformLocation.onHashChange(t)}getBaseHref(){return this._baseHref}path(t=!1){let e=this._platformLocation.hash;return null==e&&(e="#"),e.length>0?e.substring(1):e}prepareExternalUrl(t){const e=_a(this._baseHref,t);return e.length>0?"#"+e:e}pushState(t,e,n,r){let o=this.prepareExternalUrl(n+tA(r));0==o.length&&(o=this._platformLocation.pathname),this._platformLocation.pushState(t,e,o)}replaceState(t,e,n,r){let o=this.prepareExternalUrl(n+tA(r));0==o.length&&(o=this._platformLocation.pathname),this._platformLocation.replaceState(t,e,o)}forward(){this._platformLocation.forward()}back(){this._platformLocation.back()}}return t.\u0275fac=function(e){return new(e||t)(Qt(Za),Qt(rA,8))},t.\u0275prov=st({token:t,factory:t.\u0275fac}),t})(),sA=(()=>{class t{constructor(t,e){this._subject=new Ls,this._urlChangeListeners=[],this._platformStrategy=t;const n=this._platformStrategy.getBaseHref();this._platformLocation=e,this._baseHref=$a(AA(n)),this._platformStrategy.onPopState(t=>{this._subject.emit({url:this.path(!0),pop:!0,state:t.state,type:t.type})})}path(t=!1){return this.normalize(this._platformStrategy.path(t))}getState(){return this._platformLocation.getState()}isCurrentPathEqualTo(t,e=""){return this.path()==this.normalize(t+tA(e))}normalize(e){return t.stripTrailingSlash(function(t,e){return t&&e.startsWith(t)?e.substring(t.length):e}(this._baseHref,AA(e)))}prepareExternalUrl(t){return t&&"/"!==t[0]&&(t="/"+t),this._platformStrategy.prepareExternalUrl(t)}go(t,e="",n=null){this._platformStrategy.pushState(n,"",t,e),this._notifyUrlChangeListeners(this.prepareExternalUrl(t+tA(e)),n)}replaceState(t,e="",n=null){this._platformStrategy.replaceState(n,"",t,e),this._notifyUrlChangeListeners(this.prepareExternalUrl(t+tA(e)),n)}forward(){this._platformStrategy.forward()}back(){this._platformStrategy.back()}onUrlChange(t){this._urlChangeListeners.push(t),this._urlChangeSubscription||(this._urlChangeSubscription=this.subscribe(t=>{this._notifyUrlChangeListeners(t.url,t.state)}))}_notifyUrlChangeListeners(t="",e){this._urlChangeListeners.forEach(n=>n(t,e))}subscribe(t,e,n){return this._subject.subscribe({next:t,error:e,complete:n})}}return t.\u0275fac=function(e){return new(e||t)(Qt(eA),Qt(Za))},t.normalizeQueryParams=tA,t.joinWithSlash=_a,t.stripTrailingSlash=$a,t.\u0275prov=st({factory:aA,token:t,providedIn:"root"}),t})();function aA(){return new sA(Qt(eA),Qt(Za))}function AA(t){return t.replace(/\/index.html$/,"")}var uA=function(t){return t[t.Zero=0]="Zero",t[t.One=1]="One",t[t.Two=2]="Two",t[t.Few=3]="Few",t[t.Many=4]="Many",t[t.Other=5]="Other",t}({});class lA{}let cA=(()=>{class t extends lA{constructor(t){super(),this.locale=t}getPluralCategory(t,e){switch(function(t){return function(t){const e=function(t){return t.toLowerCase().replace(/_/g,"-")}(t);let n=Ds(e);if(n)return n;const r=e.split("-")[0];if(n=Ds(r),n)return n;if("en"===r)return Ws;throw new Error(`Missing locale data for the locale "${t}".`)}(t)[Os.PluralCase]}(e||this.locale)(t)){case uA.Zero:return"zero";case uA.One:return"one";case uA.Two:return"two";case uA.Few:return"few";case uA.Many:return"many";default:return"other"}}}return t.\u0275fac=function(e){return new(e||t)(Qt(qs))},t.\u0275prov=st({token:t,factory:t.\u0275fac}),t})();function hA(t,e){e=encodeURIComponent(e);for(const n of t.split(";")){const t=n.indexOf("="),[r,o]=-1==t?[n,""]:[n.slice(0,t),n.slice(t+1)];if(r.trim()===e)return decodeURIComponent(o)}return null}let dA=(()=>{class t{constructor(t,e,n,r){this._iterableDiffers=t,this._keyValueDiffers=e,this._ngEl=n,this._renderer=r,this._iterableDiffer=null,this._keyValueDiffer=null,this._initialClasses=[],this._rawClass=null}set klass(t){this._removeClasses(this._initialClasses),this._initialClasses="string"==typeof t?t.split(/\s+/):[],this._applyClasses(this._initialClasses),this._applyClasses(this._rawClass)}set ngClass(t){this._removeClasses(this._rawClass),this._applyClasses(this._initialClasses),this._iterableDiffer=null,this._keyValueDiffer=null,this._rawClass="string"==typeof t?t.split(/\s+/):t,this._rawClass&&(yi(this._rawClass)?this._iterableDiffer=this._iterableDiffers.find(this._rawClass).create():this._keyValueDiffer=this._keyValueDiffers.find(this._rawClass).create())}ngDoCheck(){if(this._iterableDiffer){const t=this._iterableDiffer.diff(this._rawClass);t&&this._applyIterableChanges(t)}else if(this._keyValueDiffer){const t=this._keyValueDiffer.diff(this._rawClass);t&&this._applyKeyValueChanges(t)}}_applyKeyValueChanges(t){t.forEachAddedItem(t=>this._toggleClass(t.key,t.currentValue)),t.forEachChangedItem(t=>this._toggleClass(t.key,t.currentValue)),t.forEachRemovedItem(t=>{t.previousValue&&this._toggleClass(t.key,!1)})}_applyIterableChanges(t){t.forEachAddedItem(t=>{if("string"!=typeof t.item)throw new Error("NgClass can only toggle CSS classes expressed as strings, got "+ft(t.item));this._toggleClass(t.item,!0)}),t.forEachRemovedItem(t=>this._toggleClass(t.item,!1))}_applyClasses(t){t&&(Array.isArray(t)||t instanceof Set?t.forEach(t=>this._toggleClass(t,!0)):Object.keys(t).forEach(e=>this._toggleClass(e,!!t[e])))}_removeClasses(t){t&&(Array.isArray(t)||t instanceof Set?t.forEach(t=>this._toggleClass(t,!1)):Object.keys(t).forEach(t=>this._toggleClass(t,!1)))}_toggleClass(t,e){(t=t.trim())&&t.split(/\s+/g).forEach(t=>{e?this._renderer.addClass(this._ngEl.nativeElement,t):this._renderer.removeClass(this._ngEl.nativeElement,t)})}}return t.\u0275fac=function(e){return new(e||t)(Si(fs),Si(Fs),Si(qi),Si(es))},t.\u0275dir=ue({type:t,selectors:[["","ngClass",""]],inputs:{klass:["class","klass"],ngClass:"ngClass"}}),t})();class pA{constructor(t,e,n,r){this.$implicit=t,this.ngForOf=e,this.index=n,this.count=r}get first(){return 0===this.index}get last(){return this.index===this.count-1}get even(){return this.index%2==0}get odd(){return!this.even}}let gA=(()=>{class t{constructor(t,e,n){this._viewContainer=t,this._template=e,this._differs=n,this._ngForOf=null,this._ngForOfDirty=!0,this._differ=null}set ngForOf(t){this._ngForOf=t,this._ngForOfDirty=!0}set ngForTrackBy(t){Yn()&&null!=t&&"function"!=typeof t&&console&&console.warn&&console.warn(`trackBy must be a function, but received ${JSON.stringify(t)}. See https://angular.io/api/common/NgForOf#change-propagation for more information.`),this._trackByFn=t}get ngForTrackBy(){return this._trackByFn}set ngForTemplate(t){t&&(this._template=t)}ngDoCheck(){if(this._ngForOfDirty){this._ngForOfDirty=!1;const n=this._ngForOf;if(!this._differ&&n)try{this._differ=this._differs.find(n).create(this.ngForTrackBy)}catch(e){throw new Error(`Cannot find a differ supporting object '${n}' of type '${t=n,t.name||typeof t}'. NgFor only supports binding to Iterables such as Arrays.`)}}var t;if(this._differ){const t=this._differ.diff(this._ngForOf);t&&this._applyChanges(t)}}_applyChanges(t){const e=[];t.forEachOperation((t,n,r)=>{if(null==t.previousIndex){const n=this._viewContainer.createEmbeddedView(this._template,new pA(null,this._ngForOf,-1,-1),null===r?void 0:r),o=new fA(t,n);e.push(o)}else if(null==r)this._viewContainer.remove(null===n?void 0:n);else if(null!==n){const o=this._viewContainer.get(n);this._viewContainer.move(o,r);const i=new fA(t,o);e.push(i)}});for(let n=0;n<e.length;n++)this._perViewChange(e[n].view,e[n].record);for(let n=0,r=this._viewContainer.length;n<r;n++){const t=this._viewContainer.get(n);t.context.index=n,t.context.count=r,t.context.ngForOf=this._ngForOf}t.forEachIdentityChange(t=>{this._viewContainer.get(t.currentIndex).context.$implicit=t.item})}_perViewChange(t,e){t.context.$implicit=e.item}static ngTemplateContextGuard(t,e){return!0}}return t.\u0275fac=function(e){return new(e||t)(Si(ws),Si(Ks),Si(fs))},t.\u0275dir=ue({type:t,selectors:[["","ngFor","","ngForOf",""]],inputs:{ngForOf:"ngForOf",ngForTrackBy:"ngForTrackBy",ngForTemplate:"ngForTemplate"}}),t})();class fA{constructor(t,e){this.record=t,this.view=e}}let FA=(()=>{class t{}return t.\u0275mod=ae({type:t}),t.\u0275inj=at({factory:function(e){return new(e||t)},providers:[{provide:lA,useClass:cA}]}),t})(),UA=(()=>{class t{}return t.\u0275prov=st({token:t,providedIn:"root",factory:()=>new RA(Qt(Ea),window,Qt(Qn))}),t})();class RA{constructor(t,e,n){this.document=t,this.window=e,this.errorHandler=n,this.offset=()=>[0,0]}setOffset(t){this.offset=Array.isArray(t)?()=>t:t}getScrollPosition(){return this.supportScrollRestoration()?[this.window.scrollX,this.window.scrollY]:[0,0]}scrollToPosition(t){this.supportScrollRestoration()&&this.window.scrollTo(t[0],t[1])}scrollToAnchor(t){if(this.supportScrollRestoration()){t=this.window.CSS&&this.window.CSS.escape?this.window.CSS.escape(t):t.replace(/(\"|\'\ |:|\.|\[|\]|,|=)/g,"\\$1");try{const e=this.document.querySelector("#"+t);if(e)return void this.scrollToElement(e);const n=this.document.querySelector(`[name='${t}']`);if(n)return void this.scrollToElement(n)}catch(e){this.errorHandler.handleError(e)}}}setHistoryScrollRestoration(t){if(this.supportScrollRestoration()){const e=this.window.history;e&&e.scrollRestoration&&(e.scrollRestoration=t)}}scrollToElement(t){const e=t.getBoundingClientRect(),n=e.left+this.window.pageXOffset,r=e.top+this.window.pageYOffset,o=this.offset();this.window.scrollTo(n-o[0],r-o[1])}supportScrollRestoration(){try{return!!this.window&&!!this.window.scrollTo}catch(t){return!1}}}class bA{}class KA{}class yA{constructor(t){this.normalizedNames=new Map,this.lazyUpdate=null,t?this.lazyInit="string"==typeof t?()=>{this.headers=new Map,t.split("\n").forEach(t=>{const e=t.indexOf(":");if(e>0){const n=t.slice(0,e),r=n.toLowerCase(),o=t.slice(e+1).trim();this.maybeSetNormalizedName(n,r),this.headers.has(r)?this.headers.get(r).push(o):this.headers.set(r,[o])}})}:()=>{this.headers=new Map,Object.keys(t).forEach(e=>{let n=t[e];const r=e.toLowerCase();"string"==typeof n&&(n=[n]),n.length>0&&(this.headers.set(r,n),this.maybeSetNormalizedName(e,r))})}:this.headers=new Map}has(t){return this.init(),this.headers.has(t.toLowerCase())}get(t){this.init();const e=this.headers.get(t.toLowerCase());return e&&e.length>0?e[0]:null}keys(){return this.init(),Array.from(this.normalizedNames.values())}getAll(t){return this.init(),this.headers.get(t.toLowerCase())||null}append(t,e){return this.clone({name:t,value:e,op:"a"})}set(t,e){return this.clone({name:t,value:e,op:"s"})}delete(t,e){return this.clone({name:t,value:e,op:"d"})}maybeSetNormalizedName(t,e){this.normalizedNames.has(e)||this.normalizedNames.set(e,t)}init(){this.lazyInit&&(this.lazyInit instanceof yA?this.copyFrom(this.lazyInit):this.lazyInit(),this.lazyInit=null,this.lazyUpdate&&(this.lazyUpdate.forEach(t=>this.applyUpdate(t)),this.lazyUpdate=null))}copyFrom(t){t.init(),Array.from(t.headers.keys()).forEach(e=>{this.headers.set(e,t.headers.get(e)),this.normalizedNames.set(e,t.normalizedNames.get(e))})}clone(t){const e=new yA;return e.lazyInit=this.lazyInit&&this.lazyInit instanceof yA?this.lazyInit:this,e.lazyUpdate=(this.lazyUpdate||[]).concat([t]),e}applyUpdate(t){const e=t.name.toLowerCase();switch(t.op){case"a":case"s":let n=t.value;if("string"==typeof n&&(n=[n]),0===n.length)return;this.maybeSetNormalizedName(t.name,e);const r=("a"===t.op?this.headers.get(e):void 0)||[];r.push(...n),this.headers.set(e,r);break;case"d":const o=t.value;if(o){let t=this.headers.get(e);if(!t)return;t=t.filter(t=>-1===o.indexOf(t)),0===t.length?(this.headers.delete(e),this.normalizedNames.delete(e)):this.headers.set(e,t)}else this.headers.delete(e),this.normalizedNames.delete(e)}}forEach(t){this.init(),Array.from(this.normalizedNames.keys()).forEach(e=>t(this.normalizedNames.get(e),this.headers.get(e)))}}class wA{encodeKey(t){return mA(t)}encodeValue(t){return mA(t)}decodeKey(t){return decodeURIComponent(t)}decodeValue(t){return decodeURIComponent(t)}}function mA(t){return encodeURIComponent(t).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/gi,"$").replace(/%2C/gi,",").replace(/%3B/gi,";").replace(/%2B/gi,"+").replace(/%3D/gi,"=").replace(/%3F/gi,"?").replace(/%2F/gi,"/")}class kA{constructor(t={}){if(this.updates=null,this.cloneFrom=null,this.encoder=t.encoder||new wA,t.fromString){if(t.fromObject)throw new Error("Cannot specify both fromString and fromObject.");this.map=function(t,e){const n=new Map;return t.length>0&&t.split("&").forEach(t=>{const r=t.indexOf("="),[o,i]=-1==r?[e.decodeKey(t),""]:[e.decodeKey(t.slice(0,r)),e.decodeValue(t.slice(r+1))],s=n.get(o)||[];s.push(i),n.set(o,s)}),n}(t.fromString,this.encoder)}else t.fromObject?(this.map=new Map,Object.keys(t.fromObject).forEach(e=>{const n=t.fromObject[e];this.map.set(e,Array.isArray(n)?n:[n])})):this.map=null}has(t){return this.init(),this.map.has(t)}get(t){this.init();const e=this.map.get(t);return e?e[0]:null}getAll(t){return this.init(),this.map.get(t)||null}keys(){return this.init(),Array.from(this.map.keys())}append(t,e){return this.clone({param:t,value:e,op:"a"})}set(t,e){return this.clone({param:t,value:e,op:"s"})}delete(t,e){return this.clone({param:t,value:e,op:"d"})}toString(){return this.init(),this.keys().map(t=>{const e=this.encoder.encodeKey(t);return this.map.get(t).map(t=>e+"="+this.encoder.encodeValue(t)).join("&")}).filter(t=>""!==t).join("&")}clone(t){const e=new kA({encoder:this.encoder});return e.cloneFrom=this.cloneFrom||this,e.updates=(this.updates||[]).concat([t]),e}init(){null===this.map&&(this.map=new Map),null!==this.cloneFrom&&(this.cloneFrom.init(),this.cloneFrom.keys().forEach(t=>this.map.set(t,this.cloneFrom.map.get(t))),this.updates.forEach(t=>{switch(t.op){case"a":case"s":const e=("a"===t.op?this.map.get(t.param):void 0)||[];e.push(t.value),this.map.set(t.param,e);break;case"d":if(void 0===t.value){this.map.delete(t.param);break}{let e=this.map.get(t.param)||[];const n=e.indexOf(t.value);-1!==n&&e.splice(n,1),e.length>0?this.map.set(t.param,e):this.map.delete(t.param)}}}),this.cloneFrom=this.updates=null)}}function xA(t){return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer}function SA(t){return"undefined"!=typeof Blob&&t instanceof Blob}function CA(t){return"undefined"!=typeof FormData&&t instanceof FormData}class jA{constructor(t,e,n,r){let o;if(this.url=e,this.body=null,this.reportProgress=!1,this.withCredentials=!1,this.responseType="json",this.method=t.toUpperCase(),function(t){switch(t){case"DELETE":case"GET":case"HEAD":case"OPTIONS":case"JSONP":return!1;default:return!0}}(this.method)||r?(this.body=void 0!==n?n:null,o=r):o=n,o&&(this.reportProgress=!!o.reportProgress,this.withCredentials=!!o.withCredentials,o.responseType&&(this.responseType=o.responseType),o.headers&&(this.headers=o.headers),o.params&&(this.params=o.params)),this.headers||(this.headers=new yA),this.params){const t=this.params.toString();if(0===t.length)this.urlWithParams=e;else{const n=e.indexOf("?");this.urlWithParams=e+(-1===n?"?":n<e.length-1?"&":"")+t}}else this.params=new kA,this.urlWithParams=e}serializeBody(){return null===this.body?null:xA(this.body)||SA(this.body)||CA(this.body)||"string"==typeof this.body?this.body:this.body instanceof kA?this.body.toString():"object"==typeof this.body||"boolean"==typeof this.body||Array.isArray(this.body)?JSON.stringify(this.body):this.body.toString()}detectContentTypeHeader(){return null===this.body||CA(this.body)?null:SA(this.body)?this.body.type||null:xA(this.body)?null:"string"==typeof this.body?"text/plain":this.body instanceof kA?"application/x-www-form-urlencoded;charset=UTF-8":"object"==typeof this.body||"number"==typeof this.body||Array.isArray(this.body)?"application/json":null}clone(t={}){const e=t.method||this.method,n=t.url||this.url,r=t.responseType||this.responseType,o=void 0!==t.body?t.body:this.body,i=void 0!==t.withCredentials?t.withCredentials:this.withCredentials,s=void 0!==t.reportProgress?t.reportProgress:this.reportProgress;let a=t.headers||this.headers,A=t.params||this.params;return void 0!==t.setHeaders&&(a=Object.keys(t.setHeaders).reduce((e,n)=>e.set(n,t.setHeaders[n]),a)),t.setParams&&(A=Object.keys(t.setParams).reduce((e,n)=>e.set(n,t.setParams[n]),A)),new jA(e,n,o,{params:A,headers:a,reportProgress:s,responseType:r,withCredentials:i})}}var BA=function(t){return t[t.Sent=0]="Sent",t[t.UploadProgress=1]="UploadProgress",t[t.ResponseHeader=2]="ResponseHeader",t[t.DownloadProgress=3]="DownloadProgress",t[t.Response=4]="Response",t[t.User=5]="User",t}({});class vA{constructor(t,e=200,n="OK"){this.headers=t.headers||new yA,this.status=void 0!==t.status?t.status:e,this.statusText=t.statusText||n,this.url=t.url||null,this.ok=this.status>=200&&this.status<300}}class WA extends vA{constructor(t={}){super(t),this.type=BA.ResponseHeader}clone(t={}){return new WA({headers:t.headers||this.headers,status:void 0!==t.status?t.status:this.status,statusText:t.statusText||this.statusText,url:t.url||this.url||void 0})}}class IA extends vA{constructor(t={}){super(t),this.type=BA.Response,this.body=void 0!==t.body?t.body:null}clone(t={}){return new IA({body:void 0!==t.body?t.body:this.body,headers:t.headers||this.headers,status:void 0!==t.status?t.status:this.status,statusText:t.statusText||this.statusText,url:t.url||this.url||void 0})}}class DA extends vA{constructor(t){super(t,0,"Unknown Error"),this.name="HttpErrorResponse",this.ok=!1,this.message=this.status>=200&&this.status<300?"Http failure during parsing for "+(t.url||"(unknown url)"):`Http failure response for ${t.url||"(unknown url)"}: ${t.status} ${t.statusText}`,this.error=t.error||null}}function OA(t,e){return{body:e,headers:t.headers,observe:t.observe,params:t.params,reportProgress:t.reportProgress,responseType:t.responseType,withCredentials:t.withCredentials}}let GA=(()=>{class t{constructor(t){this.handler=t}request(t,e,n={}){let r;if(t instanceof jA)r=t;else{let o=void 0;o=n.headers instanceof yA?n.headers:new yA(n.headers);let i=void 0;n.params&&(i=n.params instanceof kA?n.params:new kA({fromObject:n.params})),r=new jA(t,e,void 0!==n.body?n.body:null,{headers:o,params:i,reportProgress:n.reportProgress,responseType:n.responseType||"json",withCredentials:n.withCredentials})}const o=Ha(r).pipe(Na(t=>this.handler.handle(t)));if(t instanceof jA||"events"===n.observe)return o;const i=o.pipe(Ma(t=>t instanceof IA));switch(n.observe||"body"){case"body":switch(r.responseType){case"arraybuffer":return i.pipe(O(t=>{if(null!==t.body&&!(t.body instanceof ArrayBuffer))throw new Error("Response is not an ArrayBuffer.");return t.body}));case"blob":return i.pipe(O(t=>{if(null!==t.body&&!(t.body instanceof Blob))throw new Error("Response is not a Blob.");return t.body}));case"text":return i.pipe(O(t=>{if(null!==t.body&&"string"!=typeof t.body)throw new Error("Response is not a string.");return t.body}));case"json":default:return i.pipe(O(t=>t.body))}case"response":return i;default:throw new Error(`Unreachable: unhandled observe type ${n.observe}}`)}}delete(t,e={}){return this.request("DELETE",t,e)}get(t,e={}){return this.request("GET",t,e)}head(t,e={}){return this.request("HEAD",t,e)}jsonp(t,e){return this.request("JSONP",t,{params:(new kA).append(e,"JSONP_CALLBACK"),observe:"body",responseType:"json"})}options(t,e={}){return this.request("OPTIONS",t,e)}patch(t,e,n={}){return this.request("PATCH",t,OA(n,e))}post(t,e,n={}){return this.request("POST",t,OA(n,e))}put(t,e,n={}){return this.request("PUT",t,OA(n,e))}}return t.\u0275fac=function(e){return new(e||t)(Qt(bA))},t.\u0275prov=st({token:t,factory:t.\u0275fac}),t})();class PA{constructor(t,e){this.next=t,this.interceptor=e}handle(t){return this.interceptor.intercept(t,this.next)}}const HA=new It("HTTP_INTERCEPTORS");let NA=(()=>{class t{intercept(t,e){return e.handle(t)}}return t.\u0275fac=function(e){return new(e||t)},t.\u0275prov=st({token:t,factory:t.\u0275fac}),t})();const MA=/^\)\]\}',?\n/;class LA{}let JA=(()=>{class t{constructor(){}build(){return new XMLHttpRequest}}return t.\u0275fac=function(e){return new(e||t)},t.\u0275prov=st({token:t,factory:t.\u0275fac}),t})(),QA=(()=>{class t{constructor(t){this.xhrFactory=t}handle(t){if("JSONP"===t.method)throw new Error("Attempted to construct Jsonp request without JsonpClientModule installed.");return new U(e=>{const n=this.xhrFactory.build();if(n.open(t.method,t.urlWithParams),t.withCredentials&&(n.withCredentials=!0),t.headers.forEach((t,e)=>n.setRequestHeader(t,e.join(","))),t.headers.has("Accept")||n.setRequestHeader("Accept","application/json, text/plain, */*"),!t.headers.has("Content-Type")){const e=t.detectContentTypeHeader();null!==e&&n.setRequestHeader("Content-Type",e)}if(t.responseType){const e=t.responseType.toLowerCase();n.responseType="json"!==e?e:"text"}const r=t.serializeBody();let o=null;const i=()=>{if(null!==o)return o;const e=1223===n.status?204:n.status,r=n.statusText||"OK",i=new yA(n.getAllResponseHeaders()),s=function(t){return"responseURL"in t&&t.responseURL?t.responseURL:/^X-Request-URL:/m.test(t.getAllResponseHeaders())?t.getResponseHeader("X-Request-URL"):null}(n)||t.url;return o=new WA({headers:i,status:e,statusText:r,url:s}),o},s=()=>{let{headers:r,status:o,statusText:s,url:a}=i(),A=null;204!==o&&(A=void 0===n.response?n.responseText:n.response),0===o&&(o=A?200:0);let u=o>=200&&o<300;if("json"===t.responseType&&"string"==typeof A){const t=A;A=A.replace(MA,"");try{A=""!==A?JSON.parse(A):null}catch(l){A=t,u&&(u=!1,A={error:l,text:A})}}u?(e.next(new IA({body:A,headers:r,status:o,statusText:s,url:a||void 0})),e.complete()):e.error(new DA({error:A,headers:r,status:o,statusText:s,url:a||void 0}))},a=t=>{const{url:r}=i(),o=new DA({error:t,status:n.status||0,statusText:n.statusText||"Unknown Error",url:r||void 0});e.error(o)};let A=!1;const u=r=>{A||(e.next(i()),A=!0);let o={type:BA.DownloadProgress,loaded:r.loaded};r.lengthComputable&&(o.total=r.total),"text"===t.responseType&&n.responseText&&(o.partialText=n.responseText),e.next(o)},l=t=>{let n={type:BA.UploadProgress,loaded:t.loaded};t.lengthComputable&&(n.total=t.total),e.next(n)};return n.addEventListener("load",s),n.addEventListener("error",a),t.reportProgress&&(n.addEventListener("progress",u),null!==r&&n.upload&&n.upload.addEventListener("progress",l)),n.send(r),e.next({type:BA.Sent}),()=>{n.removeEventListener("error",a),n.removeEventListener("load",s),t.reportProgress&&(n.removeEventListener("progress",u),null!==r&&n.upload&&n.upload.removeEventListener("progress",l)),n.readyState!==n.DONE&&n.abort()}})}}return t.\u0275fac=function(e){return new(e||t)(Qt(LA))},t.\u0275prov=st({token:t,factory:t.\u0275fac}),t})();const TA=new It("XSRF_COOKIE_NAME"),EA=new It("XSRF_HEADER_NAME");class ZA{}let zA=(()=>{class t{constructor(t,e,n){this.doc=t,this.platform=e,this.cookieName=n,this.lastCookieString="",this.lastToken=null,this.parseCount=0}getToken(){if("server"===this.platform)return null;const t=this.doc.cookie||"";return t!==this.lastCookieString&&(this.parseCount++,this.lastToken=hA(t,this.cookieName),this.lastCookieString=t),this.lastToken}}return t.\u0275fac=function(e){return new(e||t)(Qt(Ea),Qt(Vs),Qt(TA))},t.\u0275prov=st({token:t,factory:t.\u0275fac}),t})(),VA=(()=>{class t{constructor(t,e){this.tokenService=t,this.headerName=e}intercept(t,e){const n=t.url.toLowerCase();if("GET"===t.method||"HEAD"===t.method||n.startsWith("http://")||n.startsWith("https://"))return e.handle(t);const r=this.tokenService.getToken();return null===r||t.headers.has(this.headerName)||(t=t.clone({headers:t.headers.set(this.headerName,r)})),e.handle(t)}}return t.\u0275fac=function(e){return new(e||t)(Qt(ZA),Qt(EA))},t.\u0275prov=st({token:t,factory:t.\u0275fac}),t})(),YA=(()=>{class t{constructor(t,e){this.backend=t,this.injector=e,this.chain=null}handle(t){if(null===this.chain){const t=this.injector.get(HA,[]);this.chain=t.reduceRight((t,e)=>new PA(t,e),this.backend)}return this.chain.handle(t)}}return t.\u0275fac=function(e){return new(e||t)(Qt(KA),Qt(Fi))},t.\u0275prov=st({token:t,factory:t.\u0275fac}),t})(),XA=(()=>{class t{static disable(){return{ngModule:t,providers:[{provide:VA,useClass:NA}]}}static withOptions(e={}){return{ngModule:t,providers:[e.cookieName?{provide:TA,useValue:e.cookieName}:[],e.headerName?{provide:EA,useValue:e.headerName}:[]]}}}return t.\u0275mod=ae({type:t}),t.\u0275inj=at({factory:function(e){return new(e||t)},providers:[VA,{provide:HA,useExisting:VA,multi:!0},{provide:ZA,useClass:zA},{provide:TA,useValue:"XSRF-TOKEN"},{provide:EA,useValue:"X-XSRF-TOKEN"}]}),t})(),qA=(()=>{class t{}return t.\u0275mod=ae({type:t}),t.\u0275inj=at({factory:function(e){return new(e||t)},providers:[GA,{provide:bA,useClass:YA},QA,{provide:KA,useExisting:QA},JA,{provide:LA,useExisting:JA}],imports:[[XA.withOptions({cookieName:"XSRF-TOKEN",headerName:"X-XSRF-TOKEN"})]]}),t})(),_A=(()=>{class t{constructor(t){this.http=t}getProfile(){return this.http.get("assets/profile.json").toPromise()}getTopSkills(){return this.http.get("assets/top-skills.json").toPromise()}getFeaturedProjects(){return this.http.get("assets/projects.json").toPromise()}getWorkHistory(){return this.http.get("assets/work-experience.json").toPromise()}getBase64CV(){return this.http.get("assets/media/base64/CV.json").toPromise()}getBase64Diplome(){return this.http.get("assets/media/base64/Diplome.json").toPromise()}}return t.\u0275fac=function(e){return new(e||t)(Qt(GA))},t.\u0275prov=st({token:t,factory:t.\u0275fac,providedIn:"root"}),t})();class $A extends class extends class{}{constructor(){super()}supportsDOMEvents(){return!0}}{static makeCurrent(){var t;t=new $A,Qa||(Qa=t)}getProperty(t,e){return t[e]}log(t){window.console&&window.console.log&&window.console.log(t)}logGroup(t){window.console&&window.console.group&&window.console.group(t)}logGroupEnd(){window.console&&window.console.groupEnd&&window.console.groupEnd()}onAndCancel(t,e,n){return t.addEventListener(e,n,!1),()=>{t.removeEventListener(e,n,!1)}}dispatchEvent(t,e){t.dispatchEvent(e)}remove(t){return t.parentNode&&t.parentNode.removeChild(t),t}getValue(t){return t.value}createElement(t,e){return(e=e||this.getDefaultDocument()).createElement(t)}createHtmlDocument(){return document.implementation.createHTMLDocument("fakeTitle")}getDefaultDocument(){return document}isElementNode(t){return t.nodeType===Node.ELEMENT_NODE}isShadowRoot(t){return t instanceof DocumentFragment}getGlobalEventTarget(t,e){return"window"===e?window:"document"===e?t:"body"===e?t.body:null}getHistory(){return window.history}getLocation(){return window.location}getBaseHref(t){const e=eu||(eu=document.querySelector("base"),eu)?eu.getAttribute("href"):null;return null==e?null:(n=e,tu||(tu=document.createElement("a")),tu.setAttribute("href",n),"/"===tu.pathname.charAt(0)?tu.pathname:"/"+tu.pathname);var n}resetBaseElement(){eu=null}getUserAgent(){return window.navigator.userAgent}performanceNow(){return window.performance&&window.performance.now?window.performance.now():(new Date).getTime()}supportsCookies(){return!0}getCookie(t){return hA(document.cookie,t)}}let tu,eu=null;const nu=new It("TRANSITION_ID"),ru=[{provide:Js,useFactory:function(t,e,n){return()=>{n.get(Qs).donePromise.then(()=>{const n=Ta();Array.prototype.slice.apply(e.querySelectorAll("style[ng-transition]")).filter(e=>e.getAttribute("ng-transition")===t).forEach(t=>n.remove(t))})}},deps:[nu,Ea,Fi],multi:!0}];class ou{static init(){var t;t=new ou,Ka=t}addToWindow(t){kt.getAngularTestability=(e,n=!0)=>{const r=t.findTestabilityInTree(e,n);if(null==r)throw new Error("Could not find testability for element.");return r},kt.getAllAngularTestabilities=()=>t.getAllTestabilities(),kt.getAllAngularRootElements=()=>t.getAllRootElements(),kt.frameworkStabilizers||(kt.frameworkStabilizers=[]),kt.frameworkStabilizers.push(t=>{const e=kt.getAllAngularTestabilities();let n=e.length,r=!1;const o=function(e){r=r||e,n--,0==n&&t(r)};e.forEach((function(t){t.whenStable(o)}))})}findTestabilityInTree(t,e,n){if(null==e)return null;const r=t.getTestability(e);return null!=r?r:n?Ta().isShadowRoot(e)?this.findTestabilityInTree(t,e.host,!0):this.findTestabilityInTree(t,e.parentElement,!0):null}}const iu=new It("EventManagerPlugins");let su=(()=>{class t{constructor(t,e){this._zone=e,this._eventNameToPlugin=new Map,t.forEach(t=>t.manager=this),this._plugins=t.slice().reverse()}addEventListener(t,e,n){return this._findPluginFor(e).addEventListener(t,e,n)}addGlobalEventListener(t,e,n){return this._findPluginFor(e).addGlobalEventListener(t,e,n)}getZone(){return this._zone}_findPluginFor(t){const e=this._eventNameToPlugin.get(t);if(e)return e;const n=this._plugins;for(let r=0;r<n.length;r++){const e=n[r];if(e.supports(t))return this._eventNameToPlugin.set(t,e),e}throw new Error("No event manager plugin found for event "+t)}}return t.\u0275fac=function(e){return new(e||t)(Qt(iu),Qt(ua))},t.\u0275prov=st({token:t,factory:t.\u0275fac}),t})();class au{constructor(t){this._doc=t}addGlobalEventListener(t,e,n){const r=Ta().getGlobalEventTarget(this._doc,t);if(!r)throw new Error(`Unsupported event target ${r} for event ${e}`);return this.addEventListener(r,e,n)}}let Au=(()=>{class t{constructor(){this._stylesSet=new Set}addStyles(t){const e=new Set;t.forEach(t=>{this._stylesSet.has(t)||(this._stylesSet.add(t),e.add(t))}),this.onStylesAdded(e)}onStylesAdded(t){}getAllStyles(){return Array.from(this._stylesSet)}}return t.\u0275fac=function(e){return new(e||t)},t.\u0275prov=st({token:t,factory:t.\u0275fac}),t})(),uu=(()=>{class t extends Au{constructor(t){super(),this._doc=t,this._hostNodes=new Set,this._styleNodes=new Set,this._hostNodes.add(t.head)}_addStylesToHost(t,e){t.forEach(t=>{const n=this._doc.createElement("style");n.textContent=t,this._styleNodes.add(e.appendChild(n))})}addHost(t){this._addStylesToHost(this._stylesSet,t),this._hostNodes.add(t)}removeHost(t){this._hostNodes.delete(t)}onStylesAdded(t){this._hostNodes.forEach(e=>this._addStylesToHost(t,e))}ngOnDestroy(){this._styleNodes.forEach(t=>Ta().remove(t))}}return t.\u0275fac=function(e){return new(e||t)(Qt(Ea))},t.\u0275prov=st({token:t,factory:t.\u0275fac}),t})();const lu={svg:"http://www.w3.org/2000/svg",xhtml:"http://www.w3.org/1999/xhtml",xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},cu=/%COMP%/g;function hu(t,e,n){for(let r=0;r<e.length;r++){let o=e[r];Array.isArray(o)?hu(t,o,n):(o=o.replace(cu,t),n.push(o))}return n}function du(t){return e=>{if("__ngUnwrap__"===e)return t;!1===t(e)&&(e.preventDefault(),e.returnValue=!1)}}let pu=(()=>{class t{constructor(t,e,n){this.eventManager=t,this.sharedStylesHost=e,this.appId=n,this.rendererByCompId=new Map,this.defaultRenderer=new gu(t)}createRenderer(t,e){if(!t||!e)return this.defaultRenderer;switch(e.encapsulation){case $t.Emulated:{let n=this.rendererByCompId.get(e.id);return n||(n=new fu(this.eventManager,this.sharedStylesHost,e,this.appId),this.rendererByCompId.set(e.id,n)),n.applyToHost(t),n}case $t.Native:case $t.ShadowDom:return new Fu(this.eventManager,this.sharedStylesHost,t,e);default:if(!this.rendererByCompId.has(e.id)){const t=hu(e.id,e.styles,[]);this.sharedStylesHost.addStyles(t),this.rendererByCompId.set(e.id,this.defaultRenderer)}return this.defaultRenderer}}begin(){}end(){}}return t.\u0275fac=function(e){return new(e||t)(Qt(su),Qt(uu),Qt(Ts))},t.\u0275prov=st({token:t,factory:t.\u0275fac}),t})();class gu{constructor(t){this.eventManager=t,this.data=Object.create(null)}destroy(){}createElement(t,e){return e?document.createElementNS(lu[e]||e,t):document.createElement(t)}createComment(t){return document.createComment(t)}createText(t){return document.createTextNode(t)}appendChild(t,e){t.appendChild(e)}insertBefore(t,e,n){t&&t.insertBefore(e,n)}removeChild(t,e){t&&t.removeChild(e)}selectRootElement(t,e){let n="string"==typeof t?document.querySelector(t):t;if(!n)throw new Error(`The selector "${t}" did not match any elements`);return e||(n.textContent=""),n}parentNode(t){return t.parentNode}nextSibling(t){return t.nextSibling}setAttribute(t,e,n,r){if(r){e=r+":"+e;const o=lu[r];o?t.setAttributeNS(o,e,n):t.setAttribute(e,n)}else t.setAttribute(e,n)}removeAttribute(t,e,n){if(n){const r=lu[n];r?t.removeAttributeNS(r,e):t.removeAttribute(`${n}:${e}`)}else t.removeAttribute(e)}addClass(t,e){t.classList.add(e)}removeClass(t,e){t.classList.remove(e)}setStyle(t,e,n,r){r&ts.DashCase?t.style.setProperty(e,n,r&ts.Important?"important":""):t.style[e]=n}removeStyle(t,e,n){n&ts.DashCase?t.style.removeProperty(e):t.style[e]=""}setProperty(t,e,n){t[e]=n}setValue(t,e){t.nodeValue=e}listen(t,e,n){return"string"==typeof t?this.eventManager.addGlobalEventListener(t,e,du(n)):this.eventManager.addEventListener(t,e,du(n))}}class fu extends gu{constructor(t,e,n,r){super(t),this.component=n;const o=hu(r+"-"+n.id,n.styles,[]);e.addStyles(o),this.contentAttr="_ngcontent-%COMP%".replace(cu,r+"-"+n.id),this.hostAttr=function(t){return"_nghost-%COMP%".replace(cu,t)}(r+"-"+n.id)}applyToHost(t){super.setAttribute(t,this.hostAttr,"")}createElement(t,e){const n=super.createElement(t,e);return super.setAttribute(n,this.contentAttr,""),n}}class Fu extends gu{constructor(t,e,n,r){super(t),this.sharedStylesHost=e,this.hostEl=n,this.component=r,this.shadowRoot=r.encapsulation===$t.ShadowDom?n.attachShadow({mode:"open"}):n.createShadowRoot(),this.sharedStylesHost.addHost(this.shadowRoot);const o=hu(r.id,r.styles,[]);for(let i=0;i<o.length;i++){const t=document.createElement("style");t.textContent=o[i],this.shadowRoot.appendChild(t)}}nodeOrShadowRoot(t){return t===this.hostEl?this.shadowRoot:t}destroy(){this.sharedStylesHost.removeHost(this.shadowRoot)}appendChild(t,e){return super.appendChild(this.nodeOrShadowRoot(t),e)}insertBefore(t,e,n){return super.insertBefore(this.nodeOrShadowRoot(t),e,n)}removeChild(t,e){return super.removeChild(this.nodeOrShadowRoot(t),e)}parentNode(t){return this.nodeOrShadowRoot(super.parentNode(this.nodeOrShadowRoot(t)))}}let Uu=(()=>{class t extends au{constructor(t){super(t)}supports(t){return!0}addEventListener(t,e,n){return t.addEventListener(e,n,!1),()=>this.removeEventListener(t,e,n)}removeEventListener(t,e,n){return t.removeEventListener(e,n)}}return t.\u0275fac=function(e){return new(e||t)(Qt(Ea))},t.\u0275prov=st({token:t,factory:t.\u0275fac}),t})();const Ru=["alt","control","meta","shift"],bu={"\b":"Backspace","\t":"Tab","\x7f":"Delete","\x1b":"Escape",Del:"Delete",Esc:"Escape",Left:"ArrowLeft",Right:"ArrowRight",Up:"ArrowUp",Down:"ArrowDown",Menu:"ContextMenu",Scroll:"ScrollLock",Win:"OS"},Ku={A:"1",B:"2",C:"3",D:"4",E:"5",F:"6",G:"7",H:"8",I:"9",J:"*",K:"+",M:"-",N:".",O:"/","`":"0","\x90":"NumLock"},yu={alt:t=>t.altKey,control:t=>t.ctrlKey,meta:t=>t.metaKey,shift:t=>t.shiftKey};let wu=(()=>{class t extends au{constructor(t){super(t)}supports(e){return null!=t.parseEventName(e)}addEventListener(e,n,r){const o=t.parseEventName(n),i=t.eventCallback(o.fullKey,r,this.manager.getZone());return this.manager.getZone().runOutsideAngular(()=>Ta().onAndCancel(e,o.domEventName,i))}static parseEventName(e){const n=e.toLowerCase().split("."),r=n.shift();if(0===n.length||"keydown"!==r&&"keyup"!==r)return null;const o=t._normalizeKey(n.pop());let i="";if(Ru.forEach(t=>{const e=n.indexOf(t);e>-1&&(n.splice(e,1),i+=t+".")}),i+=o,0!=n.length||0===o.length)return null;const s={};return s.domEventName=r,s.fullKey=i,s}static getEventFullKey(t){let e="",n=function(t){let e=t.key;if(null==e){if(e=t.keyIdentifier,null==e)return"Unidentified";e.startsWith("U+")&&(e=String.fromCharCode(parseInt(e.substring(2),16)),3===t.location&&Ku.hasOwnProperty(e)&&(e=Ku[e]))}return bu[e]||e}(t);return n=n.toLowerCase()," "===n?n="space":"."===n&&(n="dot"),Ru.forEach(r=>{r!=n&&(0,yu[r])(t)&&(e+=r+".")}),e+=n,e}static eventCallback(e,n,r){return o=>{t.getEventFullKey(o)===e&&r.runGuarded(()=>n(o))}}static _normalizeKey(t){switch(t){case"esc":return"escape";default:return t}}}return t.\u0275fac=function(e){return new(e||t)(Qt(Ea))},t.\u0275prov=st({token:t,factory:t.\u0275fac}),t})();const mu=ma(Oa,"browser",[{provide:Vs,useValue:"browser"},{provide:zs,useValue:function(){$A.makeCurrent(),ou.init()},multi:!0},{provide:Ea,useFactory:function(){return function(t){be=t}(document),document},deps:[]}]),ku=[[],{provide:oi,useValue:"root"},{provide:Qn,useFactory:function(){return new Qn},deps:[]},{provide:iu,useClass:Uu,multi:!0,deps:[Ea,ua,Vs]},{provide:iu,useClass:wu,multi:!0,deps:[Ea]},[],{provide:pu,useClass:pu,deps:[su,uu,Ts]},{provide:$i,useExisting:pu},{provide:Au,useExisting:uu},{provide:uu,useClass:uu,deps:[Ea]},{provide:Fa,useClass:Fa,deps:[ua]},{provide:su,useClass:su,deps:[iu,ua]},[]];let xu=(()=>{class t{constructor(t){if(t)throw new Error("BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.")}static withServerTransition(e){return{ngModule:t,providers:[{provide:Ts,useValue:e.appId},{provide:nu,useExisting:Ts},ru]}}}return t.\u0275mod=ae({type:t}),t.\u0275inj=at({factory:function(e){return new(e||t)(Qt(t,12))},providers:ku,imports:[FA,Pa]}),t})();"undefined"!=typeof window&&window;class Su extends w{constructor(t){super(),this._value=t}get value(){return this.getValue()}_subscribe(t){const e=super._subscribe(t);return e&&!e.closed&&t.next(this._value),e}getValue(){if(this.hasError)throw this.thrownError;if(this.closed)throw new b;return this._value}next(t){super.next(this._value=t)}}const Cu=(()=>{function t(){return Error.call(this),this.message="no elements in sequence",this.name="EmptyError",this}return t.prototype=Object.create(Error.prototype),t})(),ju={};class Bu{constructor(t){this.resultSelector=t}call(t,e){return e.subscribe(new vu(t,this.resultSelector))}}class vu extends D{constructor(t,e){super(t),this.resultSelector=e,this.active=0,this.values=[],this.observables=[]}_next(t){this.values.push(ju),this.observables.push(t)}_complete(){const t=this.observables,e=t.length;if(0===e)this.destination.complete();else{this.active=e,this.toRespond=e;for(let n=0;n<e;n++){const e=t[n];this.add(I(this,e,e,n))}}}notifyComplete(t){0==(this.active-=1)&&this.destination.complete()}notifyNext(t,e,n,r,o){const i=this.values,s=this.toRespond?i[n]===ju?--this.toRespond:this.toRespond:0;i[n]=e,0===s&&(this.resultSelector?this._tryResultSelector(i):this.destination.next(i.slice()))}_tryResultSelector(t){let e;try{e=this.resultSelector.apply(this,t)}catch(n){return void this.destination.error(n)}this.destination.next(e)}}const Wu=new U(t=>t.complete());function Iu(t){return t?function(t){return new U(e=>t.schedule(()=>e.complete()))}(t):Wu}function Du(t){return new U(e=>{let n;try{n=t()}catch(r){return void e.error(r)}return(n?N(n):Iu()).subscribe(e)})}function Ou(){return Q(1)}const Gu=(()=>{function t(){return Error.call(this),this.message="argument out of range",this.name="ArgumentOutOfRangeError",this}return t.prototype=Object.create(Error.prototype),t})();function Pu(t){return function(e){return 0===t?Iu():e.lift(new Hu(t))}}class Hu{constructor(t){if(this.total=t,this.total<0)throw new Gu}call(t,e){return e.subscribe(new Nu(t,this.total))}}class Nu extends p{constructor(t,e){super(t),this.total=e,this.ring=new Array,this.count=0}_next(t){const e=this.ring,n=this.total,r=this.count++;e.length<n?e.push(t):e[r%n]=t}_complete(){const t=this.destination;let e=this.count;if(e>0){const n=this.count>=this.total?this.total:this.count,r=this.ring;for(let o=0;o<n;o++){const o=e++%n;t.next(r[o])}}t.complete()}}function Mu(t=Qu){return e=>e.lift(new Lu(t))}class Lu{constructor(t){this.errorFactory=t}call(t,e){return e.subscribe(new Ju(t,this.errorFactory))}}class Ju extends p{constructor(t,e){super(t),this.errorFactory=e,this.hasValue=!1}_next(t){this.hasValue=!0,this.destination.next(t)}_complete(){if(this.hasValue)return this.destination.complete();{let e;try{e=this.errorFactory()}catch(t){e=t}this.destination.error(e)}}}function Qu(){return new Cu}function Tu(t=null){return e=>e.lift(new Eu(t))}class Eu{constructor(t){this.defaultValue=t}call(t,e){return e.subscribe(new Zu(t,this.defaultValue))}}class Zu extends p{constructor(t,e){super(t),this.defaultValue=e,this.isEmpty=!0}_next(t){this.isEmpty=!1,this.destination.next(t)}_complete(){this.isEmpty&&this.destination.next(this.defaultValue),this.destination.complete()}}function zu(t){return function(e){const n=new Vu(t),r=e.lift(n);return n.caught=r}}class Vu{constructor(t){this.selector=t}call(t,e){return e.subscribe(new Yu(t,this.selector,this.caught))}}class Yu extends D{constructor(t,e,n){super(t),this.selector=e,this.caught=n}error(t){if(!this.isStopped){let n;try{n=this.selector(t,this.caught)}catch(e){return void super.error(e)}this._unsubscribeAndRecycle();const r=new x(this,void 0,void 0);this.add(r);const o=I(this,n,void 0,void 0,r);o!==r&&this.add(o)}}}function Xu(t){return e=>0===t?Iu():e.lift(new qu(t))}class qu{constructor(t){if(this.total=t,this.total<0)throw new Gu}call(t,e){return e.subscribe(new _u(t,this.total))}}class _u extends p{constructor(t,e){super(t),this.total=e,this.count=0}_next(t){const e=this.total,n=++this.count;n<=e&&(this.destination.next(t),n===e&&(this.destination.complete(),this.unsubscribe()))}}function $u(t,e){const n=arguments.length>=2;return r=>r.pipe(t?Ma((e,n)=>t(e,n,r)):F,Xu(1),n?Tu(e):Mu(()=>new Cu))}function tl(){}function el(t,e,n){return function(r){return r.lift(new nl(t,e,n))}}class nl{constructor(t,e,n){this.nextOrObserver=t,this.error=e,this.complete=n}call(t,e){return e.subscribe(new rl(t,this.nextOrObserver,this.error,this.complete))}}class rl extends p{constructor(t,e,n,o){super(t),this._tapNext=tl,this._tapError=tl,this._tapComplete=tl,this._tapError=n||tl,this._tapComplete=o||tl,r(e)?(this._context=this,this._tapNext=e):e&&(this._context=e,this._tapNext=e.next||tl,this._tapError=e.error||tl,this._tapComplete=e.complete||tl)}_next(t){try{this._tapNext.call(this._context,t)}catch(e){return void this.destination.error(e)}this.destination.next(t)}_error(t){try{this._tapError.call(this._context,t)}catch(t){return void this.destination.error(t)}this.destination.error(t)}_complete(){try{this._tapComplete.call(this._context)}catch(t){return void this.destination.error(t)}return this.destination.complete()}}class ol{constructor(t,e,n){this.predicate=t,this.thisArg=e,this.source=n}call(t,e){return e.subscribe(new il(t,this.predicate,this.thisArg,this.source))}}class il extends p{constructor(t,e,n,r){super(t),this.predicate=e,this.thisArg=n,this.source=r,this.index=0,this.thisArg=n||this}notifyComplete(t){this.destination.next(t),this.destination.complete()}_next(t){let e=!1;try{e=this.predicate.call(this.thisArg,t,this.index++,this.source)}catch(n){return void this.destination.error(n)}e||this.notifyComplete(!1)}_complete(){this.notifyComplete(!0)}}function sl(t,e){return"function"==typeof e?n=>n.pipe(sl((n,r)=>N(t(n,r)).pipe(O((t,o)=>e(n,t,r,o))))):e=>e.lift(new al(t))}class al{constructor(t){this.project=t}call(t,e){return e.subscribe(new Al(t,this.project))}}class Al extends D{constructor(t,e){super(t),this.project=e,this.index=0}_next(t){let e;const n=this.index++;try{e=this.project(t,n)}catch(r){return void this.destination.error(r)}this._innerSub(e,t,n)}_innerSub(t,e,n){const r=this.innerSubscription;r&&r.unsubscribe();const o=new x(this,e,n),i=this.destination;i.add(o),this.innerSubscription=I(this,t,void 0,void 0,o),this.innerSubscription!==o&&i.add(this.innerSubscription)}_complete(){const{innerSubscription:t}=this;t&&!t.closed||super._complete(),this.unsubscribe()}_unsubscribe(){this.innerSubscription=null}notifyComplete(t){this.destination.remove(t),this.innerSubscription=null,this.isStopped&&super._complete()}notifyNext(t,e,n,r,o){this.destination.next(e)}}function ul(...t){return Ou()(Ha(...t))}class ll{constructor(t,e,n=!1){this.accumulator=t,this.seed=e,this.hasSeed=n}call(t,e){return e.subscribe(new cl(t,this.accumulator,this.seed,this.hasSeed))}}class cl extends p{constructor(t,e,n,r){super(t),this.accumulator=e,this._seed=n,this.hasSeed=r,this.index=0}get seed(){return this._seed}set seed(t){this.hasSeed=!0,this._seed=t}_next(t){if(this.hasSeed)return this._tryNext(t);this.seed=t,this.destination.next(t)}_tryNext(t){const e=this.index++;let n;try{n=this.accumulator(this.seed,t,e)}catch(r){this.destination.error(r)}this.seed=n,this.destination.next(n)}}class hl{constructor(t){this.callback=t}call(t,e){return e.subscribe(new dl(t,this.callback))}}class dl extends p{constructor(t,e){super(t),this.add(new c(e))}}class pl{constructor(t,e){this.id=t,this.url=e}}class gl extends pl{constructor(t,e,n="imperative",r=null){super(t,e),this.navigationTrigger=n,this.restoredState=r}toString(){return`NavigationStart(id: ${this.id}, url: '${this.url}')`}}class fl extends pl{constructor(t,e,n){super(t,e),this.urlAfterRedirects=n}toString(){return`NavigationEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}')`}}class Fl extends pl{constructor(t,e,n){super(t,e),this.reason=n}toString(){return`NavigationCancel(id: ${this.id}, url: '${this.url}')`}}class Ul extends pl{constructor(t,e,n){super(t,e),this.error=n}toString(){return`NavigationError(id: ${this.id}, url: '${this.url}', error: ${this.error})`}}class Rl extends pl{constructor(t,e,n,r){super(t,e),this.urlAfterRedirects=n,this.state=r}toString(){return`RoutesRecognized(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`}}class bl extends pl{constructor(t,e,n,r){super(t,e),this.urlAfterRedirects=n,this.state=r}toString(){return`GuardsCheckStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`}}class Kl extends pl{constructor(t,e,n,r,o){super(t,e),this.urlAfterRedirects=n,this.state=r,this.shouldActivate=o}toString(){return`GuardsCheckEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state}, shouldActivate: ${this.shouldActivate})`}}class yl extends pl{constructor(t,e,n,r){super(t,e),this.urlAfterRedirects=n,this.state=r}toString(){return`ResolveStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`}}class wl extends pl{constructor(t,e,n,r){super(t,e),this.urlAfterRedirects=n,this.state=r}toString(){return`ResolveEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`}}class ml{constructor(t){this.route=t}toString(){return`RouteConfigLoadStart(path: ${this.route.path})`}}class kl{constructor(t){this.route=t}toString(){return`RouteConfigLoadEnd(path: ${this.route.path})`}}class xl{constructor(t){this.snapshot=t}toString(){return`ChildActivationStart(path: '${this.snapshot.routeConfig&&this.snapshot.routeConfig.path||""}')`}}class Sl{constructor(t){this.snapshot=t}toString(){return`ChildActivationEnd(path: '${this.snapshot.routeConfig&&this.snapshot.routeConfig.path||""}')`}}class Cl{constructor(t){this.snapshot=t}toString(){return`ActivationStart(path: '${this.snapshot.routeConfig&&this.snapshot.routeConfig.path||""}')`}}class jl{constructor(t){this.snapshot=t}toString(){return`ActivationEnd(path: '${this.snapshot.routeConfig&&this.snapshot.routeConfig.path||""}')`}}class Bl{constructor(t,e,n){this.routerEvent=t,this.position=e,this.anchor=n}toString(){return`Scroll(anchor: '${this.anchor}', position: '${this.position?`${this.position[0]}, ${this.position[1]}`:null}')`}}let vl=(()=>{class t{}return t.\u0275fac=function(e){return new(e||t)},t.\u0275cmp=re({type:t,selectors:[["ng-component"]],decls:1,vars:0,template:function(t,e){1&t&&Wi(0,"router-outlet")},directives:function(){return[Ih]},encapsulation:2}),t})();class Wl{constructor(t){this.params=t||{}}has(t){return Object.prototype.hasOwnProperty.call(this.params,t)}get(t){if(this.has(t)){const e=this.params[t];return Array.isArray(e)?e[0]:e}return null}getAll(t){if(this.has(t)){const e=this.params[t];return Array.isArray(e)?e:[e]}return[]}get keys(){return Object.keys(this.params)}}function Il(t){return new Wl(t)}function Dl(t){const e=Error("NavigationCancelingError: "+t);return e.ngNavigationCancelingError=!0,e}function Ol(t,e,n){const r=n.path.split("/");if(r.length>t.length)return null;if("full"===n.pathMatch&&(e.hasChildren()||r.length<t.length))return null;const o={};for(let i=0;i<r.length;i++){const e=r[i],n=t[i];if(e.startsWith(":"))o[e.substring(1)]=n;else if(e!==n.path)return null}return{consumed:t.slice(0,r.length),posParams:o}}class Gl{constructor(t,e){this.routes=t,this.module=e}}function Pl(t,e=""){for(let n=0;n<t.length;n++){const r=t[n];Hl(r,Nl(e,r))}}function Hl(t,e){if(!t)throw new Error(`\n      Invalid configuration of route '${e}': Encountered undefined route.\n      The reason might be an extra comma.\n\n      Example:\n      const routes: Routes = [\n        { path: '', redirectTo: '/dashboard', pathMatch: 'full' },\n        { path: 'dashboard',  component: DashboardComponent },, << two commas\n        { path: 'detail/:id', component: HeroDetailComponent }\n      ];\n    `);if(Array.isArray(t))throw new Error(`Invalid configuration of route '${e}': Array cannot be specified`);if(!t.component&&!t.children&&!t.loadChildren&&t.outlet&&"primary"!==t.outlet)throw new Error(`Invalid configuration of route '${e}': a componentless route without children or loadChildren cannot have a named outlet set`);if(t.redirectTo&&t.children)throw new Error(`Invalid configuration of route '${e}': redirectTo and children cannot be used together`);if(t.redirectTo&&t.loadChildren)throw new Error(`Invalid configuration of route '${e}': redirectTo and loadChildren cannot be used together`);if(t.children&&t.loadChildren)throw new Error(`Invalid configuration of route '${e}': children and loadChildren cannot be used together`);if(t.redirectTo&&t.component)throw new Error(`Invalid configuration of route '${e}': redirectTo and component cannot be used together`);if(t.path&&t.matcher)throw new Error(`Invalid configuration of route '${e}': path and matcher cannot be used together`);if(void 0===t.redirectTo&&!t.component&&!t.children&&!t.loadChildren)throw new Error(`Invalid configuration of route '${e}'. One of the following must be provided: component, redirectTo, children or loadChildren`);if(void 0===t.path&&void 0===t.matcher)throw new Error(`Invalid configuration of route '${e}': routes must have either a path or a matcher specified`);if("string"==typeof t.path&&"/"===t.path.charAt(0))throw new Error(`Invalid configuration of route '${e}': path cannot start with a slash`);if(""===t.path&&void 0!==t.redirectTo&&void 0===t.pathMatch)throw new Error(`Invalid configuration of route '{path: "${e}", redirectTo: "${t.redirectTo}"}': please provide 'pathMatch'. The default value of 'pathMatch' is 'prefix', but often the intent is to use 'full'.`);if(void 0!==t.pathMatch&&"full"!==t.pathMatch&&"prefix"!==t.pathMatch)throw new Error(`Invalid configuration of route '${e}': pathMatch can only be set to 'prefix' or 'full'`);t.children&&Pl(t.children,e)}function Nl(t,e){return e?t||e.path?t&&!e.path?t+"/":!t&&e.path?e.path:`${t}/${e.path}`:"":t}function Ml(t){const e=t.children&&t.children.map(Ml),n=e?Object.assign(Object.assign({},t),{children:e}):Object.assign({},t);return!n.component&&(e||n.loadChildren)&&n.outlet&&"primary"!==n.outlet&&(n.component=vl),n}function Ll(t,e){const n=Object.keys(t),r=Object.keys(e);if(!n||!r||n.length!=r.length)return!1;let o;for(let i=0;i<n.length;i++)if(o=n[i],!Jl(t[o],e[o]))return!1;return!0}function Jl(t,e){return Array.isArray(t)&&Array.isArray(e)?t.length==e.length&&t.every(t=>e.indexOf(t)>-1):t===e}function Ql(t){return Array.prototype.concat.apply([],t)}function Tl(t){return t.length>0?t[t.length-1]:null}function El(t,e){for(const n in t)t.hasOwnProperty(n)&&e(t[n],n)}function Zl(t){return(e=t)&&"function"==typeof e.subscribe?t:Oi(t)?N(Promise.resolve(t)):Ha(t);var e}function zl(t,e,n){return n?function(t,e){return Ll(t,e)}(t.queryParams,e.queryParams)&&function t(e,n){if(!ql(e.segments,n.segments))return!1;if(e.numberOfChildren!==n.numberOfChildren)return!1;for(const r in n.children){if(!e.children[r])return!1;if(!t(e.children[r],n.children[r]))return!1}return!0}(t.root,e.root):function(t,e){return Object.keys(e).length<=Object.keys(t).length&&Object.keys(e).every(n=>Jl(t[n],e[n]))}(t.queryParams,e.queryParams)&&function t(e,n){return function e(n,r,o){if(n.segments.length>o.length)return!!ql(n.segments.slice(0,o.length),o)&&!r.hasChildren();if(n.segments.length===o.length){if(!ql(n.segments,o))return!1;for(const e in r.children){if(!n.children[e])return!1;if(!t(n.children[e],r.children[e]))return!1}return!0}{const t=o.slice(0,n.segments.length),i=o.slice(n.segments.length);return!!ql(n.segments,t)&&!!n.children.primary&&e(n.children.primary,r,i)}}(e,n,n.segments)}(t.root,e.root)}class Vl{constructor(t,e,n){this.root=t,this.queryParams=e,this.fragment=n}get queryParamMap(){return this._queryParamMap||(this._queryParamMap=Il(this.queryParams)),this._queryParamMap}toString(){return ec.serialize(this)}}class Yl{constructor(t,e){this.segments=t,this.children=e,this.parent=null,El(e,(t,e)=>t.parent=this)}hasChildren(){return this.numberOfChildren>0}get numberOfChildren(){return Object.keys(this.children).length}toString(){return nc(this)}}class Xl{constructor(t,e){this.path=t,this.parameters=e}get parameterMap(){return this._parameterMap||(this._parameterMap=Il(this.parameters)),this._parameterMap}toString(){return Ac(this)}}function ql(t,e){return t.length===e.length&&t.every((t,n)=>t.path===e[n].path)}function _l(t,e){let n=[];return El(t.children,(t,r)=>{"primary"===r&&(n=n.concat(e(t,r)))}),El(t.children,(t,r)=>{"primary"!==r&&(n=n.concat(e(t,r)))}),n}class $l{}class tc{parse(t){const e=new dc(t);return new Vl(e.parseRootSegment(),e.parseQueryParams(),e.parseFragment())}serialize(t){return`${"/"+function t(e,n){if(!e.hasChildren())return nc(e);if(n){const n=e.children.primary?t(e.children.primary,!1):"",r=[];return El(e.children,(e,n)=>{"primary"!==n&&r.push(`${n}:${t(e,!1)}`)}),r.length>0?`${n}(${r.join("//")})`:n}{const n=_l(e,(n,r)=>"primary"===r?[t(e.children.primary,!1)]:[`${r}:${t(n,!1)}`]);return`${nc(e)}/(${n.join("//")})`}}(t.root,!0)}${function(t){const e=Object.keys(t).map(e=>{const n=t[e];return Array.isArray(n)?n.map(t=>`${oc(e)}=${oc(t)}`).join("&"):`${oc(e)}=${oc(n)}`});return e.length?"?"+e.join("&"):""}(t.queryParams)}${"string"==typeof t.fragment?"#"+encodeURI(t.fragment):""}`}}const ec=new tc;function nc(t){return t.segments.map(t=>Ac(t)).join("/")}function rc(t){return encodeURIComponent(t).replace(/%40/g,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",")}function oc(t){return rc(t).replace(/%3B/gi,";")}function ic(t){return rc(t).replace(/\(/g,"%28").replace(/\)/g,"%29").replace(/%26/gi,"&")}function sc(t){return decodeURIComponent(t)}function ac(t){return sc(t.replace(/\+/g,"%20"))}function Ac(t){return`${ic(t.path)}${e=t.parameters,Object.keys(e).map(t=>`;${ic(t)}=${ic(e[t])}`).join("")}`;var e}const uc=/^[^\/()?;=#]+/;function lc(t){const e=t.match(uc);return e?e[0]:""}const cc=/^[^=?&#]+/,hc=/^[^?&#]+/;class dc{constructor(t){this.url=t,this.remaining=t}parseRootSegment(){return this.consumeOptional("/"),""===this.remaining||this.peekStartsWith("?")||this.peekStartsWith("#")?new Yl([],{}):new Yl([],this.parseChildren())}parseQueryParams(){const t={};if(this.consumeOptional("?"))do{this.parseQueryParam(t)}while(this.consumeOptional("&"));return t}parseFragment(){return this.consumeOptional("#")?decodeURIComponent(this.remaining):null}parseChildren(){if(""===this.remaining)return{};this.consumeOptional("/");const t=[];for(this.peekStartsWith("(")||t.push(this.parseSegment());this.peekStartsWith("/")&&!this.peekStartsWith("//")&&!this.peekStartsWith("/(");)this.capture("/"),t.push(this.parseSegment());let e={};this.peekStartsWith("/(")&&(this.capture("/"),e=this.parseParens(!0));let n={};return this.peekStartsWith("(")&&(n=this.parseParens(!1)),(t.length>0||Object.keys(e).length>0)&&(n.primary=new Yl(t,e)),n}parseSegment(){const t=lc(this.remaining);if(""===t&&this.peekStartsWith(";"))throw new Error(`Empty path url segment cannot have parameters: '${this.remaining}'.`);return this.capture(t),new Xl(sc(t),this.parseMatrixParams())}parseMatrixParams(){const t={};for(;this.consumeOptional(";");)this.parseParam(t);return t}parseParam(t){const e=lc(this.remaining);if(!e)return;this.capture(e);let n="";if(this.consumeOptional("=")){const t=lc(this.remaining);t&&(n=t,this.capture(n))}t[sc(e)]=sc(n)}parseQueryParam(t){const e=function(t){const e=t.match(cc);return e?e[0]:""}(this.remaining);if(!e)return;this.capture(e);let n="";if(this.consumeOptional("=")){const t=function(t){const e=t.match(hc);return e?e[0]:""}(this.remaining);t&&(n=t,this.capture(n))}const r=ac(e),o=ac(n);if(t.hasOwnProperty(r)){let e=t[r];Array.isArray(e)||(e=[e],t[r]=e),e.push(o)}else t[r]=o}parseParens(t){const e={};for(this.capture("(");!this.consumeOptional(")")&&this.remaining.length>0;){const n=lc(this.remaining),r=this.remaining[n.length];if("/"!==r&&")"!==r&&";"!==r)throw new Error(`Cannot parse url '${this.url}'`);let o=void 0;n.indexOf(":")>-1?(o=n.substr(0,n.indexOf(":")),this.capture(o),this.capture(":")):t&&(o="primary");const i=this.parseChildren();e[o]=1===Object.keys(i).length?i.primary:new Yl([],i),this.consumeOptional("//")}return e}peekStartsWith(t){return this.remaining.startsWith(t)}consumeOptional(t){return!!this.peekStartsWith(t)&&(this.remaining=this.remaining.substring(t.length),!0)}capture(t){if(!this.consumeOptional(t))throw new Error(`Expected "${t}".`)}}class pc{constructor(t){this._root=t}get root(){return this._root.value}parent(t){const e=this.pathFromRoot(t);return e.length>1?e[e.length-2]:null}children(t){const e=gc(t,this._root);return e?e.children.map(t=>t.value):[]}firstChild(t){const e=gc(t,this._root);return e&&e.children.length>0?e.children[0].value:null}siblings(t){const e=fc(t,this._root);return e.length<2?[]:e[e.length-2].children.map(t=>t.value).filter(e=>e!==t)}pathFromRoot(t){return fc(t,this._root).map(t=>t.value)}}function gc(t,e){if(t===e.value)return e;for(const n of e.children){const e=gc(t,n);if(e)return e}return null}function fc(t,e){if(t===e.value)return[e];for(const n of e.children){const r=fc(t,n);if(r.length)return r.unshift(e),r}return[]}class Fc{constructor(t,e){this.value=t,this.children=e}toString(){return`TreeNode(${this.value})`}}function Uc(t){const e={};return t&&t.children.forEach(t=>e[t.value.outlet]=t),e}class Rc extends pc{constructor(t,e){super(t),this.snapshot=e,kc(this,t)}toString(){return this.snapshot.toString()}}function bc(t,e){const n=function(t,e){const n=new wc([],{},{},"",{},"primary",e,null,t.root,-1,{});return new mc("",new Fc(n,[]))}(t,e),r=new Su([new Xl("",{})]),o=new Su({}),i=new Su({}),s=new Su({}),a=new Su(""),A=new Kc(r,o,s,a,i,"primary",e,n.root);return A.snapshot=n.root,new Rc(new Fc(A,[]),n)}class Kc{constructor(t,e,n,r,o,i,s,a){this.url=t,this.params=e,this.queryParams=n,this.fragment=r,this.data=o,this.outlet=i,this.component=s,this._futureSnapshot=a}get routeConfig(){return this._futureSnapshot.routeConfig}get root(){return this._routerState.root}get parent(){return this._routerState.parent(this)}get firstChild(){return this._routerState.firstChild(this)}get children(){return this._routerState.children(this)}get pathFromRoot(){return this._routerState.pathFromRoot(this)}get paramMap(){return this._paramMap||(this._paramMap=this.params.pipe(O(t=>Il(t)))),this._paramMap}get queryParamMap(){return this._queryParamMap||(this._queryParamMap=this.queryParams.pipe(O(t=>Il(t)))),this._queryParamMap}toString(){return this.snapshot?this.snapshot.toString():`Future(${this._futureSnapshot})`}}function yc(t,e="emptyOnly"){const n=t.pathFromRoot;let r=0;if("always"!==e)for(r=n.length-1;r>=1;){const t=n[r],e=n[r-1];if(t.routeConfig&&""===t.routeConfig.path)r--;else{if(e.component)break;r--}}return function(t){return t.reduce((t,e)=>({params:Object.assign(Object.assign({},t.params),e.params),data:Object.assign(Object.assign({},t.data),e.data),resolve:Object.assign(Object.assign({},t.resolve),e._resolvedData)}),{params:{},data:{},resolve:{}})}(n.slice(r))}class wc{constructor(t,e,n,r,o,i,s,a,A,u,l){this.url=t,this.params=e,this.queryParams=n,this.fragment=r,this.data=o,this.outlet=i,this.component=s,this.routeConfig=a,this._urlSegment=A,this._lastPathIndex=u,this._resolve=l}get root(){return this._routerState.root}get parent(){return this._routerState.parent(this)}get firstChild(){return this._routerState.firstChild(this)}get children(){return this._routerState.children(this)}get pathFromRoot(){return this._routerState.pathFromRoot(this)}get paramMap(){return this._paramMap||(this._paramMap=Il(this.params)),this._paramMap}get queryParamMap(){return this._queryParamMap||(this._queryParamMap=Il(this.queryParams)),this._queryParamMap}toString(){return`Route(url:'${this.url.map(t=>t.toString()).join("/")}', path:'${this.routeConfig?this.routeConfig.path:""}')`}}class mc extends pc{constructor(t,e){super(e),this.url=t,kc(this,e)}toString(){return xc(this._root)}}function kc(t,e){e.value._routerState=t,e.children.forEach(e=>kc(t,e))}function xc(t){const e=t.children.length>0?` { ${t.children.map(xc).join(", ")} } `:"";return`${t.value}${e}`}function Sc(t){if(t.snapshot){const e=t.snapshot,n=t._futureSnapshot;t.snapshot=n,Ll(e.queryParams,n.queryParams)||t.queryParams.next(n.queryParams),e.fragment!==n.fragment&&t.fragment.next(n.fragment),Ll(e.params,n.params)||t.params.next(n.params),function(t,e){if(t.length!==e.length)return!1;for(let n=0;n<t.length;++n)if(!Ll(t[n],e[n]))return!1;return!0}(e.url,n.url)||t.url.next(n.url),Ll(e.data,n.data)||t.data.next(n.data)}else t.snapshot=t._futureSnapshot,t.data.next(t._futureSnapshot.data)}function Cc(t,e){var n,r;return Ll(t.params,e.params)&&ql(n=t.url,r=e.url)&&n.every((t,e)=>Ll(t.parameters,r[e].parameters))&&!(!t.parent!=!e.parent)&&(!t.parent||Cc(t.parent,e.parent))}function jc(t){return"object"==typeof t&&null!=t&&!t.outlets&&!t.segmentPath}function Bc(t,e,n,r,o){let i={};return r&&El(r,(t,e)=>{i[e]=Array.isArray(t)?t.map(t=>""+t):""+t}),new Vl(n.root===t?e:function t(e,n,r){const o={};return El(e.children,(e,i)=>{o[i]=e===n?r:t(e,n,r)}),new Yl(e.segments,o)}(n.root,t,e),i,o)}class vc{constructor(t,e,n){if(this.isAbsolute=t,this.numberOfDoubleDots=e,this.commands=n,t&&n.length>0&&jc(n[0]))throw new Error("Root segment cannot have matrix parameters");const r=n.find(t=>"object"==typeof t&&null!=t&&t.outlets);if(r&&r!==Tl(n))throw new Error("{outlets:{}} has to be the last command")}toRoot(){return this.isAbsolute&&1===this.commands.length&&"/"==this.commands[0]}}class Wc{constructor(t,e,n){this.segmentGroup=t,this.processChildren=e,this.index=n}}function Ic(t){return"object"==typeof t&&null!=t&&t.outlets?t.outlets.primary:""+t}function Dc(t,e,n){if(t||(t=new Yl([],{})),0===t.segments.length&&t.hasChildren())return Oc(t,e,n);const r=function(t,e,n){let r=0,o=e;const i={match:!1,pathIndex:0,commandIndex:0};for(;o<t.segments.length;){if(r>=n.length)return i;const e=t.segments[o],s=Ic(n[r]),a=r<n.length-1?n[r+1]:null;if(o>0&&void 0===s)break;if(s&&a&&"object"==typeof a&&void 0===a.outlets){if(!Nc(s,a,e))return i;r+=2}else{if(!Nc(s,{},e))return i;r++}o++}return{match:!0,pathIndex:o,commandIndex:r}}(t,e,n),o=n.slice(r.commandIndex);if(r.match&&r.pathIndex<t.segments.length){const e=new Yl(t.segments.slice(0,r.pathIndex),{});return e.children.primary=new Yl(t.segments.slice(r.pathIndex),t.children),Oc(e,0,o)}return r.match&&0===o.length?new Yl(t.segments,{}):r.match&&!t.hasChildren()?Gc(t,e,n):r.match?Oc(t,0,o):Gc(t,e,n)}function Oc(t,e,n){if(0===n.length)return new Yl(t.segments,{});{const r=function(t){return"object"==typeof t[0]&&null!==t[0]&&t[0].outlets?t[0].outlets:{primary:t}}(n),o={};return El(r,(n,r)=>{null!==n&&(o[r]=Dc(t.children[r],e,n))}),El(t.children,(t,e)=>{void 0===r[e]&&(o[e]=t)}),new Yl(t.segments,o)}}function Gc(t,e,n){const r=t.segments.slice(0,e);let o=0;for(;o<n.length;){if("object"==typeof n[o]&&null!==n[o]&&void 0!==n[o].outlets){const t=Pc(n[o].outlets);return new Yl(r,t)}if(0===o&&jc(n[0])){r.push(new Xl(t.segments[e].path,n[0])),o++;continue}const i=Ic(n[o]),s=o<n.length-1?n[o+1]:null;i&&s&&jc(s)?(r.push(new Xl(i,Hc(s))),o+=2):(r.push(new Xl(i,{})),o++)}return new Yl(r,{})}function Pc(t){const e={};return El(t,(t,n)=>{null!==t&&(e[n]=Gc(new Yl([],{}),0,t))}),e}function Hc(t){const e={};return El(t,(t,n)=>e[n]=""+t),e}function Nc(t,e,n){return t==n.path&&Ll(e,n.parameters)}class Mc{constructor(t,e,n,r){this.routeReuseStrategy=t,this.futureState=e,this.currState=n,this.forwardEvent=r}activate(t){const e=this.futureState._root,n=this.currState?this.currState._root:null;this.deactivateChildRoutes(e,n,t),Sc(this.futureState.root),this.activateChildRoutes(e,n,t)}deactivateChildRoutes(t,e,n){const r=Uc(e);t.children.forEach(t=>{const e=t.value.outlet;this.deactivateRoutes(t,r[e],n),delete r[e]}),El(r,(t,e)=>{this.deactivateRouteAndItsChildren(t,n)})}deactivateRoutes(t,e,n){const r=t.value,o=e?e.value:null;if(r===o)if(r.component){const o=n.getContext(r.outlet);o&&this.deactivateChildRoutes(t,e,o.children)}else this.deactivateChildRoutes(t,e,n);else o&&this.deactivateRouteAndItsChildren(e,n)}deactivateRouteAndItsChildren(t,e){this.routeReuseStrategy.shouldDetach(t.value.snapshot)?this.detachAndStoreRouteSubtree(t,e):this.deactivateRouteAndOutlet(t,e)}detachAndStoreRouteSubtree(t,e){const n=e.getContext(t.value.outlet);if(n&&n.outlet){const e=n.outlet.detach(),r=n.children.onOutletDeactivated();this.routeReuseStrategy.store(t.value.snapshot,{componentRef:e,route:t,contexts:r})}}deactivateRouteAndOutlet(t,e){const n=e.getContext(t.value.outlet);if(n){const r=Uc(t),o=t.value.component?n.children:e;El(r,(t,e)=>this.deactivateRouteAndItsChildren(t,o)),n.outlet&&(n.outlet.deactivate(),n.children.onOutletDeactivated())}}activateChildRoutes(t,e,n){const r=Uc(e);t.children.forEach(t=>{this.activateRoutes(t,r[t.value.outlet],n),this.forwardEvent(new jl(t.value.snapshot))}),t.children.length&&this.forwardEvent(new Sl(t.value.snapshot))}activateRoutes(t,e,n){const r=t.value,o=e?e.value:null;if(Sc(r),r===o)if(r.component){const o=n.getOrCreateContext(r.outlet);this.activateChildRoutes(t,e,o.children)}else this.activateChildRoutes(t,e,n);else if(r.component){const e=n.getOrCreateContext(r.outlet);if(this.routeReuseStrategy.shouldAttach(r.snapshot)){const t=this.routeReuseStrategy.retrieve(r.snapshot);this.routeReuseStrategy.store(r.snapshot,null),e.children.onOutletReAttached(t.contexts),e.attachRef=t.componentRef,e.route=t.route.value,e.outlet&&e.outlet.attach(t.componentRef,t.route.value),Lc(t.route)}else{const n=function(t){for(let e=t.parent;e;e=e.parent){const t=e.routeConfig;if(t&&t._loadedConfig)return t._loadedConfig;if(t&&t.component)return null}return null}(r.snapshot),o=n?n.module.componentFactoryResolver:null;e.attachRef=null,e.route=r,e.resolver=o,e.outlet&&e.outlet.activateWith(r,o),this.activateChildRoutes(t,null,e.children)}}else this.activateChildRoutes(t,null,n)}}function Lc(t){Sc(t.value),t.children.forEach(Lc)}function Jc(t){return"function"==typeof t}function Qc(t){return t instanceof Vl}class Tc{constructor(t){this.segmentGroup=t||null}}class Ec{constructor(t){this.urlTree=t}}function Zc(t){return new U(e=>e.error(new Tc(t)))}function zc(t){return new U(e=>e.error(new Ec(t)))}function Vc(t){return new U(e=>e.error(new Error(`Only absolute redirects can have named outlets. redirectTo: '${t}'`)))}class Yc{constructor(t,e,n,r,o){this.configLoader=e,this.urlSerializer=n,this.urlTree=r,this.config=o,this.allowRedirects=!0,this.ngModule=t.get(zt)}apply(){return this.expandSegmentGroup(this.ngModule,this.config,this.urlTree.root,"primary").pipe(O(t=>this.createUrlTree(t,this.urlTree.queryParams,this.urlTree.fragment))).pipe(zu(t=>{if(t instanceof Ec)return this.allowRedirects=!1,this.match(t.urlTree);if(t instanceof Tc)throw this.noMatchError(t);throw t}))}match(t){return this.expandSegmentGroup(this.ngModule,this.config,t.root,"primary").pipe(O(e=>this.createUrlTree(e,t.queryParams,t.fragment))).pipe(zu(t=>{if(t instanceof Tc)throw this.noMatchError(t);throw t}))}noMatchError(t){return new Error(`Cannot match any routes. URL Segment: '${t.segmentGroup}'`)}createUrlTree(t,e,n){const r=t.segments.length>0?new Yl([],{primary:t}):t;return new Vl(r,e,n)}expandSegmentGroup(t,e,n,r){return 0===n.segments.length&&n.hasChildren()?this.expandChildren(t,e,n).pipe(O(t=>new Yl([],t))):this.expandSegment(t,n,e,n.segments,r,!0)}expandChildren(t,e,n){return function(t,e){if(0===Object.keys(t).length)return Ha({});const n=[],r=[],o={};return El(t,(t,i)=>{const s=e(i,t).pipe(O(t=>o[i]=t));"primary"===i?n.push(s):r.push(s)}),Ha.apply(null,n.concat(r)).pipe(Ou(),function(t,e){const n=arguments.length>=2;return r=>r.pipe(t?Ma((e,n)=>t(e,n,r)):F,Pu(1),n?Tu(e):Mu(()=>new Cu))}(),O(()=>o))}(n.children,(n,r)=>this.expandSegmentGroup(t,e,r,n))}expandSegment(t,e,n,r,o,i){return Ha(...n).pipe(O(s=>this.expandSegmentAgainstRoute(t,e,n,s,r,o,i).pipe(zu(t=>{if(t instanceof Tc)return Ha(null);throw t}))),Ou(),$u(t=>!!t),zu((t,n)=>{if(t instanceof Cu||"EmptyError"===t.name){if(this.noLeftoversInUrl(e,r,o))return Ha(new Yl([],{}));throw new Tc(e)}throw t}))}noLeftoversInUrl(t,e,n){return 0===e.length&&!t.children[n]}expandSegmentAgainstRoute(t,e,n,r,o,i,s){return $c(r)!==i?Zc(e):void 0===r.redirectTo?this.matchSegmentAgainstRoute(t,e,r,o):s&&this.allowRedirects?this.expandSegmentAgainstRouteUsingRedirect(t,e,n,r,o,i):Zc(e)}expandSegmentAgainstRouteUsingRedirect(t,e,n,r,o,i){return"**"===r.path?this.expandWildCardWithParamsAgainstRouteUsingRedirect(t,n,r,i):this.expandRegularSegmentAgainstRouteUsingRedirect(t,e,n,r,o,i)}expandWildCardWithParamsAgainstRouteUsingRedirect(t,e,n,r){const o=this.applyRedirectCommands([],n.redirectTo,{});return n.redirectTo.startsWith("/")?zc(o):this.lineralizeSegments(n,o).pipe(M(n=>{const o=new Yl(n,{});return this.expandSegment(t,o,e,n,r,!1)}))}expandRegularSegmentAgainstRouteUsingRedirect(t,e,n,r,o,i){const{matched:s,consumedSegments:a,lastChild:A,positionalParamSegments:u}=Xc(e,r,o);if(!s)return Zc(e);const l=this.applyRedirectCommands(a,r.redirectTo,u);return r.redirectTo.startsWith("/")?zc(l):this.lineralizeSegments(r,l).pipe(M(r=>this.expandSegment(t,e,n,r.concat(o.slice(A)),i,!1)))}matchSegmentAgainstRoute(t,e,n,r){if("**"===n.path)return n.loadChildren?this.configLoader.load(t.injector,n).pipe(O(t=>(n._loadedConfig=t,new Yl(r,{})))):Ha(new Yl(r,{}));const{matched:o,consumedSegments:i,lastChild:s}=Xc(e,n,r);if(!o)return Zc(e);const a=r.slice(s);return this.getChildConfig(t,n,r).pipe(M(t=>{const n=t.module,r=t.routes,{segmentGroup:o,slicedSegments:s}=function(t,e,n,r){return n.length>0&&function(t,e,n){return n.some(n=>_c(t,e,n)&&"primary"!==$c(n))}(t,n,r)?{segmentGroup:qc(new Yl(e,function(t,e){const n={};n.primary=e;for(const r of t)""===r.path&&"primary"!==$c(r)&&(n[$c(r)]=new Yl([],{}));return n}(r,new Yl(n,t.children)))),slicedSegments:[]}:0===n.length&&function(t,e,n){return n.some(n=>_c(t,e,n))}(t,n,r)?{segmentGroup:qc(new Yl(t.segments,function(t,e,n,r){const o={};for(const i of n)_c(t,e,i)&&!r[$c(i)]&&(o[$c(i)]=new Yl([],{}));return Object.assign(Object.assign({},r),o)}(t,n,r,t.children))),slicedSegments:n}:{segmentGroup:t,slicedSegments:n}}(e,i,a,r);return 0===s.length&&o.hasChildren()?this.expandChildren(n,r,o).pipe(O(t=>new Yl(i,t))):0===r.length&&0===s.length?Ha(new Yl(i,{})):this.expandSegment(n,o,r,s,"primary",!0).pipe(O(t=>new Yl(i.concat(t.segments),t.children)))}))}getChildConfig(t,e,n){return e.children?Ha(new Gl(e.children,t)):e.loadChildren?void 0!==e._loadedConfig?Ha(e._loadedConfig):this.runCanLoadGuards(t.injector,e,n).pipe(M(n=>n?this.configLoader.load(t.injector,e).pipe(O(t=>(e._loadedConfig=t,t))):function(t){return new U(e=>e.error(Dl(`Cannot load children because the guard of the route "path: '${t.path}'" returned false`)))}(e))):Ha(new Gl([],t))}runCanLoadGuards(t,e,n){const r=e.canLoad;return r&&0!==r.length?N(r).pipe(O(r=>{const o=t.get(r);let i;if(function(t){return t&&Jc(t.canLoad)}(o))i=o.canLoad(e,n);else{if(!Jc(o))throw new Error("Invalid CanLoad guard");i=o(e,n)}return Zl(i)})).pipe(Ou(),el(t=>{if(!Qc(t))return;const e=Dl(`Redirecting to "${this.urlSerializer.serialize(t)}"`);throw e.url=t,e}),(o=t=>!0===t,t=>t.lift(new ol(o,void 0,t)))):Ha(!0);var o}lineralizeSegments(t,e){let n=[],r=e.root;for(;;){if(n=n.concat(r.segments),0===r.numberOfChildren)return Ha(n);if(r.numberOfChildren>1||!r.children.primary)return Vc(t.redirectTo);r=r.children.primary}}applyRedirectCommands(t,e,n){return this.applyRedirectCreatreUrlTree(e,this.urlSerializer.parse(e),t,n)}applyRedirectCreatreUrlTree(t,e,n,r){const o=this.createSegmentGroup(t,e.root,n,r);return new Vl(o,this.createQueryParams(e.queryParams,this.urlTree.queryParams),e.fragment)}createQueryParams(t,e){const n={};return El(t,(t,r)=>{if("string"==typeof t&&t.startsWith(":")){const o=t.substring(1);n[r]=e[o]}else n[r]=t}),n}createSegmentGroup(t,e,n,r){const o=this.createSegments(t,e.segments,n,r);let i={};return El(e.children,(e,o)=>{i[o]=this.createSegmentGroup(t,e,n,r)}),new Yl(o,i)}createSegments(t,e,n,r){return e.map(e=>e.path.startsWith(":")?this.findPosParam(t,e,r):this.findOrReturn(e,n))}findPosParam(t,e,n){const r=n[e.path.substring(1)];if(!r)throw new Error(`Cannot redirect to '${t}'. Cannot find '${e.path}'.`);return r}findOrReturn(t,e){let n=0;for(const r of e){if(r.path===t.path)return e.splice(n),r;n++}return t}}function Xc(t,e,n){if(""===e.path)return"full"===e.pathMatch&&(t.hasChildren()||n.length>0)?{matched:!1,consumedSegments:[],lastChild:0,positionalParamSegments:{}}:{matched:!0,consumedSegments:[],lastChild:0,positionalParamSegments:{}};const r=(e.matcher||Ol)(n,t,e);return r?{matched:!0,consumedSegments:r.consumed,lastChild:r.consumed.length,positionalParamSegments:r.posParams}:{matched:!1,consumedSegments:[],lastChild:0,positionalParamSegments:{}}}function qc(t){if(1===t.numberOfChildren&&t.children.primary){const e=t.children.primary;return new Yl(t.segments.concat(e.segments),e.children)}return t}function _c(t,e,n){return(!(t.hasChildren()||e.length>0)||"full"!==n.pathMatch)&&""===n.path&&void 0!==n.redirectTo}function $c(t){return t.outlet||"primary"}class th{constructor(t){this.path=t,this.route=this.path[this.path.length-1]}}class eh{constructor(t,e){this.component=t,this.route=e}}function nh(t,e,n){const r=t._root;return function t(e,n,r,o,i={canDeactivateChecks:[],canActivateChecks:[]}){const s=Uc(n);return e.children.forEach(e=>{!function(e,n,r,o,i={canDeactivateChecks:[],canActivateChecks:[]}){const s=e.value,a=n?n.value:null,A=r?r.getContext(e.value.outlet):null;if(a&&s.routeConfig===a.routeConfig){const u=function(t,e,n){if("function"==typeof n)return n(t,e);switch(n){case"pathParamsChange":return!ql(t.url,e.url);case"pathParamsOrQueryParamsChange":return!ql(t.url,e.url)||!Ll(t.queryParams,e.queryParams);case"always":return!0;case"paramsOrQueryParamsChange":return!Cc(t,e)||!Ll(t.queryParams,e.queryParams);case"paramsChange":default:return!Cc(t,e)}}(a,s,s.routeConfig.runGuardsAndResolvers);u?i.canActivateChecks.push(new th(o)):(s.data=a.data,s._resolvedData=a._resolvedData),t(e,n,s.component?A?A.children:null:r,o,i),u&&i.canDeactivateChecks.push(new eh(A&&A.outlet&&A.outlet.component||null,a))}else a&&oh(n,A,i),i.canActivateChecks.push(new th(o)),t(e,null,s.component?A?A.children:null:r,o,i)}(e,s[e.value.outlet],r,o.concat([e.value]),i),delete s[e.value.outlet]}),El(s,(t,e)=>oh(t,r.getContext(e),i)),i}(r,e?e._root:null,n,[r.value])}function rh(t,e,n){const r=function(t){if(!t)return null;for(let e=t.parent;e;e=e.parent){const t=e.routeConfig;if(t&&t._loadedConfig)return t._loadedConfig}return null}(e);return(r?r.module.injector:n).get(t)}function oh(t,e,n){const r=Uc(t),o=t.value;El(r,(t,r)=>{oh(t,o.component?e?e.children.getContext(r):null:e,n)}),n.canDeactivateChecks.push(new eh(o.component&&e&&e.outlet&&e.outlet.isActivated?e.outlet.component:null,o))}const ih=Symbol("INITIAL_VALUE");function sh(){return sl(t=>function(...t){let e=null,n=null;return k(t[t.length-1])&&(n=t.pop()),"function"==typeof t[t.length-1]&&(e=t.pop()),1===t.length&&A(t[0])&&(t=t[0]),T(t,n).lift(new Bu(e))}(...t.map(t=>t.pipe(Xu(1),function(...t){const e=t[t.length-1];return k(e)?(t.pop(),n=>ul(t,n,e)):e=>ul(t,e)}(ih)))).pipe(function(t,e){let n=!1;return arguments.length>=2&&(n=!0),function(r){return r.lift(new ll(t,e,n))}}((t,e)=>{let n=!1;return e.reduce((t,r,o)=>{if(t!==ih)return t;if(r===ih&&(n=!0),!n){if(!1===r)return r;if(o===e.length-1||Qc(r))return r}return t},t)},ih),Ma(t=>t!==ih),O(t=>Qc(t)?t:!0===t),Xu(1)))}function ah(t,e){return null!==t&&e&&e(new Cl(t)),Ha(!0)}function Ah(t,e){return null!==t&&e&&e(new xl(t)),Ha(!0)}function uh(t,e,n){const r=e.routeConfig?e.routeConfig.canActivate:null;return r&&0!==r.length?Ha(r.map(r=>Du(()=>{const o=rh(r,e,n);let i;if(function(t){return t&&Jc(t.canActivate)}(o))i=Zl(o.canActivate(e,t));else{if(!Jc(o))throw new Error("Invalid CanActivate guard");i=Zl(o(e,t))}return i.pipe($u())}))).pipe(sh()):Ha(!0)}function lh(t,e,n){const r=e[e.length-1],o=e.slice(0,e.length-1).reverse().map(t=>function(t){const e=t.routeConfig?t.routeConfig.canActivateChild:null;return e&&0!==e.length?{node:t,guards:e}:null}(t)).filter(t=>null!==t).map(e=>Du(()=>Ha(e.guards.map(o=>{const i=rh(o,e.node,n);let s;if(function(t){return t&&Jc(t.canActivateChild)}(i))s=Zl(i.canActivateChild(r,t));else{if(!Jc(i))throw new Error("Invalid CanActivateChild guard");s=Zl(i(r,t))}return s.pipe($u())})).pipe(sh())));return Ha(o).pipe(sh())}class ch{}class hh{constructor(t,e,n,r,o,i){this.rootComponentType=t,this.config=e,this.urlTree=n,this.url=r,this.paramsInheritanceStrategy=o,this.relativeLinkResolution=i}recognize(){try{const t=gh(this.urlTree.root,[],[],this.config,this.relativeLinkResolution).segmentGroup,e=this.processSegmentGroup(this.config,t,"primary"),n=new wc([],Object.freeze({}),Object.freeze(Object.assign({},this.urlTree.queryParams)),this.urlTree.fragment,{},"primary",this.rootComponentType,null,this.urlTree.root,-1,{}),r=new Fc(n,e),o=new mc(this.url,r);return this.inheritParamsAndData(o._root),Ha(o)}catch(t){return new U(e=>e.error(t))}}inheritParamsAndData(t){const e=t.value,n=yc(e,this.paramsInheritanceStrategy);e.params=Object.freeze(n.params),e.data=Object.freeze(n.data),t.children.forEach(t=>this.inheritParamsAndData(t))}processSegmentGroup(t,e,n){return 0===e.segments.length&&e.hasChildren()?this.processChildren(t,e):this.processSegment(t,e,e.segments,n)}processChildren(t,e){const n=_l(e,(e,n)=>this.processSegmentGroup(t,e,n));return function(t){const e={};t.forEach(t=>{const n=e[t.value.outlet];if(n){const e=n.url.map(t=>t.toString()).join("/"),r=t.value.url.map(t=>t.toString()).join("/");throw new Error(`Two segments cannot have the same outlet name: '${e}' and '${r}'.`)}e[t.value.outlet]=t.value})}(n),n.sort((t,e)=>"primary"===t.value.outlet?-1:"primary"===e.value.outlet?1:t.value.outlet.localeCompare(e.value.outlet)),n}processSegment(t,e,n,r){for(const i of t)try{return this.processSegmentAgainstRoute(i,e,n,r)}catch(o){if(!(o instanceof ch))throw o}if(this.noLeftoversInUrl(e,n,r))return[];throw new ch}noLeftoversInUrl(t,e,n){return 0===e.length&&!t.children[n]}processSegmentAgainstRoute(t,e,n,r){if(t.redirectTo)throw new ch;if((t.outlet||"primary")!==r)throw new ch;let o,i=[],s=[];if("**"===t.path){const i=n.length>0?Tl(n).parameters:{};o=new wc(n,i,Object.freeze(Object.assign({},this.urlTree.queryParams)),this.urlTree.fragment,Uh(t),r,t.component,t,dh(e),ph(e)+n.length,Rh(t))}else{const a=function(t,e,n){if(""===e.path){if("full"===e.pathMatch&&(t.hasChildren()||n.length>0))throw new ch;return{consumedSegments:[],lastChild:0,parameters:{}}}const r=(e.matcher||Ol)(n,t,e);if(!r)throw new ch;const o={};El(r.posParams,(t,e)=>{o[e]=t.path});const i=r.consumed.length>0?Object.assign(Object.assign({},o),r.consumed[r.consumed.length-1].parameters):o;return{consumedSegments:r.consumed,lastChild:r.consumed.length,parameters:i}}(e,t,n);i=a.consumedSegments,s=n.slice(a.lastChild),o=new wc(i,a.parameters,Object.freeze(Object.assign({},this.urlTree.queryParams)),this.urlTree.fragment,Uh(t),r,t.component,t,dh(e),ph(e)+i.length,Rh(t))}const a=function(t){return t.children?t.children:t.loadChildren?t._loadedConfig.routes:[]}(t),{segmentGroup:A,slicedSegments:u}=gh(e,i,s,a,this.relativeLinkResolution);if(0===u.length&&A.hasChildren()){const t=this.processChildren(a,A);return[new Fc(o,t)]}if(0===a.length&&0===u.length)return[new Fc(o,[])];const l=this.processSegment(a,A,u,"primary");return[new Fc(o,l)]}}function dh(t){let e=t;for(;e._sourceSegment;)e=e._sourceSegment;return e}function ph(t){let e=t,n=e._segmentIndexShift?e._segmentIndexShift:0;for(;e._sourceSegment;)e=e._sourceSegment,n+=e._segmentIndexShift?e._segmentIndexShift:0;return n-1}function gh(t,e,n,r,o){if(n.length>0&&function(t,e,n){return n.some(n=>fh(t,e,n)&&"primary"!==Fh(n))}(t,n,r)){const o=new Yl(e,function(t,e,n,r){const o={};o.primary=r,r._sourceSegment=t,r._segmentIndexShift=e.length;for(const i of n)if(""===i.path&&"primary"!==Fh(i)){const n=new Yl([],{});n._sourceSegment=t,n._segmentIndexShift=e.length,o[Fh(i)]=n}return o}(t,e,r,new Yl(n,t.children)));return o._sourceSegment=t,o._segmentIndexShift=e.length,{segmentGroup:o,slicedSegments:[]}}if(0===n.length&&function(t,e,n){return n.some(n=>fh(t,e,n))}(t,n,r)){const i=new Yl(t.segments,function(t,e,n,r,o,i){const s={};for(const a of r)if(fh(t,n,a)&&!o[Fh(a)]){const n=new Yl([],{});n._sourceSegment=t,n._segmentIndexShift="legacy"===i?t.segments.length:e.length,s[Fh(a)]=n}return Object.assign(Object.assign({},o),s)}(t,e,n,r,t.children,o));return i._sourceSegment=t,i._segmentIndexShift=e.length,{segmentGroup:i,slicedSegments:n}}const i=new Yl(t.segments,t.children);return i._sourceSegment=t,i._segmentIndexShift=e.length,{segmentGroup:i,slicedSegments:n}}function fh(t,e,n){return(!(t.hasChildren()||e.length>0)||"full"!==n.pathMatch)&&""===n.path&&void 0===n.redirectTo}function Fh(t){return t.outlet||"primary"}function Uh(t){return t.data||{}}function Rh(t){return t.resolve||{}}function bh(t){return function(e){return e.pipe(sl(e=>{const n=t(e);return n?N(n).pipe(O(()=>e)):N([e])}))}}class Kh{shouldDetach(t){return!1}store(t,e){}shouldAttach(t){return!1}retrieve(t){return null}shouldReuseRoute(t,e){return t.routeConfig===e.routeConfig}}const yh=new It("ROUTES");class wh{constructor(t,e,n,r){this.loader=t,this.compiler=e,this.onLoadStartListener=n,this.onLoadEndListener=r}load(t,e){return this.onLoadStartListener&&this.onLoadStartListener(e),this.loadModuleFactory(e.loadChildren).pipe(O(n=>{this.onLoadEndListener&&this.onLoadEndListener(e);const r=n.create(t);return new Gl(Ql(r.injector.get(yh)).map(Ml),r)}))}loadModuleFactory(t){return"string"==typeof t?N(this.loader.load(t)):Zl(t()).pipe(M(t=>t instanceof Vt?Ha(t):N(this.compiler.compileModuleAsync(t))))}}class mh{constructor(){this.outlet=null,this.route=null,this.resolver=null,this.children=new kh,this.attachRef=null}}class kh{constructor(){this.contexts=new Map}onChildOutletCreated(t,e){const n=this.getOrCreateContext(t);n.outlet=e,this.contexts.set(t,n)}onChildOutletDestroyed(t){const e=this.getContext(t);e&&(e.outlet=null)}onOutletDeactivated(){const t=this.contexts;return this.contexts=new Map,t}onOutletReAttached(t){this.contexts=t}getOrCreateContext(t){let e=this.getContext(t);return e||(e=new mh,this.contexts.set(t,e)),e}getContext(t){return this.contexts.get(t)||null}}class xh{shouldProcessUrl(t){return!0}extract(t){return t}merge(t,e){return t}}function Sh(t){throw t}function Ch(t,e,n){return e.parse("/")}function jh(t,e){return Ha(null)}let Bh=(()=>{class t{constructor(t,e,n,r,o,i,s,a){this.rootComponentType=t,this.urlSerializer=e,this.rootContexts=n,this.location=r,this.config=a,this.lastSuccessfulNavigation=null,this.currentNavigation=null,this.navigationId=0,this.isNgZoneEnabled=!1,this.events=new w,this.errorHandler=Sh,this.malformedUriErrorHandler=Ch,this.navigated=!1,this.lastSuccessfulId=-1,this.hooks={beforePreactivation:jh,afterPreactivation:jh},this.urlHandlingStrategy=new xh,this.routeReuseStrategy=new Kh,this.onSameUrlNavigation="ignore",this.paramsInheritanceStrategy="emptyOnly",this.urlUpdateStrategy="deferred",this.relativeLinkResolution="legacy",this.ngModule=o.get(zt),this.console=o.get(Xs);const A=o.get(ua);this.isNgZoneEnabled=A instanceof ua,this.resetConfig(a),this.currentUrlTree=new Vl(new Yl([],{}),{},null),this.rawUrlTree=this.currentUrlTree,this.browserUrlTree=this.currentUrlTree,this.configLoader=new wh(i,s,t=>this.triggerEvent(new ml(t)),t=>this.triggerEvent(new kl(t))),this.routerState=bc(this.currentUrlTree,this.rootComponentType),this.transitions=new Su({id:0,currentUrlTree:this.currentUrlTree,currentRawUrl:this.currentUrlTree,extractedUrl:this.urlHandlingStrategy.extract(this.currentUrlTree),urlAfterRedirects:this.urlHandlingStrategy.extract(this.currentUrlTree),rawUrl:this.currentUrlTree,extras:{},resolve:null,reject:null,promise:Promise.resolve(!0),source:"imperative",restoredState:null,currentSnapshot:this.routerState.snapshot,targetSnapshot:null,currentRouterState:this.routerState,targetRouterState:null,guards:{canActivateChecks:[],canDeactivateChecks:[]},guardsResult:null}),this.navigations=this.setupNavigations(this.transitions),this.processNavigations()}setupNavigations(t){const e=this.events;return t.pipe(Ma(t=>0!==t.id),O(t=>Object.assign(Object.assign({},t),{extractedUrl:this.urlHandlingStrategy.extract(t.rawUrl)})),sl(t=>{let n=!1,r=!1;return Ha(t).pipe(el(t=>{this.currentNavigation={id:t.id,initialUrl:t.currentRawUrl,extractedUrl:t.extractedUrl,trigger:t.source,extras:t.extras,previousNavigation:this.lastSuccessfulNavigation?Object.assign(Object.assign({},this.lastSuccessfulNavigation),{previousNavigation:null}):null}}),sl(t=>{const n=!this.navigated||t.extractedUrl.toString()!==this.browserUrlTree.toString();if(("reload"===this.onSameUrlNavigation||n)&&this.urlHandlingStrategy.shouldProcessUrl(t.rawUrl))return Ha(t).pipe(sl(t=>{const n=this.transitions.getValue();return e.next(new gl(t.id,this.serializeUrl(t.extractedUrl),t.source,t.restoredState)),n!==this.transitions.getValue()?Wu:[t]}),sl(t=>Promise.resolve(t)),(r=this.ngModule.injector,o=this.configLoader,i=this.urlSerializer,s=this.config,function(t){return t.pipe(sl(t=>function(t,e,n,r,o){return new Yc(t,e,n,r,o).apply()}(r,o,i,t.extractedUrl,s).pipe(O(e=>Object.assign(Object.assign({},t),{urlAfterRedirects:e})))))}),el(t=>{this.currentNavigation=Object.assign(Object.assign({},this.currentNavigation),{finalUrl:t.urlAfterRedirects})}),function(t,e,n,r,o){return function(i){return i.pipe(M(i=>function(t,e,n,r,o="emptyOnly",i="legacy"){return new hh(t,e,n,r,o,i).recognize()}(t,e,i.urlAfterRedirects,n(i.urlAfterRedirects),r,o).pipe(O(t=>Object.assign(Object.assign({},i),{targetSnapshot:t})))))}}(this.rootComponentType,this.config,t=>this.serializeUrl(t),this.paramsInheritanceStrategy,this.relativeLinkResolution),el(t=>{"eager"===this.urlUpdateStrategy&&(t.extras.skipLocationChange||this.setBrowserUrl(t.urlAfterRedirects,!!t.extras.replaceUrl,t.id,t.extras.state),this.browserUrlTree=t.urlAfterRedirects)}),el(t=>{const n=new Rl(t.id,this.serializeUrl(t.extractedUrl),this.serializeUrl(t.urlAfterRedirects),t.targetSnapshot);e.next(n)}));var r,o,i,s;if(n&&this.rawUrlTree&&this.urlHandlingStrategy.shouldProcessUrl(this.rawUrlTree)){const{id:n,extractedUrl:r,source:o,restoredState:i,extras:s}=t,a=new gl(n,this.serializeUrl(r),o,i);e.next(a);const A=bc(r,this.rootComponentType).snapshot;return Ha(Object.assign(Object.assign({},t),{targetSnapshot:A,urlAfterRedirects:r,extras:Object.assign(Object.assign({},s),{skipLocationChange:!1,replaceUrl:!1})}))}return this.rawUrlTree=t.rawUrl,this.browserUrlTree=t.urlAfterRedirects,t.resolve(null),Wu}),bh(t=>{const{targetSnapshot:e,id:n,extractedUrl:r,rawUrl:o,extras:{skipLocationChange:i,replaceUrl:s}}=t;return this.hooks.beforePreactivation(e,{navigationId:n,appliedUrlTree:r,rawUrlTree:o,skipLocationChange:!!i,replaceUrl:!!s})}),el(t=>{const e=new bl(t.id,this.serializeUrl(t.extractedUrl),this.serializeUrl(t.urlAfterRedirects),t.targetSnapshot);this.triggerEvent(e)}),O(t=>Object.assign(Object.assign({},t),{guards:nh(t.targetSnapshot,t.currentSnapshot,this.rootContexts)})),function(t,e){return function(n){return n.pipe(M(n=>{const{targetSnapshot:r,currentSnapshot:o,guards:{canActivateChecks:i,canDeactivateChecks:s}}=n;return 0===s.length&&0===i.length?Ha(Object.assign(Object.assign({},n),{guardsResult:!0})):function(t,e,n,r){return N(t).pipe(M(t=>function(t,e,n,r,o){const i=e&&e.routeConfig?e.routeConfig.canDeactivate:null;return i&&0!==i.length?Ha(i.map(i=>{const s=rh(i,e,o);let a;if(function(t){return t&&Jc(t.canDeactivate)}(s))a=Zl(s.canDeactivate(t,e,n,r));else{if(!Jc(s))throw new Error("Invalid CanDeactivate guard");a=Zl(s(t,e,n,r))}return a.pipe($u())})).pipe(sh()):Ha(!0)}(t.component,t.route,n,e,r)),$u(t=>!0!==t,!0))}(s,r,o,t).pipe(M(n=>n&&"boolean"==typeof n?function(t,e,n,r){return N(e).pipe(Na(e=>N([Ah(e.route.parent,r),ah(e.route,r),lh(t,e.path,n),uh(t,e.route,n)]).pipe(Ou(),$u(t=>!0!==t,!0))),$u(t=>!0!==t,!0))}(r,i,t,e):Ha(n)),O(t=>Object.assign(Object.assign({},n),{guardsResult:t})))}))}}(this.ngModule.injector,t=>this.triggerEvent(t)),el(t=>{if(Qc(t.guardsResult)){const e=Dl(`Redirecting to "${this.serializeUrl(t.guardsResult)}"`);throw e.url=t.guardsResult,e}}),el(t=>{const e=new Kl(t.id,this.serializeUrl(t.extractedUrl),this.serializeUrl(t.urlAfterRedirects),t.targetSnapshot,!!t.guardsResult);this.triggerEvent(e)}),Ma(t=>{if(!t.guardsResult){this.resetUrlToCurrentUrlTree();const n=new Fl(t.id,this.serializeUrl(t.extractedUrl),"");return e.next(n),t.resolve(!1),!1}return!0}),bh(t=>{if(t.guards.canActivateChecks.length)return Ha(t).pipe(el(t=>{const e=new yl(t.id,this.serializeUrl(t.extractedUrl),this.serializeUrl(t.urlAfterRedirects),t.targetSnapshot);this.triggerEvent(e)}),sl(t=>{let n=!1;return Ha(t).pipe((r=this.paramsInheritanceStrategy,o=this.ngModule.injector,function(t){return t.pipe(M(t=>{const{targetSnapshot:e,guards:{canActivateChecks:n}}=t;if(!n.length)return Ha(t);let i=0;return N(n).pipe(Na(t=>function(t,e,n,r){return function(t,e,n,r){const o=Object.keys(t);if(0===o.length)return Ha({});const i={};return N(o).pipe(M(o=>function(t,e,n,r){const o=rh(t,e,r);return Zl(o.resolve?o.resolve(e,n):o(e,n))}(t[o],e,n,r).pipe(el(t=>{i[o]=t}))),Pu(1),M(()=>Object.keys(i).length===o.length?Ha(i):Wu))}(t._resolve,t,e,r).pipe(O(e=>(t._resolvedData=e,t.data=Object.assign(Object.assign({},t.data),yc(t,n).resolve),null)))}(t.route,e,r,o)),el(()=>i++),Pu(1),M(e=>i===n.length?Ha(t):Wu))}))}),el({next:()=>n=!0,complete:()=>{if(!n){const n=new Fl(t.id,this.serializeUrl(t.extractedUrl),"At least one route resolver didn't emit any value.");e.next(n),t.resolve(!1)}}}));var r,o}),el(t=>{const e=new wl(t.id,this.serializeUrl(t.extractedUrl),this.serializeUrl(t.urlAfterRedirects),t.targetSnapshot);this.triggerEvent(e)}))}),bh(t=>{const{targetSnapshot:e,id:n,extractedUrl:r,rawUrl:o,extras:{skipLocationChange:i,replaceUrl:s}}=t;return this.hooks.afterPreactivation(e,{navigationId:n,appliedUrlTree:r,rawUrlTree:o,skipLocationChange:!!i,replaceUrl:!!s})}),O(t=>{const e=function(t,e,n){const r=function t(e,n,r){if(r&&e.shouldReuseRoute(n.value,r.value.snapshot)){const o=r.value;o._futureSnapshot=n.value;const i=function(e,n,r){return n.children.map(n=>{for(const o of r.children)if(e.shouldReuseRoute(o.value.snapshot,n.value))return t(e,n,o);return t(e,n)})}(e,n,r);return new Fc(o,i)}{const r=e.retrieve(n.value);if(r){const t=r.route;return function t(e,n){if(e.value.routeConfig!==n.value.routeConfig)throw new Error("Cannot reattach ActivatedRouteSnapshot created from a different route");if(e.children.length!==n.children.length)throw new Error("Cannot reattach ActivatedRouteSnapshot with a different number of children");n.value._futureSnapshot=e.value;for(let r=0;r<e.children.length;++r)t(e.children[r],n.children[r])}(n,t),t}{const r=new Kc(new Su((o=n.value).url),new Su(o.params),new Su(o.queryParams),new Su(o.fragment),new Su(o.data),o.outlet,o.component,o),i=n.children.map(n=>t(e,n));return new Fc(r,i)}}var o}(t,e._root,n?n._root:void 0);return new Rc(r,e)}(this.routeReuseStrategy,t.targetSnapshot,t.currentRouterState);return Object.assign(Object.assign({},t),{targetRouterState:e})}),el(t=>{this.currentUrlTree=t.urlAfterRedirects,this.rawUrlTree=this.urlHandlingStrategy.merge(this.currentUrlTree,t.rawUrl),this.routerState=t.targetRouterState,"deferred"===this.urlUpdateStrategy&&(t.extras.skipLocationChange||this.setBrowserUrl(this.rawUrlTree,!!t.extras.replaceUrl,t.id,t.extras.state),this.browserUrlTree=t.urlAfterRedirects)}),(i=this.rootContexts,s=this.routeReuseStrategy,a=t=>this.triggerEvent(t),O(t=>(new Mc(s,t.targetRouterState,t.currentRouterState,a).activate(i),t))),el({next(){n=!0},complete(){n=!0}}),(o=()=>{if(!n&&!r){this.resetUrlToCurrentUrlTree();const n=new Fl(t.id,this.serializeUrl(t.extractedUrl),`Navigation ID ${t.id} is not equal to the current navigation id ${this.navigationId}`);e.next(n),t.resolve(!1)}this.currentNavigation=null},t=>t.lift(new hl(o))),zu(n=>{if(r=!0,(o=n)&&o.ngNavigationCancelingError){const r=Qc(n.url);r||(this.navigated=!0,this.resetStateAndUrl(t.currentRouterState,t.currentUrlTree,t.rawUrl));const o=new Fl(t.id,this.serializeUrl(t.extractedUrl),n.message);e.next(o),r?setTimeout(()=>{const e=this.urlHandlingStrategy.merge(n.url,this.rawUrlTree);return this.scheduleNavigation(e,"imperative",null,{skipLocationChange:t.extras.skipLocationChange,replaceUrl:"eager"===this.urlUpdateStrategy},{resolve:t.resolve,reject:t.reject,promise:t.promise})},0):t.resolve(!1)}else{this.resetStateAndUrl(t.currentRouterState,t.currentUrlTree,t.rawUrl);const r=new Ul(t.id,this.serializeUrl(t.extractedUrl),n);e.next(r);try{t.resolve(this.errorHandler(n))}catch(i){t.reject(i)}}var o;return Wu}));var o,i,s,a}))}resetRootComponentType(t){this.rootComponentType=t,this.routerState.root.component=this.rootComponentType}getTransition(){const t=this.transitions.value;return t.urlAfterRedirects=this.browserUrlTree,t}setTransition(t){this.transitions.next(Object.assign(Object.assign({},this.getTransition()),t))}initialNavigation(){this.setUpLocationChangeListener(),0===this.navigationId&&this.navigateByUrl(this.location.path(!0),{replaceUrl:!0})}setUpLocationChangeListener(){this.locationSubscription||(this.locationSubscription=this.location.subscribe(t=>{let e=this.parseUrl(t.url);const n="popstate"===t.type?"popstate":"hashchange",r=t.state&&t.state.navigationId?t.state:null;setTimeout(()=>{this.scheduleNavigation(e,n,r,{replaceUrl:!0})},0)}))}get url(){return this.serializeUrl(this.currentUrlTree)}getCurrentNavigation(){return this.currentNavigation}triggerEvent(t){this.events.next(t)}resetConfig(t){Pl(t),this.config=t.map(Ml),this.navigated=!1,this.lastSuccessfulId=-1}ngOnDestroy(){this.dispose()}dispose(){this.locationSubscription&&(this.locationSubscription.unsubscribe(),this.locationSubscription=null)}createUrlTree(t,e={}){const{relativeTo:n,queryParams:r,fragment:o,preserveQueryParams:i,queryParamsHandling:s,preserveFragment:a}=e;Yn()&&i&&console&&console.warn&&console.warn("preserveQueryParams is deprecated, use queryParamsHandling instead.");const A=n||this.routerState.root,u=a?this.currentUrlTree.fragment:o;let l=null;if(s)switch(s){case"merge":l=Object.assign(Object.assign({},this.currentUrlTree.queryParams),r);break;case"preserve":l=this.currentUrlTree.queryParams;break;default:l=r||null}else l=i?this.currentUrlTree.queryParams:r||null;return null!==l&&(l=this.removeEmptyProps(l)),function(t,e,n,r,o){if(0===n.length)return Bc(e.root,e.root,e,r,o);const i=function(t){if("string"==typeof t[0]&&1===t.length&&"/"===t[0])return new vc(!0,0,t);let e=0,n=!1;const r=t.reduce((t,r,o)=>{if("object"==typeof r&&null!=r){if(r.outlets){const e={};return El(r.outlets,(t,n)=>{e[n]="string"==typeof t?t.split("/"):t}),[...t,{outlets:e}]}if(r.segmentPath)return[...t,r.segmentPath]}return"string"!=typeof r?[...t,r]:0===o?(r.split("/").forEach((r,o)=>{0==o&&"."===r||(0==o&&""===r?n=!0:".."===r?e++:""!=r&&t.push(r))}),t):[...t,r]},[]);return new vc(n,e,r)}(n);if(i.toRoot())return Bc(e.root,new Yl([],{}),e,r,o);const s=function(t,e,n){if(t.isAbsolute)return new Wc(e.root,!0,0);if(-1===n.snapshot._lastPathIndex){const t=n.snapshot._urlSegment;return new Wc(t,t===e.root,0)}const r=jc(t.commands[0])?0:1;return function(t,e,n){let r=t,o=e,i=n;for(;i>o;){if(i-=o,r=r.parent,!r)throw new Error("Invalid number of '../'");o=r.segments.length}return new Wc(r,!1,o-i)}(n.snapshot._urlSegment,n.snapshot._lastPathIndex+r,t.numberOfDoubleDots)}(i,e,t),a=s.processChildren?Oc(s.segmentGroup,s.index,i.commands):Dc(s.segmentGroup,s.index,i.commands);return Bc(s.segmentGroup,a,e,r,o)}(A,this.currentUrlTree,t,l,u)}navigateByUrl(t,e={skipLocationChange:!1}){Yn()&&this.isNgZoneEnabled&&!ua.isInAngularZone()&&this.console.warn("Navigation triggered outside Angular zone, did you forget to call 'ngZone.run()'?");const n=Qc(t)?t:this.parseUrl(t),r=this.urlHandlingStrategy.merge(n,this.rawUrlTree);return this.scheduleNavigation(r,"imperative",null,e)}navigate(t,e={skipLocationChange:!1}){return function(t){for(let e=0;e<t.length;e++){const n=t[e];if(null==n)throw new Error(`The requested path contains ${n} segment at index ${e}`)}}(t),this.navigateByUrl(this.createUrlTree(t,e),e)}serializeUrl(t){return this.urlSerializer.serialize(t)}parseUrl(t){let e;try{e=this.urlSerializer.parse(t)}catch(n){e=this.malformedUriErrorHandler(n,this.urlSerializer,t)}return e}isActive(t,e){if(Qc(t))return zl(this.currentUrlTree,t,e);const n=this.parseUrl(t);return zl(this.currentUrlTree,n,e)}removeEmptyProps(t){return Object.keys(t).reduce((e,n)=>{const r=t[n];return null!=r&&(e[n]=r),e},{})}processNavigations(){this.navigations.subscribe(t=>{this.navigated=!0,this.lastSuccessfulId=t.id,this.events.next(new fl(t.id,this.serializeUrl(t.extractedUrl),this.serializeUrl(this.currentUrlTree))),this.lastSuccessfulNavigation=this.currentNavigation,this.currentNavigation=null,t.resolve(!0)},t=>{this.console.warn("Unhandled Navigation Error: ")})}scheduleNavigation(t,e,n,r,o){const i=this.getTransition();if(i&&"imperative"!==e&&"imperative"===i.source&&i.rawUrl.toString()===t.toString())return Promise.resolve(!0);if(i&&"hashchange"==e&&"popstate"===i.source&&i.rawUrl.toString()===t.toString())return Promise.resolve(!0);if(i&&"popstate"==e&&"hashchange"===i.source&&i.rawUrl.toString()===t.toString())return Promise.resolve(!0);let s,a,A;o?(s=o.resolve,a=o.reject,A=o.promise):A=new Promise((t,e)=>{s=t,a=e});const u=++this.navigationId;return this.setTransition({id:u,source:e,restoredState:n,currentUrlTree:this.currentUrlTree,currentRawUrl:this.rawUrlTree,rawUrl:t,extras:r,resolve:s,reject:a,promise:A,currentSnapshot:this.routerState.snapshot,currentRouterState:this.routerState}),A.catch(t=>Promise.reject(t))}setBrowserUrl(t,e,n,r){const o=this.urlSerializer.serialize(t);r=r||{},this.location.isCurrentPathEqualTo(o)||e?this.location.replaceState(o,"",Object.assign(Object.assign({},r),{navigationId:n})):this.location.go(o,"",Object.assign(Object.assign({},r),{navigationId:n}))}resetStateAndUrl(t,e,n){this.routerState=t,this.currentUrlTree=e,this.rawUrlTree=this.urlHandlingStrategy.merge(this.currentUrlTree,n),this.resetUrlToCurrentUrlTree()}resetUrlToCurrentUrlTree(){this.location.replaceState(this.urlSerializer.serialize(this.rawUrlTree),"",{navigationId:this.lastSuccessfulId})}}return t.\u0275fac=function(e){return new(e||t)(Qt(ri),Qt($l),Qt(kh),Qt(sA),Qt(Fi),Qt(Ba),Qt(sa),Qt(void 0))},t.\u0275prov=st({token:t,factory:t.\u0275fac}),t})(),vh=(()=>{class t{constructor(t,e,n){this.router=t,this.route=e,this.locationStrategy=n,this.commands=[],this.subscription=t.events.subscribe(t=>{t instanceof fl&&this.updateTargetUrlAndHref()})}set routerLink(t){this.commands=null!=t?Array.isArray(t)?t:[t]:[]}set preserveQueryParams(t){Yn()&&console&&console.warn&&console.warn("preserveQueryParams is deprecated, use queryParamsHandling instead."),this.preserve=t}ngOnChanges(t){this.updateTargetUrlAndHref()}ngOnDestroy(){this.subscription.unsubscribe()}onClick(t,e,n,r){if(0!==t||e||n||r)return!0;if("string"==typeof this.target&&"_self"!=this.target)return!0;const o={skipLocationChange:Wh(this.skipLocationChange),replaceUrl:Wh(this.replaceUrl),state:this.state};return this.router.navigateByUrl(this.urlTree,o),!1}updateTargetUrlAndHref(){this.href=this.locationStrategy.prepareExternalUrl(this.router.serializeUrl(this.urlTree))}get urlTree(){return this.router.createUrlTree(this.commands,{relativeTo:this.route,queryParams:this.queryParams,fragment:this.fragment,preserveQueryParams:Wh(this.preserve),queryParamsHandling:this.queryParamsHandling,preserveFragment:Wh(this.preserveFragment)})}}return t.\u0275fac=function(e){return new(e||t)(Si(Bh),Si(Kc),Si(eA))},t.\u0275dir=ue({type:t,selectors:[["a","routerLink",""],["area","routerLink",""]],hostVars:2,hostBindings:function(t,e){1&t&&Gi("click",(function(t){return e.onClick(t.button,t.ctrlKey,t.metaKey,t.shiftKey)})),2&t&&(Ji("href",e.href,br),ki("target",e.target))},inputs:{routerLink:"routerLink",preserveQueryParams:"preserveQueryParams",target:"target",queryParams:"queryParams",fragment:"fragment",queryParamsHandling:"queryParamsHandling",preserveFragment:"preserveFragment",skipLocationChange:"skipLocationChange",replaceUrl:"replaceUrl",state:"state"},features:[Ei]}),t})();function Wh(t){return""===t||!!t}let Ih=(()=>{class t{constructor(t,e,n,r,o){this.parentContexts=t,this.location=e,this.resolver=n,this.changeDetector=o,this.activated=null,this._activatedRoute=null,this.activateEvents=new Ls,this.deactivateEvents=new Ls,this.name=r||"primary",t.onChildOutletCreated(this.name,this)}ngOnDestroy(){this.parentContexts.onChildOutletDestroyed(this.name)}ngOnInit(){if(!this.activated){const t=this.parentContexts.getContext(this.name);t&&t.route&&(t.attachRef?this.attach(t.attachRef,t.route):this.activateWith(t.route,t.resolver||null))}}get isActivated(){return!!this.activated}get component(){if(!this.activated)throw new Error("Outlet is not activated");return this.activated.instance}get activatedRoute(){if(!this.activated)throw new Error("Outlet is not activated");return this._activatedRoute}get activatedRouteData(){return this._activatedRoute?this._activatedRoute.snapshot.data:{}}detach(){if(!this.activated)throw new Error("Outlet is not activated");this.location.detach();const t=this.activated;return this.activated=null,this._activatedRoute=null,t}attach(t,e){this.activated=t,this._activatedRoute=e,this.location.insert(t.hostView)}deactivate(){if(this.activated){const t=this.component;this.activated.destroy(),this.activated=null,this._activatedRoute=null,this.deactivateEvents.emit(t)}}activateWith(t,e){if(this.isActivated)throw new Error("Cannot activate an already activated outlet");this._activatedRoute=t;const n=(e=e||this.resolver).resolveComponentFactory(t._futureSnapshot.routeConfig.component),r=this.parentContexts.getOrCreateContext(this.name).children,o=new Dh(t,r,this.location.injector);this.activated=this.location.createComponent(n,this.location.length,o),this.changeDetector.markForCheck(),this.activateEvents.emit(this.activated.instance)}}return t.\u0275fac=function(e){return new(e||t)(Si(kh),Si(ws),Si(Xi),("name",function(t,e){const n=t.attrs;if(n){const t=n.length;let e=0;for(;e<t;){const r=n[e];if(hn(r))break;if(0===r)e+=2;else if("number"==typeof r)for(e++;e<t&&"string"==typeof n[e];)e++;else{if("name"===r)return n[e+1];e+=2}}}return null}(Pe())),Si(ei))},t.\u0275dir=ue({type:t,selectors:[["router-outlet"]],outputs:{activateEvents:"activate",deactivateEvents:"deactivate"},exportAs:["outlet"]}),t})();class Dh{constructor(t,e,n){this.route=t,this.childContexts=e,this.parent=n}get(t,e){return t===Kc?this.route:t===kh?this.childContexts:this.parent.get(t,e)}}class Oh{}class Gh{preload(t,e){return Ha(null)}}let Ph=(()=>{class t{constructor(t,e,n,r,o){this.router=t,this.injector=r,this.preloadingStrategy=o,this.loader=new wh(e,n,e=>t.triggerEvent(new ml(e)),e=>t.triggerEvent(new kl(e)))}setUpPreloading(){this.subscription=this.router.events.pipe(Ma(t=>t instanceof fl),Na(()=>this.preload())).subscribe(()=>{})}preload(){const t=this.injector.get(zt);return this.processRoutes(t,this.router.config)}ngOnDestroy(){this.subscription.unsubscribe()}processRoutes(t,e){const n=[];for(const r of e)if(r.loadChildren&&!r.canLoad&&r._loadedConfig){const t=r._loadedConfig;n.push(this.processRoutes(t.module,t.routes))}else r.loadChildren&&!r.canLoad?n.push(this.preloadConfig(t,r)):r.children&&n.push(this.processRoutes(t,r.children));return N(n).pipe(Q(),O(t=>{}))}preloadConfig(t,e){return this.preloadingStrategy.preload(e,()=>this.loader.load(t.injector,e).pipe(M(t=>(e._loadedConfig=t,this.processRoutes(t.module,t.routes)))))}}return t.\u0275fac=function(e){return new(e||t)(Qt(Bh),Qt(Ba),Qt(sa),Qt(Fi),Qt(Oh))},t.\u0275prov=st({token:t,factory:t.\u0275fac}),t})(),Hh=(()=>{class t{constructor(t,e,n={}){this.router=t,this.viewportScroller=e,this.options=n,this.lastId=0,this.lastSource="imperative",this.restoredId=0,this.store={},n.scrollPositionRestoration=n.scrollPositionRestoration||"disabled",n.anchorScrolling=n.anchorScrolling||"disabled"}init(){"disabled"!==this.options.scrollPositionRestoration&&this.viewportScroller.setHistoryScrollRestoration("manual"),this.routerEventsSubscription=this.createScrollEvents(),this.scrollEventsSubscription=this.consumeScrollEvents()}createScrollEvents(){return this.router.events.subscribe(t=>{t instanceof gl?(this.store[this.lastId]=this.viewportScroller.getScrollPosition(),this.lastSource=t.navigationTrigger,this.restoredId=t.restoredState?t.restoredState.navigationId:0):t instanceof fl&&(this.lastId=t.id,this.scheduleScrollEvent(t,this.router.parseUrl(t.urlAfterRedirects).fragment))})}consumeScrollEvents(){return this.router.events.subscribe(t=>{t instanceof Bl&&(t.position?"top"===this.options.scrollPositionRestoration?this.viewportScroller.scrollToPosition([0,0]):"enabled"===this.options.scrollPositionRestoration&&this.viewportScroller.scrollToPosition(t.position):t.anchor&&"enabled"===this.options.anchorScrolling?this.viewportScroller.scrollToAnchor(t.anchor):"disabled"!==this.options.scrollPositionRestoration&&this.viewportScroller.scrollToPosition([0,0]))})}scheduleScrollEvent(t,e){this.router.triggerEvent(new Bl(t,"popstate"===this.lastSource?this.store[this.restoredId]:null,e))}ngOnDestroy(){this.routerEventsSubscription&&this.routerEventsSubscription.unsubscribe(),this.scrollEventsSubscription&&this.scrollEventsSubscription.unsubscribe()}}return t.\u0275fac=function(e){return new(e||t)(Qt(Bh),Qt(UA),Qt(void 0))},t.\u0275prov=st({token:t,factory:t.\u0275fac}),t})();const Nh=new It("ROUTER_CONFIGURATION"),Mh=new It("ROUTER_FORROOT_GUARD"),Lh=[sA,{provide:$l,useClass:tc},{provide:Bh,useFactory:function(t,e,n,r,o,i,s,a={},A,u){const l=new Bh(null,t,e,n,r,o,i,Ql(s));if(A&&(l.urlHandlingStrategy=A),u&&(l.routeReuseStrategy=u),a.errorHandler&&(l.errorHandler=a.errorHandler),a.malformedUriErrorHandler&&(l.malformedUriErrorHandler=a.malformedUriErrorHandler),a.enableTracing){const t=Ta();l.events.subscribe(e=>{t.logGroup("Router Event: "+e.constructor.name),t.log(e.toString()),t.log(e),t.logGroupEnd()})}return a.onSameUrlNavigation&&(l.onSameUrlNavigation=a.onSameUrlNavigation),a.paramsInheritanceStrategy&&(l.paramsInheritanceStrategy=a.paramsInheritanceStrategy),a.urlUpdateStrategy&&(l.urlUpdateStrategy=a.urlUpdateStrategy),a.relativeLinkResolution&&(l.relativeLinkResolution=a.relativeLinkResolution),l},deps:[$l,kh,sA,Fi,Ba,sa,yh,Nh,[class{},new et],[class{},new et]]},kh,{provide:Kc,useFactory:function(t){return t.routerState.root},deps:[Bh]},{provide:Ba,useClass:Ia},Ph,Gh,class{preload(t,e){return e().pipe(zu(()=>Ha(null)))}},{provide:Nh,useValue:{enableTracing:!1}}];function Jh(){return new wa("Router",Bh)}let Qh=(()=>{class t{constructor(t,e){}static forRoot(e,n){return{ngModule:t,providers:[Lh,zh(e),{provide:Mh,useFactory:Zh,deps:[[Bh,new et,new rt]]},{provide:Nh,useValue:n||{}},{provide:eA,useFactory:Eh,deps:[Za,[new tt(rA),new et],Nh]},{provide:Hh,useFactory:Th,deps:[Bh,UA,Nh]},{provide:Oh,useExisting:n&&n.preloadingStrategy?n.preloadingStrategy:Gh},{provide:wa,multi:!0,useFactory:Jh},[Vh,{provide:Js,multi:!0,useFactory:Yh,deps:[Vh]},{provide:qh,useFactory:Xh,deps:[Vh]},{provide:Ys,multi:!0,useExisting:qh}]]}}static forChild(e){return{ngModule:t,providers:[zh(e)]}}}return t.\u0275mod=ae({type:t}),t.\u0275inj=at({factory:function(e){return new(e||t)(Qt(Mh,8),Qt(Bh,8))}}),t})();function Th(t,e,n){return n.scrollOffset&&e.setOffset(n.scrollOffset),new Hh(t,e,n)}function Eh(t,e,n={}){return n.useHash?new iA(t,e):new oA(t,e)}function Zh(t){if(t)throw new Error("RouterModule.forRoot() called twice. Lazy loaded modules should use RouterModule.forChild() instead.");return"guarded"}function zh(t){return[{provide:Ui,multi:!0,useValue:t},{provide:yh,multi:!0,useValue:t}]}let Vh=(()=>{class t{constructor(t){this.injector=t,this.initNavigation=!1,this.resultOfPreactivationDone=new w}appInitializer(){return this.injector.get(Va,Promise.resolve(null)).then(()=>{let t=null;const e=new Promise(e=>t=e),n=this.injector.get(Bh),r=this.injector.get(Nh);if(this.isLegacyDisabled(r)||this.isLegacyEnabled(r))t(!0);else if("disabled"===r.initialNavigation)n.setUpLocationChangeListener(),t(!0);else{if("enabled"!==r.initialNavigation)throw new Error(`Invalid initialNavigation options: '${r.initialNavigation}'`);n.hooks.afterPreactivation=()=>this.initNavigation?Ha(null):(this.initNavigation=!0,t(!0),this.resultOfPreactivationDone),n.initialNavigation()}return e})}bootstrapListener(t){const e=this.injector.get(Nh),n=this.injector.get(Ph),r=this.injector.get(Hh),o=this.injector.get(Bh),i=this.injector.get(Ca);t===i.components[0]&&(this.isLegacyEnabled(e)?o.initialNavigation():this.isLegacyDisabled(e)&&o.setUpLocationChangeListener(),n.setUpPreloading(),r.init(),o.resetRootComponentType(i.componentTypes[0]),this.resultOfPreactivationDone.next(null),this.resultOfPreactivationDone.complete())}isLegacyEnabled(t){return"legacy_enabled"===t.initialNavigation||!0===t.initialNavigation||void 0===t.initialNavigation}isLegacyDisabled(t){return"legacy_disabled"===t.initialNavigation||!1===t.initialNavigation}}return t.\u0275fac=function(e){return new(e||t)(Qt(Fi))},t.\u0275prov=st({token:t,factory:t.\u0275fac}),t})();function Yh(t){return t.appInitializer.bind(t)}function Xh(t){return t.bootstrapListener.bind(t)}const qh=new It("Router Initializer");let _h=(()=>{class t{}return t.CV="",t.diplome="",t.attestation="",t})();function $h(t,e){if(1&t&&(Ii(0),Bi(1,"a",20),Bi(2,"span",21),Wi(3,"i",22),vi(),Ni(4),vi(),Wi(5,"br"),Di()),2&t){const t=e.$implicit;Mr(1),Ci("href",null==t?null:t.link,br),Mr(2),Ci("ngClass",null==t?null:t.icon),Mr(1),Mi(null==t?null:t.name)}}function td(t,e){if(1&t&&(Ii(0),Bi(1,"h5"),Ni(2),vi(),Bi(3,"p"),Bi(4,"small"),Ni(5),vi(),vi(),Di()),2&t){const t=e.$implicit;Mr(2),Mi(null==t?null:t.title),Mr(3),Mi(null==t?null:t.meta)}}const ed=[{path:"",redirectTo:"/",pathMatch:"full"},{path:"",component:(()=>{class t{constructor(t){this.dataApi=t,this.showMobileImages=!1}onresize(t){console.log("WINDOW_RESIZE_EVENT",t),this.checkWindowSize()}checkWindowSize(){this.showMobileImages=window.innerWidth<=768}ngOnInit(){return t=this,void 0,n=function*(){this.checkWindowSize(),this.skills=yield this.dataApi.getTopSkills(),console.log("SKILLS",this.skills),this.featuredProjects=yield this.dataApi.getFeaturedProjects(),console.log("PROJECTS",this.featuredProjects),this.workExperience=yield this.dataApi.getWorkHistory(),console.log("WORK",this.workExperience),this.profile=yield this.dataApi.getProfile(),console.log("PROFILE",this.profile)},new((e=void 0)||(e=Promise))((function(r,o){function i(t){try{a(n.next(t))}catch(e){o(e)}}function s(t){try{a(n.throw(t))}catch(e){o(e)}}function a(t){var n;t.done?r(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(i,s)}a((n=n.apply(t,[])).next())}));var t,e,n}downloadPdf(t,e){const n="data:application/pdf;base64,"+t,r=document.createElement("a");r.href=n,r.download=e+".pdf",r.click()}onClickDownloadPdf(){this.downloadPdf(_h.CV,(this.profile.name+" _CV").replace(/\s/g,""))}onClickDownloadDiplome(){this.downloadPdf(_h.diplome,(this.profile.name+" _Diplome").replace(/\s/g,""))}onClickDownloadattestation(){this.downloadPdf(_h.attestation,(this.profile.name+" _Attestation").replace(/\s/g,""))}}return t.\u0275fac=function(e){return new(e||t)(Si(_A))},t.\u0275cmp=re({type:t,selectors:[["app-home"]],hostBindings:function(t,e){1&t&&Gi("resize",(function(t){return e.onresize(t)}),!1,wn)},decls:64,vars:6,consts:[[1,"rh-bg"],[1,"container","mb-4"],[1,"row"],[1,"col-lg-4"],[1,"sticky-top"],[1,"row","mt-3"],[1,"col-lg-12"],[1,"card","rh-card"],[1,"card-body"],[1,"m-0","mb-3"],[1,"col-lg-3"],["alt","Photo",1,"rh-profile-img",3,"src"],[1,"col-lg-9","my-auto","rh-profile-info"],[1,"m-0"],[4,"ngFor","ngForOf"],[1,"btn","btn-primary","mt-1",3,"click"],[1,"ml-2"],[1,"fas","fa-cloud-download-alt"],[1,"card-text",2,"white-space","pre-wrap",3,"innerHTML"],[1,"col-lg-8"],[3,"href"],[1,"mr-2"],["aria-hidden","true",3,"ngClass"]],template:function(t,e){1&t&&(Bi(0,"div",0),Bi(1,"div",1),Bi(2,"div",2),Bi(3,"div",3),Bi(4,"div",4),Bi(5,"div",5),Bi(6,"div",6),Bi(7,"div",7),Bi(8,"div",8),Bi(9,"h5"),Ni(10," Information Personnelle"),vi(),Wi(11,"hr",9),Bi(12,"div",2),Bi(13,"div",10),Wi(14,"img",11),vi(),Bi(15,"div",12),Bi(16,"h5"),Ni(17),vi(),Bi(18,"p",13),Ni(19),vi(),xi(20,$h,6,3,"ng-container",14),Bi(21,"button",15),Gi("click",(function(){return e.onClickDownloadPdf()})),Ni(22,"CV"),Bi(23,"span",16),Wi(24,"i",17),vi(),vi(),vi(),vi(),vi(),vi(),vi(),vi(),Bi(25,"div",5),Bi(26,"div",6),Bi(27,"div",7),Bi(28,"div",8),Bi(29,"h5"),Ni(30,"A propos de moi"),vi(),Wi(31,"hr",9),Bi(32,"div",2),Bi(33,"div",6),Wi(34,"p",18),vi(),vi(),vi(),vi(),vi(),vi(),vi(),vi(),Bi(35,"div",19),Bi(36,"div",5),Bi(37,"div",6),Bi(38,"div",7),Bi(39,"div",8),Bi(40,"h5"),Ni(41,"Education"),vi(),Wi(42,"hr",9),Bi(43,"div",2),Bi(44,"div",6),xi(45,td,6,2,"ng-container",14),vi(),vi(),vi(),vi(),vi(),vi(),Bi(46,"div",5),Bi(47,"div",6),Bi(48,"div",7),Bi(49,"div",8),Bi(50,"h5"),Ni(51," Mes documents"),vi(),Wi(52,"hr",9),Bi(53,"div",2),Bi(54,"button",15),Gi("click",(function(){return e.onClickDownloadPdf()})),Ni(55,"CV"),Bi(56,"span",16),Wi(57,"i",17),vi(),vi(),Wi(58,"br"),vi(),Bi(59,"div",2),Bi(60,"button",15),Gi("click",(function(){return e.onClickDownloadattestation()})),Ni(61,"Attestation"),Bi(62,"span",16),Wi(63,"i",17),vi(),vi(),vi(),vi(),vi(),vi(),vi(),vi(),vi(),vi(),vi()),2&t&&(Mr(14),Ci("src",null==e.profile?null:e.profile.avatar,br),Mr(3),Mi(null==e.profile?null:e.profile.name),Mr(2),Li("",null==e.profile?null:e.profile.location," "),Mr(1),Ci("ngForOf",null==e.profile?null:e.profile.socials),Mr(14),Ci("innerHTML",null==e.profile?null:e.profile.about,Rr),Mr(11),Ci("ngForOf",null==e.profile?null:e.profile.education))},directives:[gA,dA],styles:[""]}),t})()},{path:"koffi-buame",redirectTo:"/",pathMatch:"full"},{path:"**",component:(()=>{class t{constructor(){}ngOnInit(){}}return t.\u0275fac=function(e){return new(e||t)},t.\u0275cmp=re({type:t,selectors:[["app-page-not-found"]],decls:10,vars:0,consts:[[1,"page-wrap","d-flex","flex-row","align-items-center"],[1,"container"],[1,"row","justify-content-center"],[1,"col-md-12","text-center"],[1,"display-1","d-block"],[1,"mb-4","lead"],["routerLink","/",1,"btn","btn-link"]],template:function(t,e){1&t&&(Bi(0,"div",0),Bi(1,"div",1),Bi(2,"div",2),Bi(3,"div",3),Bi(4,"span",4),Ni(5,"404"),vi(),Bi(6,"div",5),Ni(7,"The page you are looking for was not found."),vi(),Bi(8,"a",6),Ni(9,"Back to Home"),vi(),vi(),vi(),vi(),vi())},directives:[vh],styles:["body[_ngcontent-%COMP%] {\n        background: #dedede;\n    }\n    .page-wrap[_ngcontent-%COMP%] {\n        min-height: 80vh;\n    }"]}),t})()}];let nd=(()=>{class t{}return t.\u0275mod=ae({type:t}),t.\u0275inj=at({factory:function(e){return new(e||t)},imports:[[Qh.forRoot(ed)],Qh]}),t})(),rd=(()=>{class t{constructor(){this.title="portfolio"}}return t.\u0275fac=function(e){return new(e||t)},t.\u0275cmp=re({type:t,selectors:[["app-root"]],decls:1,vars:0,template:function(t,e){1&t&&Wi(0,"router-outlet")},directives:[Ih],styles:[""]}),t})(),od=(()=>{class t{}return t.\u0275mod=ae({type:t,bootstrap:[rd]}),t.\u0275inj=at({factory:function(e){return new(e||t)},providers:[_A],imports:[[xu,nd,qA]]}),t})();(function(){if(Vn)throw new Error("Cannot enable prod mode after platform setup.");zn=!1})(),mu().bootstrapModule(od).catch(t=>console.error(t))},zn8P:function(t,e){function n(t){return Promise.resolve().then((function(){var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}))}n.keys=function(){return[]},n.resolve=n,t.exports=n,n.id="zn8P"}},[[0,0]]]);